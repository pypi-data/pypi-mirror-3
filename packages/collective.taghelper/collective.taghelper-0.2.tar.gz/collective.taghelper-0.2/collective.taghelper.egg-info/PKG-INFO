Metadata-Version: 1.0
Name: collective.taghelper
Version: 0.2
Summary: The act of tagging content is tedious and humans will
            often fail to do it. Taghelper examines the content and
            extracts the keywords that are most relevant.
Home-page: http://svn.plone.org/svn/collective/
Author: UNKNOWN
Author-email: UNKNOWN
License: GPL
Description: Project Description
        ===================
        
        Taghelper uses OpenCalais, Yahoo, SiLLC and tagthe.net
        
        Installation with buildout
        ==========================
        
        Add collective.taghelper to the eggs section of you buildout: ::
        
            eggs =
                collective.taghelper
        
        
        Activate the product in your add ons section. This will install a Tag Helper
        controlpanel in you site setup. You have to fill in the API Keys for the
        webservices you want to use and choose if you want to use the local content
        or the destination of a link if your content type has an attribute remote_url
        (In Plone OOTB this would be the link type). The product adds
        a new tab for your content named tagging. In this form you can choose the
        keywords you want to add to your content. Keywords assigned earlier
        manually will be preserved.
        
        - Code repository: https://svn.plone.org/svn/collective/collective.taghelper/
        - Questions and comments to product-developers@lists.plone.org
        - Report bugs at http://plone.org/products/collective.taghelper/issues
        
        
        Change history
        **************
        
        Changelog
        =========
        
        0.2 (2011/11/16)
        ----------------
        
        - add AlchemyApi
        - get tags asynchronsously via AJAX
        - comment out rarely used api methods to reduce clutter
        - ommit tags that are already assigned as keywords
        - add terms of use for webservices
        
        
        0.1 (2011/02/22)
        ----------------
        - initial release
        - Created recipe with ZopeSkel
          ["nan"]
        
        Detailed Documentation
        **********************
        
        Introduction
        ============
        
        This is a full-blown functional test. The emphasis here is on testing what
        the user may input and see, and the system is largely tested as a black box.
        We use PloneTestCase to set up this test as well, so we have a full Plone site
        to play with. We *can* inspect the state of the portal, e.g. using 
        self.portal and self.folder, but it is often frowned upon since you are not
        treating the system as a black box. Also, if you, for example, log in or set
        roles using calls like self.setRoles(), these are not reflected in the test
        browser, which runs as a separate session.
        
        Being a doctest, we can tell a story here.
        
        First, we must perform some setup. We use the testbrowser that is shipped
        with Five, as this provides proper Zope 2 integration. Most of the 
        documentation, though, is in the underlying zope.testbrower package.
        
            >>> from Products.Five.testbrowser import Browser
            >>> browser = Browser()
            >>> portal_url = self.portal.absolute_url()
        
        The following is useful when writing and debugging testbrowser tests. It lets
        us see all error messages in the error_log.
        
            >>> self.portal.error_log._ignored_exceptions = ()
        
        With that in place, we can go to the portal front page and log in. We will
        do this using the default user from PloneTestCase:
        
            >>> from Products.PloneTestCase.setup import portal_owner, default_password
        
        Because add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.  
        
            >>> browser.open(portal_url + '/login_form')
            >>> browser.getControl(name='__ac_name').value = portal_owner
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
        
        Here, we set the value of the fields on the login form and then simulate a
        submit click.  We then ensure that we get the friendly logged-in message:
        
            >>> "You are now logged in" in browser.contents
            True
        
        Finally, let's return to the front page of our site before continuing
        
            >>> browser.open(portal_url)
        
        -*- extra stuff goes here -*-
        
        
        Contributors
        ************
        
        "", Author
        
        
        Download
        ********
        
Platform: UNKNOWN
Classifier: Framework :: Plone
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
Classifier: Development Status :: 5 - Production/Stable
