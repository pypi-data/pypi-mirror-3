Metadata-Version: 1.0
Name: collective.ots
Version: 0.2
Summary: Writing a good summary (description) is hard,
                let the Open Text Summarizer (OTS) do the heavy lifting.
                This tool extracts a summary of the content and sets it
                as the description of the content item you added
Home-page: http://svn.plone.org/svn/collective/
Author: UNKNOWN
Author-email: UNKNOWN
License: GPL
Description: 
        Project Description
        ===================
        
        The summary may not be perfect but it is a good starting point for a
        description. Mostly the summary is pretty good though.
        The description is only auto generated when you ADD a new Archetypes
        content item WITHOUT a description. You may edit this description at any
        time. You can invoke the summarizer on existing content items by
        selecting 'Summarize' from the 'Actions' menu
        
        Install using buildout
        =======================
        
        Just add collective.ots (and optionally ots) to the egges section of you buildout ::
        
            eggs:
                ...
                ots
                collective.ots
        
        Run buildout, restart your server and activate the product in your add ons section.
        You do not have to use the ots egg (http://pypi.python.org/pypi/ots)
        if you have problems installing it. Any ots found in your system will do,
        so you may install it with: ::
        
            sudo apt-get install libots0
        
        or the package manager of your distribution, or install it from source.
        
        check that ots is installed and working with: ::
        
            ots -?
        
        which will give you the output: ::
        
            Usage:
              ots [OPTION...] [file.txt | stdin]  - Open Text Summarizer
        
            Help Options:
              -?, --help                Show help options
        
            Application Options:
              -r, --ratio=<int>         summarization % [default = 20%]
              -d, --dic=<string>        dictionary to use
              -o, --out=<string>        output file [default = stdout]
              -h, --html                output as html
              -k, --keywords            only output keywords
              -a, --about               only output the summary
              -v, --version             show version information
        
        
        
        
        - Code repository: https://svn.plone.org/svn/collective/collective.ots/
        - Questions and comments to product-developers@lists.plone.org
        - Report bugs at http://plone.org/products/collective.ots/issues
        
        
        Change history
        **************
        
        Changelog
        =========
        0.2 (2011/09/28)
        ----------------
         - catch exceptions if ots is not found
        
        
        0.1 (2011/02/22)
        ----------------
        - added 'Summarize' view to 'Actions' menu
        - Created recipe with ZopeSkel
          ["nan"]
        
        Detailed Documentation
        **********************
        
        Introduction
        ============
        
        This is a full-blown functional test. The emphasis here is on testing what
        the user may input and see, and the system is largely tested as a black box.
        We use PloneTestCase to set up this test as well, so we have a full Plone site
        to play with. We *can* inspect the state of the portal, e.g. using 
        self.portal and self.folder, but it is often frowned upon since you are not
        treating the system as a black box. Also, if you, for example, log in or set
        roles using calls like self.setRoles(), these are not reflected in the test
        browser, which runs as a separate session.
        
        Being a doctest, we can tell a story here.
        
        First, we must perform some setup. We use the testbrowser that is shipped
        with Five, as this provides proper Zope 2 integration. Most of the 
        documentation, though, is in the underlying zope.testbrower package.
        
            >>> from Products.Five.testbrowser import Browser
            >>> browser = Browser()
            >>> portal_url = self.portal.absolute_url()
        
        The following is useful when writing and debugging testbrowser tests. It lets
        us see all error messages in the error_log.
        
            >>> self.portal.error_log._ignored_exceptions = ()
        
        With that in place, we can go to the portal front page and log in. We will
        do this using the default user from PloneTestCase:
        
            >>> from Products.PloneTestCase.setup import portal_owner, default_password
        
        Because add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.  
        
            >>> browser.open(portal_url + '/login_form')
            >>> browser.getControl(name='__ac_name').value = portal_owner
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
        
        Here, we set the value of the fields on the login form and then simulate a
        submit click.  We then ensure that we get the friendly logged-in message:
        
            >>> "You are now logged in" in browser.contents
            True
        
        Finally, let's return to the front page of our site before continuing
        
            >>> browser.open(portal_url)
        
        -*- extra stuff goes here -*-
        
        
        Contributors
        ************
        
        "", Author
        
        
        Download
        ********
        
Platform: UNKNOWN
Classifier: Framework :: Plone
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
