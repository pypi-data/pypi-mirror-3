.\" This file is part of FMS, an agent-based Financial Market Simulator
.\" FMS is (c) 2008,2009 Jean-Charles Bagneris. See LICENSE for redistribution
.\" information and usual disclaimer.
.\" Process with groff -man -Tascii experiment-conf.yml.5
.\"
.TH EXPERIMENT-CONF.YML 1 "2008-12-14" "FMS Development Team" "Financial Market Simulator"
.SH NAME
experiment-conf.yml \- experiment configuration file.
.SH SYNOPSIS
.B experiment-conf.yml
.SH DESCRIPTION
FMS needs an experiment description to be able to run it. The experiment
configuration file contains this description.
.LP
The experiment configuration file name might be whatever you want (provided your
operating system allows it) but should have an '.yml' extension for FMS to know
how to parse it (other formats such as XML exist for compatibility reasons, even
if their use is discouraged).
.LP
The experiment configuration file is a YAML file, see http://www.yaml.org if you
do not know about yaml. This serialization format is human readable, which means
that, hopefully, you should easily understand the examples provided in
docs/examples and write your own.
.LP
An FMS YAML configuration file should contain one and only one YAML 'document',
i.e. only one section delimited by '---'. The parameters it describes are as
follows:  
.TP 
\fBoutputfilename\fP Name of transactions output file (optional)
The name of the file to which the transactions resulting from the experiment
should be output. This file is a comma separated values one, suitable for use in
whatever processing you need afterwards. The transactions are output to the console if this parameter is missing.
.TP
\fBorderslogfilename\fP Name of order log file (optional)
The name of the file to which the different orders generated by the agents are
saved in a chronological manner. This file is a comma separated values one, and
is necessary to replay an experiment, for an example. If this parameter is
missing, the orders are not saved.
.TP
\fBrandomseed\fP Seed of the pseudo-ramdom numbers generator (optional)
As some agents take random decisions, and some engines randomly choose the
agents allowed to speak, a random generator is sometimes needed. FMS uses
Python's
.B random
library, which uses the Mersenne Twister as the core
generator (see http://docs.python.org/library/random.html for more about this).
As this library accepts an optional seed parameter, you may specify it here.
.TP
\fBcsvdelimiter\fP Delimiter used in the comma separated value files (optional)
The field delimiter in the various csv output files. This is optional, as the default value is semicolon ; and is automatically accepted by most spreadsheets. Accepted values are semicolon ;, comma ,, tab, space, colon :, pipe |, dash -, exclamation mark !, slash /.
.TP
\fBworld\fP World class information (required)
Parameters describing the World class to use in this experiment:
.RS
.TP
\fBclassname\fP World class name (required)
The name of the world class to use. The class source should be in a module named
after the class, in all lowercase chars, with a '.py' extension, located in the
.I fms/worlds/
directory.
.TP
\fBargs\fP World class arguments (optional)
Any arguments required by or optional to the world class.
.RE
.TP
\fBengines\fP Engine classes information (required)
Parameters describing the Engine classes to use in this experiment. The
experiment might use multiple engines, one after the other, thus the list syntax
is required for the classname arguments (that is, they should be preceded by a 
dash, see the examples).
.RS
.TP
\fBclassname\fP Engine class name (at least one required)
The name of the engine class to use. The class source should be in a module named
after the class, in all lowercase chars, with a '.py' extension, located in the
.I fms/engines/
directory.
.TP
\fBmarket\fP Market class information (required)
Parameters describing the Market class associated whith this Engine class:
.RS
.TP
\fBclassname\fP Market class name (required)
The name of the market class to use. The class source should be in a module named
after the class, in all lowercase chars, with a '.py' extension, located in the
.I fms/markets/
directory.
.TP
\fBargs\fP Market class arguments (optional)
Any arguments required by or optional to the market class.
.RE
.TP
\fBdays\fP Number of days (optional, integer)
The number of days the experiment will run, as an integer. See
.B daylength
below. Days is set to one if missing.
.TP
\fBclearbooksateod\fP Clear books at end of day (optional, boolean)
Should engine clear order books at the end of every given day. True if missing. Note that if this parameter is set to False for a given engine, there is no difference between an experiment with d days and t daylength, and another one with 1 day and d*t daylength.
.TP
\fBdaylength\fP Day length (optional, integer)
The number or times the engine will choose an agent
and let her speak on the market, per day, as an integer. The daylength is set to one if missing.
The engine will thus loop 'days times daylength' times before stopping.
.TP
\fBargs\fP Engine class arguments (optional)
Any arguments required by or optional to the engine class.
.RE
.TP
\fBagents\fP Agents classes information (required)
Parameters describing the Agent classes to use in this experiment. The
experiment might use multiple agents classes, one after the other, thus the 
list syntax is required for the classname arguments (that is, they should be 
preceded by a dash, see the examples).
.RS
.TP
\fBclassname\fP Agent class name (at least one required)
The name of the agent class to use. The class source should be in a module named
after the class, in all lowercase chars, with a '.py' extension, located in the
.I fms/agents/
directory.
.TP
\fBnumber\fP Number of agents instances (required)
The number of agent instances of this class on the market as an integer. 
Especially useful if you want to mix agents classes on the market 
(e.g. informed and non-informed) in given proportions.
.TP
\fBmoney\fP Initial endowment of the agent (required)
The money the agent owns for investing when the experiment starts, as a float.
This parameter might be used (or not) in the agent class, to check that the
agents is able to pay for the orders she puts, for an example.
.TP
\fBstocks\fP Initial # of stocks in the agent's portfolio (required)
The number of stocks the agent owns when the experiment starts, as an integer.
This parameter might be used (or not) in the agent class, to check for
shortselling, for an example.
.TP
\fBargs\fP Agent class arguments (optional)
Any arguments required by or optional to the agent class.
.SH SEE ALSO
fms(1)
.SH AUTHOR
Jean-Charles Bagneris <jcb at bagneris dot net>

