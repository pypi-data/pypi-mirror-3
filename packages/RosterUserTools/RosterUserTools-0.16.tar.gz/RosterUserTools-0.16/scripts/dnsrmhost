#!/usr/bin/env python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Remove host tool for dnsmanagement"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.16'


import sys
import xmlrpclib

from roster_user_tools import cli_record_lib
from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib
from roster_user_tools.action_flags import Remove
from roster_user_tools.data_flags import Host


class Args(Remove, Host):
  pass


def main(args):
  """Collects command line arguments, checks ip addresses and adds records.

  Inputs:
    args: list of arguments from the command line
  """
  command = 'host'
  if( args and not args[0].startswith('-') ):
    command = args.pop(0)
  usage = ('')
  usage = ('\n'
           '\n'
           'To remove a host:\n'
           '\t%s --ip-address <ip-address> -t <target>\n'
           '\t-z <zone-name> [--ttl <ttl>] [-v <view-name>]\n' % tuple(
               [sys.argv[0] for _ in range(1)]))
  args_instance = Args(command, ['host'], args, usage)
  options = args_instance.options

  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, error:
    print 'ERROR: %s' % error
    sys.exit(1)
  cli_record_lib_instance = cli_record_lib.CliRecordLib(cli_common_lib_instance)

  if( options.ip_address.find('.') != -1 ):
    version = 4
  elif( options.ip_address.find(':') != -1 ):
    version = 6
  else:
    cli_common_lib.DnsError('Incorrectly formatted IP address.', 1)

  records_dict = roster_client_lib.RunFunction(
      'ListRecordsByCIDRBlock', options.username, credfile=options.credfile,
      server_name=options.server, args=[options.ip_address],
      kwargs={'view_name': options.view_name})['core_return']
  reverse_zone_name = roster_client_lib.RunFunction(
      'ListZoneByIPAddress', options.username, credfile=options.credfile,
      server_name=options.server, args=[options.ip_address])['core_return']
  zone_info = roster_client_lib.RunFunction(
      'ListZones', options.username, credfile=options.credfile,
      server_name=options.server, kwargs={'zone_name': reverse_zone_name})[
          'core_return']
  try:
    zone_info[reverse_zone_name][
        options.view_name]['zone_origin']
  except KeyError:
    cli_common_lib.DnsError('Reverse zone not found.', 1)
  try:
    records_list = []
    for record in records_dict[options.view_name][options.ip_address]:
      if( record['record_zone_name'] == options.zone_name ):
        records_list.append(record)
  except KeyError:
    cli_common_lib.DnsError('Record not found.', 1)
  if( len(records_list) == 0 ):
    cli_common_lib.DnsError('Record not found.', 1)
  if( len(records_list) == 1 ):
    hostname = records_list[0]['host']
    if( not hostname.endswith('.') ):
      hostname = '%s.' % hostname
  else:
    cli_common_lib.DnsError('Multiple records found.', 1)
  record_type = u'a'
  if( version == 6 ):
    record_type = u'aaaa'
  try:
    cli_record_lib_instance.RemoveRecord(record_type, options,
                                {u'assignment_ip': options.ip_address},
                                quiet=options.quiet, raise_errors=True)
    removed_type = True
  except xmlrpclib.Fault, error:
    error_string = error.faultString
    if( len(error_string.split(')')) > 1 ):
      error_string = error_string.split(')')[1].strip()
    if(  error_string == 'Record not found.' ):
      removed_type = False
    else:
      print 'SERVER ERROR: %s' % error_string
      sys.exit(1)
  reverse_ip = roster_client_lib.RunFunction(
      'ReverseIP', options.username, credfile=options.credfile,
      server_name=options.server, args=[options.ip_address])['core_return']
  options.zone_name = reverse_zone_name
  options.target = reverse_ip
  try:
    cli_record_lib_instance.RemoveRecord(u'ptr', options,
                                {u'assignment_host': hostname},
                                quiet=options.quiet, raise_errors=True)
    removed_ptr = True
  except xmlrpclib.Fault, error:
    error_string = error.faultString
    if( len(error_string.split(')')) > 1 ):
      error_string = error_string.split(')')[1].strip()
    if( error_string == 'No records found.' ):
      removed_ptr = False
    else:
      print 'SERVER ERROR: %s' % error_string
      sys.exit(1)
  if( not removed_type and not removed_ptr ):
    cli_common_lib.DnsError('Record not found.')

if( __name__ == "__main__" ):
  main(sys.argv[1:])
