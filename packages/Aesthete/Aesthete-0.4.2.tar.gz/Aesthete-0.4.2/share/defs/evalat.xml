<evalat type="phrasegroup" lhs="expression" rhs="subs" latex_name="\evalal" title="Evaluate at">
  <mes>
    <me name="entity"/>
    <me name="phrase"/>
    <me name="phrasegroup"/>
  </mes>
  <characteristics>
    <ch name="_bodmasable"/>
  </characteristics>
  <inherited_properties>
    <ip name="font_size" value="45" type="int"/>
    <ip name="bold" value="False" type="bool"/>
    <ip name="font_size_coeff" value="1.0" type="float"/>
    <ip name="rgb_colour" type="tuple">
      <ti value="0.0" type="float"/>
      <ti value="0.0" type="float"/>
      <ti value="0.0" type="float"/>
    </ip>
    <ip name="font_size_combined_coeff" value="1.0" type="float"/>
  </inherited_properties>
  <properties>
    <property name="phraser" value="expression" type="str"/>
    <property name="highlight_group" value="True" type="bool"/>
    <property name="name" value="phrase_70569784" type="str"/>
    <property name="enterable" value="False" type="bool"/>
  </properties>
  <entities>
    <phrase_expression type="bracketed_phrase" target="expression">
      <properties>
        <property name="name" value="phrase_expression" type="str"/>
      </properties>
    </phrase_expression>
    <entity_199237900 type="space" width="0.1" height="0.1">
      <properties>
        <property name="show_decorated" value="True" type="bool"/>
        <property name="name" value="entity_199237900" type="str"/>
      </properties>
    </entity_199237900>
    <phrase_70660040 type="script" available="True,False,False,False">
      <targets>
        <target type="target_phrase" name="expression">
          <properties>
            <property name="enterable" value="False" type="bool"/>
            <property name="attachable" value="False" type="bool"/>
            <property name="name" value="expression" type="str"/>
            <property name="deletable" value="2" type="int"/>
          </properties>
          <entities>
    		<entity_199241676 type="vertical_line">
    		  <properties>
    		    <property name="name" value="entity_199241676" type="str"/>
    		    <property name="wordlike" value="True" type="bool"/>
    		    <property name="horizontal_ignore" value="True" type="bool"/>
    		    <property name="always_recalc" value="True" type="bool"/>
    		    <property name="tied_to" type="entity" value="phrase_expression"/>
    		    <property name="thickness" value="0.05" type="float"/>
    		    <property name="length" value="27.0" type="float"/>
    		  </properties>
    		</entity_199241676>
	  </entities>
        </target>
        <target type="target_phrase" name="site0">
          <properties>
            <property name="enterable" value="False" type="bool"/>
            <property name="name" value="site0" type="str"/>
            <property name="deletable" value="2" type="int"/>
          </properties>
          <entities>
            <phrase_75888904 type="phrase" target="subs">
              <properties>
                <property name="name" value="phrase_75888904" type="str"/>
              </properties>
            </phrase_75888904>
          </entities>
        </target>
      </targets>
    </phrase_70660040>
  </entities>
  <targets>
    <target type="target_phrase" name="expression">
      <properties>
        <property name="name" value="expression" type="str"/>
        <property name="deletable" value="2" type="int"/>
      </properties>
    </target>
    <target type="target_phrase" name="subs">
      <properties>
        <property name="name" value="subs" type="str"/>
        <property name="deletable" value="2" type="int"/>
      </properties>
    </target>
  </targets>
  <latex>self["expression"].to_latex()+'\vline_{'+self["subs"].to_latex()+'}'</latex>
  <sympy>self["expression"].get_sympy().subs({self["subs"].get_sympy().lhs : self["subs"].get_sympy().rhs} if isinstance(self["subs"].get_sympy(), Equality) else dict(map(lambda eq : (eq.lhs, eq.rhs), self["subs"].get_sympy())))</sympy>
  <string>self["expression"].to_string()+u'|_{'+self["subs"].to_string()+u'}'</string>
  <info>A vertical line can be used to indicate where an expression should be evaluated. Takes a subscript argument of the form x=n, or a comma array thereof.</info>
  <symbol>|</symbol>
  <category>General</category>
  <alternatives>evalat</alternatives>
  <shortcut>&lt;Shift&gt;bar</shortcut>
</evalat>
