h1. Continuous services

If you have any experience with contributing to the "GitHub services":https://github.com/github/github-services, this process should be somewhat familiar :)

h2. How the services work

# A build completes
# For the (zero or more) services setup for that project:
#* A background job is submitted with data about the build and the user-specified options for that service
#* The job is processed and the relevant Service class is instantiated and the @build_complete@ method called.
#* The @build_complete@ does what it should do (emails, tweets, sends an IM etc.)
#* Done!

h2. Steps to contributing

1. Fork this project

2. Copy the skeleton service to give yourself a starting point:

<pre lang="bash">
cd continuous_services/services
cp -r skeleton example
</pre>

3. Rename the @SkeletonFrom@ and @SkeletonService@ classes to @ExampleForm@ and @ExampleService@ receptively.

4. Add any requirements to @/setup.py@, inside @install_requires@.

5. Send a pull request.

6. One it is accepted it will appear in Continuous for everyone to use.

h2. Available data

The following are available to you within your service, and can be used when writing you @build_complete()@ method.

h3. self.project

<pre lang="python">
{
 'id': 1,
 'aws_key_pair_fingerprint': u'00:11:22',
 'name': u'Example Project',
 'url_name': u'example-project',
 'description': None,
 'git_uri': u'git@github.com:adamcharnock/ci.git',
 'is_private': False,
 'continuous_hosted': False,
 'secret': u'projectsecret',
 'setup_script': u"echo 'Moo'",
 'template': 'Python',
 'url': None,
 'user_id': 2
}
</pre>

h3. self.project_user

<pre lang="python">
{
 'id': 2
 'email': u'adam@playnice.ly',
 'first_name': u'Adam',
 'last_name': u'Charnock',
 'username': u'adam'
}
</pre>

h3. self.branch

<pre lang="python">
{
 'name': u'develop',
 'id': 2,
 'project_id': 1
}
</pre>

h3. self.build

<pre lang="python">
{
 'id': 12,
 'display_id': 1, # The build number as shown to the user
 'branch_id': 2,
 'project_id': 1,
 'result': 'S', # S (success), F (failure), or D (dead / build error)
 'result_human': 'Success'
 'script_output': "Build script output here",
 'status': 'done'
 'status_human': 'Done'
}
</pre>

h3. self.previous_build

As above, or @None@ if no previous build exists.

h3. self.results

<pre lang="python">
[{
 'id': 1234,
 'name': "app.models.UserTestCase.test_welcome_email",
 'build_id': 12,
 'test_id': 345,
 'stdout': 'output received on stdout (if any)',
 'logs': 'any logging output (if any)',
 'trace': 'stack trace (if any)',
 'result': 'S', # S (success), F (failure), or E (error)
 'result_human': 'Success'
},
...
]
</pre>

h2. How to test your service

We are going to implement some unit testing soon...
