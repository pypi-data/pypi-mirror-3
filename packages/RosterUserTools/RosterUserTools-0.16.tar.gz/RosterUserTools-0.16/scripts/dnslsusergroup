#!/usr/bin/env python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""List user tool for dnsmanagement"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.16'


import sys

from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib
from roster_user_tools.action_flags import List
from roster_user_tools.data_flags import User


class Args(List, User):
  pass


def main(args):
  """Collects command line arguments, lists users/groups/assignments

  Inputs:
    args: list of arguments from the command line
  """
  command = None
  if( args and not args[0].startswith('-') ):
    command = args.pop(0)
  usage = ('\n'
           '\n'
           'To list a user:\n'
           '\t%s user -n <user-name> -a <access-level>\n'
           '\n'
           'To list a group:\n'
           '\t%s group -g <group>\n'
           '\n'
           'To list a user group assignment:\n'
           '\t%s assignment -n <user-name> -g <group>\n'
           '\n'
           'To list a forward zone permission:\n'
           '\t%s forward -z <zone-name> -g <group>\n'
           '\t--access-right <access-right>\n'
           '\n'
           'To list a reverse range permission:\n'
           '\t%s reverse -z <zone-name> -b <cidr-block> -g <group>\n'
           '\t--access-right <access-right>\n' % tuple(
                   [sys.argv[0] for _ in range(5)]))
  args_instance = Args(command,
      ['user', 'group', 'assignment', 'forward', 'reverse'], args, usage)
  options = args_instance.options

  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, error:
    print 'ERROR: %s' % error
    sys.exit(1)

  if( options.access_right ):
    access_rights = roster_client_lib.RunFunction(
        u'ListAccessRights', options.username, credfile=options.credfile,
        credstring=options.credstring, server_name=options.server)[
            'core_return']
    access_rights_string = '|'.join(access_rights)

  print_list = []

  if( command == 'assignment' ):
    user_group = roster_client_lib.RunFunction(
        u'ListUserGroupAssignments', options.username,
        credfile=options.credfile,
        credstring=options.credstring, server_name=options.server,
        kwargs={'user_name': options.new_user, u'group_name': options.group})[
            'core_return']

    if( not options.no_header ):
      print_list = [['username', 'groups']]
    for user in user_group:
      if( options.group and user not in user_group ):
        continue
      group = []
      if( user in user_group ):
        group = user_group[user]
      print_list.append([user, ','.join(group)])

  elif( command == 'group' ):
    groups = roster_client_lib.RunFunction(
        u'ListGroups', options.username, credfile=options.credfile,
        credstring=options.credstring, server_name=options.server)[
            'core_return']
    if( not options.no_header ):
      print_list = [['group']]
    for group in groups:
      if( options.group and options.group != group ):
        continue
      print_list.append([group])

  elif( command == 'user' ):
    users = roster_client_lib.RunFunction(
        u'ListUsers', options.username, credfile=options.credfile,
        credstring=options.credstring, server_name=options.server,
        kwargs={'user_name': options.new_user,
                'access_level': options.access_level})['core_return']
    if( not options.no_header ):
      print_list = [['username', 'access_level']]
    for user in users:
      print_list.append([user, users[user]])

  elif( command == 'reverse' ):
    if( options.access_right and
        options.access_right not in access_rights ):
      cli_common_lib.DnsError('An access right must be %s.' % (
                                  access_rights_string), 1)

    permissions = roster_client_lib.RunFunction(
        u'ListReverseRangePermissions', options.username,
        credfile=options.credfile, credstring=options.credstring,
        server_name=options.server,
        kwargs={'cidr_block': options.cidr_block, 'group_name': options.group,
                'access_right': options.access_right})['core_return']
    if( not options.no_header ):
      print_list = [['group', 'cidr_block', 'access_right']]
    for group in permissions:
      for right in permissions[group]:
        print_list.append([group, right['cidr_block'], right['access_right']])

  elif( command == 'forward' ):
    if( options.access_right and
        options.access_right not in access_rights ):
      cli_common_lib.DnsError('An access right must be %s.' % (
                                  access_rights_string), 1)

    permissions = roster_client_lib.RunFunction(
        u'ListForwardZonePermissions', options.username,
        credfile=options.credfile, credstring=options.credstring,
        server_name=options.server,
        kwargs={'zone_name': options.zone_name,
                'group_name': options.group,
                'access_right': options.access_right})['core_return']
    if( not options.no_header ):
      print_list = [['group', 'zone_name', 'access_right']]
    for group in permissions:
      for assignment in permissions[group]:
        print_list.append([group, assignment['zone_name'],
                           assignment['access_right']])

  else:
    cli_common_lib.DnsError(
        'Command %s exists, but codepath doesn\'t.' % command, 1)

  print cli_common_lib.PrintColumns(
      print_list, first_line_header=not options.no_header)

if __name__ == "__main__":
  main(sys.argv[1:])
