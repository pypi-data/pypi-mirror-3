#!/usr/bin/env python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Set maintenance flag for Roster"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.17'


import sys

from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib
from roster_user_tools.data_flags import SetMaintenance


class Args(SetMaintenance):
  pass


def main(args):
  """Collects command line arguments.

  Inputs:
    args: list of arguments from the command line
  """
  command = None
  if( args and not args[0].startswith('-') ):
    command = args.pop(0)
  usage = ('\n'
           '\n'
           'To turn maintenance mode on:\n'
           '\t%s set --on\n'
           '\n'
           'To turn maintenance mode off:\n'
           '\t%s set --off\n'
           '\n'
           'To list current maintenance status:\n'
           '\t%s list' % tuple([sys.argv[0] for _ in range(3)]))
  args_instance = Args(command, ['set', 'list'], args, usage)
  options = args_instance.options

  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, error:
    print 'ERROR: %s' % error
    sys.exit(1)

  if( command == 'list' ):
    flag = roster_client_lib.RunFunction(
        u'CheckMaintenanceFlag', options.username, credfile=options.credfile,
        credstring=options.credstring, server_name=options.server)[
            'core_return']
    if( flag ):
      print "Maintenance mode is ON"
    else:
      print "Maintenance mode is OFF"
  elif( command == 'set' ):
    if( options.on ):
      roster_client_lib.RunFunction(
          u'SetMaintenanceFlag', options.username, credfile=options.credfile,
          credstring=options.credstring, server_name=options.server,
          args=[True])
    elif( options.off ):
      roster_client_lib.RunFunction(
          u'SetMaintenanceFlag', options.username, credfile=options.credfile,
          credstring=options.credstring, server_name=options.server,
          args=[False])

  else:
    cli_common_lib.DnsError(
        'Command %s exists, but code path does not.' % command, 1)

if __name__ == "__main__":
  main(sys.argv[1:])
