PyCOM - Distributed Component Model for Python
===============================================

Introduction
-------------

PyCOM is simple and easy-to-use distributed component model written in Python.
PyCOM makes different parts of your network application isolated and
independent, while allowing easy and straightforward interaction between them.

With PyCOM you build your application as a number of *services*,
each running in it's own process (or even on it's own computer)
and talking to each other via 0MQ.
You maintain a PyCOM *nameserver* for finding services by their names
(by the way, nameserver itself is a service).

Services provide *interfaces*, i.e. a named way of interacting with service.
They are somewhat similar to interfaces in e.g. Java, but note that
PyCOM does not perform any checks on interfaces. Interface usually has
some amount of *methods*.

Services are identified by path with parts separated by slashes,
e.g. ``/com/foo/group/service``.

Interfaces are identified by name with parts separated by dots,
e.g. ``com.foo.my-interface``

Highlights:

- Python 2 and Python 3 support out-of-box
- Free software (new BSD license)
- Low level enough to build your own frameworks
- ... and still simple enough be used as is!
- Doesn't teach you how to do your job - just does it's own
- Without black magic and lots of autogenerated code

Installation
-------------

You can download PyCOM from our PyPI page: http://pypi.python.org/pypi/pycom

We suggest using `pip` for PyCOM installation from source code as
`easy_install` has some issues with eggs and configuration files::

    $ pip install pycom

You can also checkout the latest code from BitBucket::

    $ hg clone https://bitbucket.org/divius/pycom

Our requirements are:

- POSIX-compatible OS (other may work)
- `Python <http://www.python.org>`_ 2.6, 2.7 or >= 3.2
- `0MQ Python bindings <http://www.zeromq.org/bindings:python>`_ >= 2.1.11
- `six <http://packages.python.org/six/>`_ for Python 3 compatibility
  (maybe we'll drop it later)

To run test suite you'll also need:

- `coverage.py <http://nedbatchelder.com/code/coverage/>`_
- `unittest2 <http://pypi.python.org/pypi/unittest2>`_ (Python 2.6 only)

Installing PyCOM is as simple as it can be::

    $ ./setup.py install

You may want to run test suite before installing::

    $ ./test.py

And finally to generate your own copy of this documentation, you'll need
`sphinx <http://sphinx.pocoo.org/>`_ utility.
Once you have all the requirements, run::

    $ cd docs
    $ make html

To start nameserver use script::

    $ /usr/local/bin/pycom-nameserver

You may need to adjust nameserver configuration
(see :doc:`config` for details).

Please report issues: https://bitbucket.org/divius/pycom/issues

Examples
---------

Service example::

    import pycom

    @pycom.interface("com.foo.example")
    class Query(object):

        @pycom.method("create")
        def method_create(self, request):
            return {"field1" : request.args}

    pycom.main()

Example service configuration::

    {
        "service": "/com/foo/example",
        "nameserver": "127.0.0.1:2012",
        "address": "127.0.0.1:2013"
    }

Example client code for this service::

    import pycom

    pycom.configure(nameserver="127.0.0.1:2012")

    query = pycom.locate("com.foo.example")
    print query.invoke("create", 42)
    # Prints {"field1" : 42}

Documentation
==============

.. toctree::
   :maxdepth: 2

   config
   apiref
   proto
   status

Indices and tables
==================

* :ref:`genindex`
* :ref:`search`
