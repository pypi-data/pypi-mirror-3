#!/usr/bin/env python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""List host tool for roster"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.17'


import IPy
import sys

from roster_user_tools import cli_record_lib
from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib
from roster_user_tools.action_flags import List
from roster_user_tools.data_flags import Host


class Args(List, Host):
  pass


def main(args):
  """Collects command line arguments, checks ip addresses and adds records.

  Inputs:
    args: list of arguments from the command line
  """
  command = None
  if( args and not args[0].startswith('-') ):
    command = args.pop(0)
  usage = ('\n'
           '\n'
           'To list hosts by CIDR:\n'
           '\t%s cidr --cidr-block <cidr-block> [-v <view-name>] '
           '[-z <zone-name>]\n'
           '\n'
           'To list hosts by zone:\n'
           '\t%s zone -z <zone-name> [-v <view-name>]\n' % tuple(
             [sys.argv[0] for _ in range(2)]))
  args_instance = Args(command, ['host','zone','cidr'], args, usage)
  options = args_instance.options

  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, error:
    print 'ERROR: %s' % error
    sys.exit(1)
  cli_record_lib.CliRecordLib(cli_common_lib_instance)
  
  hosts_dict = {}
  if( command == 'zone' ):
    if( options.zone_name is not None):
      hosts_dict = roster_client_lib.RunFunction(
        'ListSortedHostsByZone', options.username, credfile=options.credfile,
        server_name=options.server, args=[options.zone_name],
        kwargs={'view_name': options.view_name})['core_return']

  elif( command == 'cidr' ):
    if( options.cidr_block is not None ):
      hosts_dict = roster_client_lib.RunFunction(
        'ListSortedHostsByCIDR', options.username, credfile=options.credfile,
        server_name=options.server, args=[options.cidr_block],
        kwargs={'view_name': options.view_name, 
                'zone_name': options.zone_name})['core_return']
  print cli_common_lib.PrintSortedHosts(hosts_dict, 
        print_headers = not options.no_header)

if __name__ == "__main__":
  main(sys.argv[1:])
