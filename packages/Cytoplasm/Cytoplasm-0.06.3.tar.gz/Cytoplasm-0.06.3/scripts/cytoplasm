#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import subprocess
import sys
import os
import imp
import shutil
import cytoplasm


# This is the divider that's used for some subcommands.
divider = "=" * 70


def build_site(dir, clean, **args):
    "This is what will be called when the user runs `cytoplasm build`"
    # if the `clean` flag is true, clean the build directory.
    if clean:
        clean_build_dir(dir)
    cytoplasm.Site(dir).build()


def clean_build_dir(dir='.', **args):
    "Clean up the build directory in the current working directory."
    # get the build_dir from the configuration file of the Site for the 
    # current working directory
    build_dir = cytoplasm.Site(dir).config.build_dir
    if os.path.exists(build_dir):
        # for everything in the build directory....
        for sub in os.listdir(os.path.join(dir, build_dir)):
            path = os.path.join(dir, build_dir, sub)
            # if it's a directory, rmtree it
            if os.path.isdir(path):
                shutil.rmtree(path)
            # otherwise, it's a file and we can just remove it
            else:
                os.remove(path)


def init_site(site, **args):
    "This is the function called when you run `cytoplasm init something`"
    sites = {
            "bare": "git://github.com/startling/cytoplasm-bare.git",
            "cytoplasm-site": "git://github.com/startling/cytoplasm-site.git",
    }
    subprocess.call(["git", "clone", sites[site], "."])
    subprocess.call(["git", "submodule", "init"])
    subprocess.call(["git", "submodule", "update"])


def serve_site(port, rebuild, **args):
    """This is the function called when you run `cytoplasm serve`:
    serve the site in the build_dir.
    """
    import cytoplasm.server
    print(divider)
    print("Serving your site on port %d..." % (port))
    print(divider)
    cytoplasm.server.serve(port, rebuild)


def test_cytoplasm(test_controllers, **args):
    "This is the function called when you run `cytoplasm test`; test"
    import unittest
    print(divider)
    print("Running Cytoplasm's unittests:")
    # load the the tests in `cytoplasm` that match `test*.py`.
    all_tests = unittest.TestLoader().discover('cytoplasm', pattern='test*.py')
    # and run them:
    unittest.TextTestRunner().run(all_tests)
    print(divider)
    # if the -c flag is specified, test all the controllers in the
    # current directory:
    if test_controllers:
        for controller in os.listdir("_controllers"):
            print(divider)
            print("Testing the controller in '_controllers/%s':" %
                    (controller))
            controller_tests = unittest.TestLoader().discover(
                    os.path.join("_controllers", controller),
                    pattern='test*.py')
            unittest.TextTestRunner().run(controller_tests)
            print(divider)


def git_deploy(url, branch, dir, **args):
    # instantiate the site
    site = cytoplasm.Site(dir)
    # deduce the full path to the build directory
    build_dir = os.path.join(site.source, site.config.build_dir)
    # if there isn't a build directory, make one.
    if not os.path.exists(build_dir):
        os.mkdir(build_dir)
    # if there isn't a git repository in the build directory...
    if not os.path.exists(os.path.join(build_dir, ".git")):
        subprocess.call(["git", "init"], cwd=build_dir)
    # try to make a branch that named `branch`
    subprocess.call(["git", "branch", branch], cwd=build_dir)
    # and then check it out
    subprocess.call(["git", "checkout", branch], cwd=build_dir)
    # pull from the given remote branch
    subprocess.call(["git", "pull", url[0], branch], cwd=build_dir)
    # build the site
    site.build()
    # commit everything
    subprocess.call(["git", "add", "-A"], cwd=build_dir)
    subprocess.call(["git", "commit", "-m",
        "rebuilt by `cytoplasm git-deploy`"], cwd=build_dir)
    # and, finally, push.
    subprocess.call(["git", "push", url[0], branch], cwd=build_dir)


class Parser(argparse.ArgumentParser):
    "A custom parser class with more helpful error messages."
    def error(self, message):
        sys.stderr.write('error: %s\n' % message)
        self.print_help()
        sys.exit(2)


# Make an argparse parser, using the class above.
parser = Parser(description='a static blog compiler.', add_help=True)
# (subparsers, aka subcommands)
subparsers = parser.add_subparsers(title="Subcommands")
# "build" subparser, i.e. build the site
build = subparsers.add_parser('build',
        help='Build the cytoplasm site in the working directory.')
# Associate the build function, above, with the subcommand `build`.
build.set_defaults(func=build_site)
build.add_argument("dir", type=str,
        help="The source directory of your site; defaults to cwd.",
        action="store", nargs="?", default=".")
build.add_argument('-C', '--clean',
        help="Clean out the build directory before we build things.",
        action="store_true")
# `cytoplasm clean` function
clean = subparsers.add_parser('clean',
        help='Delete the things in the build directory of the cwd.')
clean.set_defaults(func=clean_build_dir)
clean.add_argument("dir", type=str,
        help="The source directory of your site; defaults to cwd.",
        action="store", nargs="?", default=".")
# "init" subparse
init = subparsers.add_parser('init',
        help='Clone a repository to work from (requires Git).')
init.set_defaults(func=init_site)
init.add_argument('site', choices=["bare", "cytoplasm-site"],
        help="The site you want to clone.")
# serve subparser
serve = subparsers.add_parser('serve',
        help="Serve your site with Python's built-in server.")
serve.set_defaults(func=serve_site)
serve.add_argument("port", type=int,
        help="The port to serve on; defaults to 8080.", action="store",
        nargs="?", default=8080)
serve.add_argument('-r', '--rebuild',
        help="Re-build the site automatically when changes are made.",
        action="store_true")
# test subparser
test = subparsers.add_parser('test',
        help="Test Cytoplasm with the built-in tests. (Requires nose).")
test.set_defaults(func=test_cytoplasm)
test.add_argument("-c", "--test-controllers", action="store_true",
        help="Run tests for the controllers in this site directory.")
# git deploy subparser
gd = subparsers.add_parser('git-deploy',
        help="Push the build directory for this site to a git repository.")
gd.set_defaults(func=git_deploy)
gd.add_argument("url", type=str,
        help="The remote git url to push to.",
        action="store", nargs=1)
gd.add_argument("branch", type=str,
        help="The remote branch url to push to; defaults to 'gh-pages'",
        default="gh-pages", action="store", nargs="?")
gd.add_argument("dir", type=str,
        help="The source directory of your site; defaults to cwd.",
        action="store", nargs="?", default=".")
# Parse the arguments from the command line.
args = parser.parse_args()
# run the functions associated with the arguments.
args.func(**vars(args))
