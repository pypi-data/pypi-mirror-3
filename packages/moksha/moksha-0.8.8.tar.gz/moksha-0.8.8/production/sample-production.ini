#
# moksha - Pylons development environment configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#
# This file is for deployment specific config options -- other configuration
# that is always required for the app is done in the config directory, 
# and generally should not be modified by end users. 

[DEFAULT]
debug = false
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = 8080

[app:main]
use = egg:moksha
full_stack = true
#lang = ru
cache_dir = /var/cache/moksha/data
beaker.session.key = moksha
beaker.session.secret = somesecret

#beaker.cache.type = ext:memcached
#beaker.cache.url = localhost:11211

##
## Moksha-specific configuration options
##

# Enable the initialization of tw2 widgets (instead of tw1)
# NOTE -- tw2 live widgets are still experimental.
#         Only enable this if you know what you're doing.
moksha.use_tw2 = False


# moksha.domain - Domain used for XSS communication.
#
# If your webapp and orbited live on app.live.example.com,
# just set this to app.live.example.com and you're done.
#
# If your webapp lives on app.live.example.com and orbited lives on
# orbited.live.example.com, you need to set this to a suffix of the two, like:
# moksha.domain = live.example.com
#
moksha.domain = localhost


# jGrowl notifications for socket state changes
moksha.socket.notify = True

# Enable the Moksha Connectors Middleware
moksha.connectors = True

# Enable the Moksha Extension Point Middleware
moksha.extensionpoints = True

# Enable Moksha CSRF Protection Middleware
moksha.csrf_protection = True
#moksha.csrf.session_cookie = authtkt
#moksha.csrf.session_env = CSRF_AUTH_SESSION_ID
#moksha.csrf.token_env = CSRF_TOKEN
#moksha.csrf.token_id = _csrf_token
#moksha.csrf.clear_env = repoze.who.identity repoze.what.credentials

# Where to store the feed caches.
#feed_cache = postgres://moksha:m0ksh4@localhost/moksha_feeds
feed_cache = sqlite:////var/lib/moksha/feeds.db

#
# Feed Streamer settings
#

# Max age (in seconds) of each feed in the cache
#feed.max_age = 900

# Timeout in seconds for the web request
#feed.timeout = 30

# The number of simultaneous connections
#feed.deferred_groups = 10

# Where to initialize and store our application databases.  %s is the app name.
#app_db = sqlite:///%s.db

# The location of our Orbited server
orbited_host = localhost
orbited_port = 9000

moksha.livesocket = True

# The backing protocol for live widgets.
# Available backends: stomp, amqp
moksha.livesocket.backend = stomp

# Stomp broker configuration.
# By default we use the MorbidQ broker, run by Orbited, for development.
stomp_broker = localhost
stomp_port = 61613
stomp_user = guest
stomp_pass = guest

# Optional AMQP Broker.
#amqp_broker = guest/guest@localhost
#amqp_broker_host = localhost
#amqp_broker_port = 5672
#amqp_broker_user = guest
#amqp_broker_pass = guest


# Documentation directory
docs_dir = /usr/share/doc/moksha-docs-$VERSION/html/

# Moksha chat configuration

# Use a built-in IRC server
#chat.backend = irc://localhost:9999
#chat.builtin = true
chat.backend = irc://irc.freenode.net:6667
chat.rooms = default
chat.default.staticRoomName = moksha
chat.default.roomAssignmentMode = static
chat.default.display.greeting = Moksha Chat
#chat.default.display.floating = true
#chat.default.display.floatingToggle = false
#chat.default.display.width = 400
#chat.default.display.height = 300
#chat.default.display.theme = simple
#chat.default.display.resizable = true

# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
#beaker.cache.data_dir = %(here)s/data/cache
#beaker.session.data_dir = %(here)s/data/sessions

# pick the form for your database
# %(here) may include a ':' character on Windows environments; this can
# invalidate the URI when specifying a SQLite db via path name
# sqlalchemy.url=postgres://moksha:m0ksh4@localhost/moksha
# sqlalchemy.url=mysql://username:password@hostname:port/databasename


# If you have sqlite, here's a simple default to get you started
# in development

sqlalchemy.url = sqlite:////var/lib/moksha/devdata.db
sqlalchemy.echo = false
sqlalchemy.echo_pool = false
sqlalchemy.pool_recycle = 3600

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
set debug = false

# Logging configuration
# Add additional loggers, handlers, formatters here
# Uses python's logging config file format
# http://docs.python.org/lib/logging-config-fileformat.html

[loggers]
keys = root, moksha, sqlalchemy, tg, auth, pylons

[handlers]
keys = console

[formatters]
keys = generic

# If you create additional loggers, add them as a key to [loggers]
[logger_root]
level = INFO
handlers = console

[logger_moksha]
level = DEBUG
handlers =
qualname = moksha

[logger_tg]
level = INFO
handlers =
qualname = tg

# repoze.who is noisy by default
[logger_auth]
level = WARNING
handlers =
qualname = auth


[logger_pylons]
level = INFO
handlers =
qualname = pylons

[logger_sqlalchemy]
level = INFO
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

# If you create additional handlers, add them as a key to [handlers]
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

# If you create additional formatters, add them as a key to [formatters]
[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
