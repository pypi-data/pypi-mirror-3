#!/usr/bin/env python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Make dns servers and dns server sets for roster"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.17'


import sys

from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib
from roster_user_tools.action_flags import Make
from roster_user_tools.data_flags import DnsServer


class Args(Make, DnsServer):
  pass


def main(args):
  """Collects command line arguments.

  Inputs:
    args: list of arguments from the command line
  """
  command = None
  if( args and not args[0].startswith('-') ):
    command = args.pop(0)
  usage = ('\n'
           '\n'
           'To make a dns server:\n'
           '\t%s dns_server -d <dns-server>\n'
           '\n'
           'To make a dns server set:\n'
           '\t%s dns_server_set -e <dns-server-set>\n'
           '\n'
           'To make a dns server set assignment:\n'
           '\t%s assignment -d <dns-server> -e <dns-server-set>\n' % tuple(
               [sys.argv[0] for _ in range(3)]))
  args_instance = Args(command, ['dns_server', 'dns_server_set', 'assignment'],
                       args, usage)
  options = args_instance.options

  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, error:
    cli_common_lib.DnsError(str(error), 1)

  dns_servers = roster_client_lib.RunFunction(
      u'ListDnsServers', options.username,
      credfile=options.credfile, credstring=options.credstring,
      server_name=options.server,
      kwargs={'dns_server_name': options.dns_server})['core_return']
  dns_server_sets = roster_client_lib.RunFunction(
      u'ListDnsServerSets', options.username,
      credfile=options.credfile, credstring=options.credstring,
      server_name=options.server,
      kwargs={'dns_server_set_name': options.dns_server_set})['core_return']

  if( command == 'dns_server' ):
    if( options.dns_server in dns_servers ):
      cli_common_lib.DnsError(
          'DNS Server "%s" already exists.' % options.dns_server, 1)
    roster_client_lib.RunFunction(
        u'MakeDnsServer', options.username,
        credfile=options.credfile, credstring=options.credstring,
        server_name=options.server,
        args=[options.dns_server])
    if( not options.quiet ):
      print 'ADDED DNS SERVER: %s' % options.dns_server

  elif( command == 'assignment' ):
    if( options.dns_server not in dns_servers ):
      cli_common_lib.DnsError(
          'DNS Server "%s" does not exist.' % options.dns_server, 1)
    if( options.dns_server_set not in dns_server_sets ):
      cli_common_lib.DnsError(
          'DNS Server Set "%s" does not exist.' % options.dns_server_set, 1)


    roster_client_lib.RunFunction(
        u'MakeDnsServerSetAssignments', options.username,
        credfile=options.credfile, credstring=options.credstring,
        server_name=options.server,
        args=[options.dns_server, options.dns_server_set])
    if( not options.quiet ):
      print ('ADDED DNS SERVER SET ASSIGNMENT: dns_server: %s '
            'dns_server_set: %s' % (options.dns_server, options.dns_server_set))

  elif( command == 'dns_server_set' ):
    if( options.dns_server_set in dns_server_sets ):
      cli_common_lib.DnsError(
          'DNS Server Set "%s" already exists.' % options.dns_server_set, 1)
    roster_client_lib.RunFunction(
        u'MakeDnsServerSet', options.username,
        credfile=options.credfile, credstring=options.credstring,
        server_name=options.server,
        args=[options.dns_server_set])
    if( not options.quiet ):
      print 'ADDED DNS SERVER SET: %s' % options.dns_server_set

  else:
    cli_common_lib.DnsError(
        'Command %s exists, but codepath doesn\'t.' % command, 1)

if __name__ == "__main__":
  main(sys.argv[1:])
