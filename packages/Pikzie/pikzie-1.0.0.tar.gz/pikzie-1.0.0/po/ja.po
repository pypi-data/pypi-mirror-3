# Pikzie ja.po.
# Copyright (C) 2008-2009 Kouhei Sutou
# This file is distributed under the same license as the Pikzie package.
# Kouhei Sutou <kou@clear-code.com>, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: 0.9.5\n"
"POT-Creation-Date: 2011-12-18 15:56+JST\n"
"PO-Revision-Date: 2011-12-18 16:01+0900\n"
"Last-Translator: Kouhei Sutou <kou@clear-code.com>\n"
"Language-Team: Japanese\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: pygettext.py 1.5\n"

#: lib/pikzie/assertions.py:43
msgid ""
"Pend the current running test.\n"
"\n"
"  self.pend(\"module XXX isn't found\") # => pend test"
msgstr ""
"実行中のテストを保留します。\n"
"\n"
"  self.pend(\"モジュールXXXが見つかりません\") # => テストを保留"

#: lib/pikzie/assertions.py:51
msgid ""
"Notify a message for the current running test.\n"
"\n"
"  if command_not_found:\n"
"      self.notify(\"skip due to command not found\") # => notify a message\n"
"      return"
msgstr ""
"実行中のテスト用メッセージを通知します。\n"
"\n"
"  if command_not_found:\n"
"      self.notify(\"コマンドがみつからないので省略します\") # => メッセージを"
"通知\n"
"      return"

#: lib/pikzie/assertions.py:61
msgid ""
"Omit the current running test.\n"
"\n"
"  if module_not_found:\n"
"      self.omit(\"omit due to a module isn't found\") # => omit test"
msgstr ""
"実行中のテストを省略します。\n"
"\n"
"  if module_not_found:\n"
"      self.omit(\"モジュールが見つからないので省略します\") # => テストを省略"

#: lib/pikzie/assertions.py:70
msgid ""
"Passes if expression is None.\n"
"\n"
"  self.assert_none(None) # => pass"
msgstr ""
"expressionがNoneのときパスします。\n"
"\n"
"  self.assert_none(None) # => パス"

#: lib/pikzie/assertions.py:82
msgid ""
"Passes if expression is not None.\n"
"\n"
"  self.assert_not_none(\"not none\") # => pass"
msgstr ""
"expressionがNoneではないときパスします。\n"
"\n"
"  self.assert_not_none(\"not none\") # => パス"

#: lib/pikzie/assertions.py:93
msgid ""
"Passes if expression is true value.\n"
"\n"
"  self.assert_true(True)     # => pass\n"
"  self.assert_true(\"string\") # => pass"
msgstr ""
"expressionが真の値のときパスします。\n"
"\n"
"  self.assert_true(True)     # => パス\n"
"  self.assert_true(\"string\") # => パス"

#: lib/pikzie/assertions.py:106
msgid ""
"Passes if expression is false value.\n"
"\n"
"  self.assert_false(False) # => pass\n"
"  self.assert_false(\"\")    # => pass"
msgstr ""
"expressionが偽の値のときパスします。\n"
"\n"
"  self.assert_false(False) # => パス\n"
"  self.assert_false(\"\")    # => パス"

#: lib/pikzie/assertions.py:119
msgid ""
"Passes if expected == actual.\n"
"\n"
"  self.assert_equal(5, 2 + 3) # => pass"
msgstr ""
"expected == actualのときパスします。\n"
"\n"
"  self.assert_equal(5, 2 + 3) # => パス"

#: lib/pikzie/assertions.py:132
msgid ""
"Passes if not_expected != actual.\n"
"\n"
"  self.assert_not_equal(-5, 2 + 3) # => pass"
msgstr ""
"not_expected != actualのときパスします。\n"
"\n"
"  self.assert_not_equal(-5, 2 + 3) # => パス"

#: lib/pikzie/assertions.py:150
msgid ""
"Passes if (expected - delta) <= actual <= (expected + delta).\n"
"\n"
"  self.assert_in_delta(3, 3.01, 0.001) # => pass"
msgstr ""
"(expected - delta) <= actual <= (expected + delta)のときパスします。\n"
"\n"
"  self.assert_in_delta(3, 3.01, 0.001) # => パス"

#: lib/pikzie/assertions.py:169
msgid ""
"Passes if re.match(pattern, target) doesn't return None.\n"
"\n"
"  self.assert_match(\"abc\", \"abcde\") # => pass\n"
"  self.assert_match(\"abc\", \"deabc\") # => fail"
msgstr ""
"re.match(pattern, target)がNoneを返さなければパスします。\n"
"\n"
"  self.assert_match(\"abc\", \"abcde\") # => パス\n"
"  self.assert_match(\"abc\", \"deabc\") # => 失敗"

#: lib/pikzie/assertions.py:189
msgid ""
"Passes if re.match(pattern, target) returns None.\n"
"\n"
"  self.assert_not_match(\"abc\", \"deabc\") # => pass\n"
"  self.assert_not_match(\"abc\", \"abcde\") # => fail"
msgstr ""
"re.match(pattern, target)がNoneを返すとパスします。\n"
"\n"
"  self.assert_not_match(\"abc\", \"deabc\") # => パス\n"
"  self.assert_not_match(\"abc\", \"abcde\") # => 失敗"

#: lib/pikzie/assertions.py:209
msgid ""
"Passes if re.search(pattern, target) doesn't return None.\n"
"\n"
"self.assert_search(\"abc\", \"deabc\") # => pass\n"
"self.assert_search(\"abc\", \"deABC\") # => fail"
msgstr ""
"re.search(pattern, target)がNoneを返さなければパスします。\n"
"\n"
"  self.assert_search(\"abc\", \"deabc\") # => パス\n"
"  self.assert_search(\"abc\", \"deABC\") # => 失敗"

#: lib/pikzie/assertions.py:229
msgid ""
"Passes if re.search(pattern, target) returns None.\n"
"\n"
"  self.assert_search(\"abc\", \"deABC\") # => pass\n"
"  self.assert_search(\"abc\", \"deabc\") # => fail"
msgstr ""
"re.search(pattern, target)がNoneを返すとパスします。\n"
"\n"
"  self.assert_search(\"abc\", \"deABC\") # => パス\n"
"  self.assert_search(\"abc\", \"deabc\") # => 失敗"

#: lib/pikzie/assertions.py:249
msgid ""
"Passes if hasattr(object, name) returns True.\n"
"\n"
"  self.assert_hasattr(\"string\", \"strip\")   # => pass\n"
"  self.assert_hasattr(\"string\", \"unknown\") # => fail"
msgstr ""
"hasattr(object, name)がTrueを返すとパスします。\n"
"\n"
"  self.assert_hasattr(\"string\", \"strip\")   # => パス\n"
"  self.assert_hasattr(\"string\", \"unknown\") # => 失敗"

#: lib/pikzie/assertions.py:264
msgid ""
"Passes if callable(object) returns True.\n"
"\n"
"  self.assert_callable(lambda: 1) # => pass\n"
"  self.assert_callable(\"string\")  # => fail"
msgstr ""
"callable(object)がTrueを返すとパスします。\n"
"\n"
"  self.assert_callable(lambda: 1) # => パス\n"
"  self.assert_callable(\"string\")  # => 失敗"

#: lib/pikzie/assertions.py:278
msgid ""
"Passes if callable_object(*args, **kw_args) raises exception and\n"
"returns raised exception value.\n"
"\n"
"  self.assert_raise_call(NameError,\n"
"                         lambda: unknown_variable) # => pass\n"
"                                                   # => returns NameError\n"
"                                                   #    value\n"
"  self.assert_raise_call(NameError, lambda: 1)     # => fail\n"
"\n"
"Exception instance can be also passed if it's comparable.\n"
"\n"
"  class ComparableError(Exception):\n"
"      def __init__(self, message):\n"
"          self.message = message\n"
"\n"
"      def __repr__(self):\n"
"          return \"%s(%r,)\" % (type(self).__name__, self.message)\n"
"\n"
"      def __eq__(self, other):\n"
"          return isinstance(other, self.__class__) "
"and                           self.message == other.message\n"
"\n"
"  def raise_error():\n"
"      raise ComparableError(\"value\")\n"
"  self.assert_raise_call(ComparableError(\"value\"),\n"
"                         raise_error)              # => pass\n"
"                                                   # => returns\n"
"                                                   #    ComparableError\n"
"                                                   #    value\n"
"  self.assert_raise_call(ComparableError(\"key\"),\n"
"                         raise_error)              # => fail"
msgstr ""
"callable_object(*args, **kw_args)が例外を発生させたらパスします。そして、発生した例外を返します。\n"
"\n"
"  self.assert_raise_call(NameError,\n"
"                         lambda: unknown_variable) # => パス\n"
"                                                   # => NameErrorを返す\n"
"  self.assert_raise_call(NameError, lambda: 1)     # => 失敗\n"
"\n"
"もし、例外インスタンスが比較可能であれば、例外インスタンスを渡すこともできます。\n"
"\n"
"  class ComparableError(Exception):\n"
"      def __init__(self, message):\n"
"          self.message = message\n"
"\n"
"      def __repr__(self):\n"
"          return \"%s(%r,)\" % (type(self).__name__, self.message)\n"
"\n"
"      def __eq__(self, other):\n"
"          return isinstance(other, self.__class__) and                           self.message == other.message\n"
"\n"
"  def raise_error():\n"
"      raise ComparableError(\"value\")\n"
"  self.assert_raise_call(ComparableError(\"value\"),\n"
"                         raise_error)              # => パス\n"
"                                                   # => ComparableErrorを返す\n"
"  self.assert_raise_call(ComparableError(\"key\"),\n"
"                         raise_error)              # => 失敗"

#: lib/pikzie/assertions.py:350
msgid "Deprecated. Use assert_raise_call()."
msgstr "非推奨です。assert_raise_call()を使ってください。"

#: lib/pikzie/assertions.py:356
msgid ""
"Passes if callable_object(*args, **kw_args) raises nothing exception\n"
"and returns called result.\n"
"\n"
"  self.assert_nothing_raised_call(lambda: 1)                # => pass\n"
"                                                            # => returns 1\n"
"  self.assert_nothing_raised_call(lambda: unknown_variable) # => fail"
msgstr ""
"callable_object(*args, **kw_args)が例外exceptionを発生させるとパスします。\n"
"\n"
"  self.assert_call_raise(NameError, lambda: unknown_variable) # => パス\n"
"  self.assert_call_raise(NameError, lambda: 1)                # => 失敗"

#: lib/pikzie/assertions.py:381
msgid "Deprecated. Use assert_nothing_raised_call()."
msgstr "非推奨です。assert_nothing_raised_call()を使ってください。"

#: lib/pikzie/assertions.py:387
msgid ""
"Passes if command is successfully ran and returns subprocess.Popen.\n"
"\n"
"  process = self.assert_run_command([\"echo\", \"123\"])    # => pass\n"
"  self.assert_equal(\"123\\n\", process.stdout.read())    # => pass\n"
"  self.assert_run_command(\"false\")                      # => fail\n"
"  self.assert_run_command(\"unknown-command\")            # => fail"
msgstr ""
"コマンドが正常終了するとパスします。subprocess.Popenオブジェクトを返しま"
"す。\n"
"\n"
"  process = self.assert_run_command([\"echo\", \"123\"])    # => パス\n"
"  self.assert_equal(\"123\\n\", process.stdout.read())    # => パス\n"
"  self.assert_run_command(\"false\")                      # => 失敗\n"
"  self.assert_run_command(\"unknown-command\")            # => 失敗"

#: lib/pikzie/assertions.py:423
msgid ""
"Passes if re.search(pattern, SYSLOG_CONTENT) doesn't return None\n"
"after callable_object(*args, **kw_args).\n"
"\n"
"  self.assert_search_syslog_call(\"X\", syslog.syslog, \"XYZ\") # => pass\n"
"  self.assert_search_syslog_call(\"X\", syslog.syslog, \"ABC\") # => fail"
msgstr ""
"callable_object(*args, **kw_args)の後にre.search(pattern, SYSLOG_CONTENT)が"
"Noneを返さなければパスします。\n"
"\n"
"  self.assert_search_syslog_call(\"X\", syslog.syslog, \"XYZ\") # => パス\n"
"  self.assert_search_syslog_call(\"X\", syslog.syslog, \"ABC\") # => 失敗"

#: lib/pikzie/assertions.py:481
msgid ""
"Passes if path exists.\n"
"\n"
"  self.assert_exists(\"/tmp/exist\")        # => pass\n"
"  self.assert_exists(\"/tmp/nonexistence\") # => fail"
msgstr ""
"パスが存在したらパスします。\n"
"\n"
"  self.assert_exists(\"/tmp/exist\")        # => パス\n"
"  self.assert_exists(\"/tmp/nonexistence\") # => 失敗"

#: lib/pikzie/assertions.py:493
msgid ""
"Passes if path doesn't exists.\n"
"\n"
"  self.assert_not_exists(\"/tmp/nonexistence\") # => pass\n"
"  self.assert_not_exists(\"/tmp/exist\")        # => fail"
msgstr ""
"パスが存在しなかったらパスします。\n"
"\n"
"  self.assert_not_exists(\"/tmp/nonexistence\") # => パス\n"
"  self.assert_not_exists(\"/tmp/exist\")        # => 失敗"

#: lib/pikzie/assertions.py:505
msgid ""
"Passes if open(name, *args) succeeds.\n"
"\n"
"  file = self.assert_open_file(\"/tmp/exist\", \"w\") # => pass\n"
"  self.assert_open_file(\"/tmp/nonexistence\")      # => fail"
msgstr ""
"open(name, *args)が成功するとパスします。\n"
"\n"
"  file = self.assert_open_file(\"/tmp/exist\", \"w\") # => パス\n"
"  self.assert_open_file(\"/tmp/nonexistence\")      # => 失敗"

#: lib/pikzie/assertions.py:527
msgid ""
"Passes if callable_object(*args, **kw_args) doesn't fail any\n"
"assertions in <timeout> seconds.\n"
"(It will tried <timeout / interval> times.)\n"
"\n"
"  def random_number():\n"
"      number = random.randint(0, 9)\n"
"      self.assert_in_delta(5, number, 1)\n"
"      return number\n"
"  self.assert_try_call(1, 0.1, random_number) # => will pass\n"
"                                              # returns 4, 5 or 6\n"
"  self.assert_try_call(1, 0.1, self.fail, \"Never succeed\") # => fail"
msgstr ""
"callable_object(*args, **kw_args)が<timeout>秒の間に1つでもアサーションがパス"
"すればパスします。（約<timeout / interval>回callable_object()が呼び出されま"
"す）\n"
"\n"
"  def random_number():\n"
"      number = random.randint(0, 9)\n"
"      self.assert_in_delta(5, number, 1)\n"
"      return number\n"
"  self.assert_try_call(1, 0.1, random_number) # => たぶんパス\n"
"                                              # 4か5か6を返す\n"
"  self.assert_try_call(1, 0.1, self.fail, \"Never succeed\") # => 失敗"

#: lib/pikzie/assertions.py:566
msgid ""
"Passes if /proc/kallsyms can be opened and name is in the list.\n"
"\n"
"  self.assert_kernel_symbol(\"printk\")       # => pass\n"
"                                            # returns an address of printk\n"
"  self.assert_kernel_symbol(\"non_existent\") # => fail"
msgstr ""
"/proc/kallsymsをオープンできて、読み込んだリストの中にnameがあればパスしま"
"す。\n"
"\n"
"  self.assert_kernel_symbol(\"printk\")       # => パス\n"
"                                            # printkのアドレスを返す\n"
"  self.assert_kernel_symbol(\"non_existent\") # => 失敗"

#: lib/pikzie/core.py:35
msgid ""
"A test suite is a composite test consisting of a number of TestCases.\n"
"\n"
"For use, create an instance of TestSuite, then add test case instances.\n"
"When all tests have been added, the suite can be passed to a test\n"
"runner, such as TextTestRunner. It will run the individual test cases\n"
"in the order in which they were added, aggregating the results. When\n"
"subclassing, do not forget to call the base class constructor."
msgstr ""

#: lib/pikzie/core.py:137
msgid "Hook method for deconstructing the test fixture after testing it."
msgstr ""

#: lib/pikzie/core.py:141
msgid ""
"A class whose instances are single test cases.\n"
"\n"
"If the fixture may be used for many test cases, create as\n"
"many test methods as are needed. When instantiating such a TestCase\n"
"subclass, specify in the constructor arguments the name of the test method\n"
"that the instance is to execute.\n"
"\n"
"Test authors should subclass TestCase for their own tests. Construction\n"
"and deconstruction of the test's environment ('fixture') can be\n"
"implemented by overriding the 'setup' and 'teardown' methods respectively.\n"
"\n"
"If it is necessary to override the __init__ method, the base class\n"
"__init__ method must always be called. It is important that subclasses\n"
"should not change the signature of their __init__ method, since instances\n"
"of the classes are instantiated automatically by parts of the framework\n"
"in order to be run."
msgstr ""

#: lib/pikzie/core.py:227
msgid ""
"Returns a one-line description of the test, or None if no\n"
"description has been provided.\n"
"\n"
"The default implementation of this method returns the first line of\n"
"the specified test method's docstring."
msgstr ""

#: lib/pikzie/core.py:636
msgid ""
"Context for running test.\n"
"\n"
"Test results are automatically managed by the TestCase and TestSuite\n"
"classes, and do not need to be explicitly manipulated by writers of tests.\n"
"\n"
"Each instance holds the total number of tests run, and collections of\n"
"failures and errors that occurred among those test runs. The collections\n"
"contain tuples of (testcase, exceptioninfo), where exceptioninfo is the\n"
"formatted traceback of the error that occurred."
msgstr ""

#: lib/pikzie/core.py:699
msgid "Called when the given test is about to be run"
msgstr ""

#: lib/pikzie/core.py:705
msgid "Called when the given test has been run"
msgstr ""

#: lib/pikzie/core.py:711
msgid "Called when the given test case is about to be run"
msgstr ""

#: lib/pikzie/core.py:715
msgid "Called when the given test case has been run"
msgstr ""

#: lib/pikzie/core.py:719
msgid "Called when the given test suite is about to be run"
msgstr ""

#: lib/pikzie/core.py:723
msgid "Called when the given test suite has been run"
msgstr ""

#: lib/pikzie/core.py:727
msgid "Called when an error has occurred."
msgstr ""

#: lib/pikzie/core.py:733
msgid "Called when a failure has occurred."
msgstr ""

#: lib/pikzie/core.py:739
msgid "Called when a notification has occurred."
msgstr ""

#: lib/pikzie/core.py:745
msgid "Called when a test has completed successfully"
msgstr ""

#: lib/pikzie/core.py:752
msgid "Called when a test is pended."
msgstr ""

#: lib/pikzie/core.py:758
msgid "Called when a test is omitted."
msgstr ""

#: lib/pikzie/core.py:764
msgid "Indicates that the tests should be interrupted"
msgstr ""

#: lib/pikzie/decorators.py:27
msgid "Set metadata to a method."
msgstr ""

#: lib/pikzie/decorators.py:39
msgid "Set Bug ID to a method."
msgstr ""

#: lib/pikzie/decorators.py:43
msgid "Set priority of test."
msgstr ""

#: lib/pikzie/decorators.py:47
msgid "Set test data."
msgstr ""

#: lib/pikzie/tester.py:25
msgid ""
"A command-line program that runs a set of tests; this is primarily\n"
"for making test modules conveniently executable."
msgstr ""

#: lib/pikzie/ui/console.py:100
msgid "Run the given test case or test suite."
msgstr ""
