Metadata-Version: 1.0
Name: gnowsys-studio
Version: 0.4.dev
Summary: A collaborative blogspace for constructing and publishing semantic knowledge networks and ontologies
Home-page: http://github.com/gnowgi/django-gstudio
Author: Nagarjuna G
Author-email: nagarjun@gnowledge.org
License: AGPLv3
Description: ==============
        GNOWSYS Studio
        ==============
        
        A collaborative workspace (studio) for constructing and publishing semantic
        knowledge networks and ontologies.  
        
        
        Features
        ========
        
        The application is devided into two sub-apps.  Gstudio and
        Objectapp. The former includes classes for organizing the network or
        constructing an ontology.  The latter includes classes for holding the
        instances of object-types, process-types and system-types. 
        
        Gstudio Components
        ------------------
        
        * Metatypes
        
          To hold Classes which have other classes as its members. e.g. "abstract noun", "adjective", "phylem", "class", "genus", "species" etc.
        * Object types
        
          To hold Classes: e.g. "thing", "being", "living being", "animals", "cat", "place", "person" etc.
        * Relation types
          
        To define binary relations (object properties) between classes and objects.  e.g., "part of", "friend of", "composed of", "located in" etc.
        * Attribute types
          
          To define datatype properties for classes and objects. e.g., "population", "size", "length", "height", "first name", "phone number" etc.
        * System types 
          
          To bring together some of the classes into a system or
          an ontology, a collection of the types defined above for
          convenience. You can bring together the required classes, relations
          and attributes into 
        * Process types
        
          To define a process as prior and post states of classes or objects.
        * Attributes
        
          To store attributes
        * Relations
        
          To store binary relations
        * Node Specification
        
          A node specified (described) by its relations or attributes or both.  
        * Relation Specification
          
          To create an expression using a relation with a subject, e.g.,
          "friend of Tom", "components of a cell" etc.
        
        * Attribute Specification
        
            To specify an attribute by a subject to say for example:
            population of India, color of a flower etc.  These do not yeild a
            proposition but an expression, which can be used as a subject in
            another sentence.
        
        * Expression
          
          Expression is more like a relation between two terms, but it does not yeild a proposition, e.g., 
          "Researchers in  India", "students residing in India" etc.  It is modelled more like relation
          class, except that the result is not a proposition/triple.
        
        * Union
          
          To define a class by a union relation between two or more classes.
        
        * Complement
        
          To define a class as a compleemnt of two or more classes.
        
        * Intersection
        
          To define a class as an intersection between two or more classes.
        
        Objectapp Components
        ------------------
        
        * Objects
          
          To hold the instances of Object types: "Mumbai", "Tom" etc.
        
        * Systems
        
          To hold the instances of System types.  
        
        * Processes
        
          To hold the instances of processes.
        
        Online Collaborative Platform
        =============================
        
        The application is built as a collaborative on line platform with the following features.
        
        Version Control
        ---------------
        
        All the changes by the users will be recorded.  This feature is implemented using  using django-reversion.
        
        User Registration
        -----------------
        
        Basic registration, authentication mechanism.
        
        
        Network Navigation using SVG graphs
        ==================================
        
        * neighbourhood graphs and concept graphs
        
        
        
        Other Semantic Web features
        ===========================
        
        * data in RDF format
        * rdf feed to a triple store
        * sparql endpoint
        
        Features to be implemented
        ==========================
        
        * export and import of standard knowledge representation languages: CL, OWL, XTM etc.
        
        Features adopted from Django-Blog-Zinnia
        ========================================
        
        The following features are adopted from django-blog-zinnia code base
        with a lot of gratitude.  Thanks to an excellent codebase of
        django-blog-zinnia, which taught us best software development
        practices as well! After reviewing each feature for the purpose of
        semantic blogging, we will retain or extend the following features.
        
        
        
        * Comments
        * Sitemaps
        * Archives views
        * Related entries
        * Private entries
        * RSS or Atom Feeds
        * Tags 
        * Advanced search engine
        * Prepublication and expiration
        * Edition in MarkDown, Textile or reStructuredText
        * Widgets (Popular entries, Similar entries, ...)
        * Spam protection with Akismet or TypePad
        * Admin dashboard
        * MetaWeblog API, xmlrpc
        * Ping Directories
        * Ping External links
        * Bit.ly support
        * Twitter support
        * Gravatar support
        * Django-CMS plugins
        * Collaborative work
        * Tags autocompletion
        * Entry model extendable
        * Pingback/Trackback support
        * Blogger conversion utility
        * WordPress conversion utility
        * WYMeditor, TinyMCE and MarkItUp support
        * Ready to use and extendables templates
        * Windows Live Writer compatibility
        
        Examples
        ========
        
        A sandbox site will give you a preview of the application.  Visit http://sbox.gnowledge.org/
        
        Project Page
        ============
        
        The project management is done from Savannah: https://savannah.gnu.org/projects/gnowsys/
        
        Mailing list
        ============
        
        Join this list if you are intersted in using or contributing as a hacker.
        
        http://gnowledge.org/cgi-bin/mailman/listinfo/gnowsys-dev
        
        ============
        Installation
        ============
        
        .. module:: gstudio
        
        .. _dependencies:
        
        Dependencies
        ============
        
        Make sure to install these packages prior to installation :
        
        * `Python 2.x`_ >= 2.5
        * `Django`_ >= 1.3
        * `django-mptt`_ >= 0.4.2
        * `django-tagging`_ >= 0.3.1
        * `BeautifulSoup`_ >= 3.2.0
        
        The packages below are optionnal but needed for run the full test suite.
        
        * `pyparsing`_ >= 1.5.5
        * `django-xmlrpc`_ >= 0.1.3
        
        Note that all the dependencies will be resolved if you install
        Gstudio with :program:`pip` or :program:`easy_install`, excepting Django.
        
        .. _getting-the-code:
        
        Getting the code
        ================
        
        .. highlight:: console
        
        For the latest stable version of Gstudio use :program:`easy_install`: ::
        
          $ easy_install django-gstudio
        
        or use :program:`pip`: ::
        
          $ pip install django-gstudio
        
        You could also retrieve the last sources from
        https://github.com/gnowgi/django-gstudio. Clone the repository
        using :program:`git` and run the installation script: ::
        
          $ git clone git://github.com/gnowgi/django-gstudio.git
          $ cd django-gstudio
          $ python setup.py install
        
        or more easily via :program:`pip`: ::
        
          $ pip install -e git://github.com/gnowgi/django-gstudio.git#egg=django-gstudio
        
        .. _applications:
        
        Applications
        ============
        
        .. highlight:: python
        
        Then register :mod:`gstudio`, and these following applications in the
        :setting:`INSTALLED_APPS` section of your project's settings. ::
        
          INSTALLED_APPS = (
            # Your favorite apps
            'django.contrib.contenttypes',
            'django.contrib.comments',
            'django.contrib.sessions',
            'django.contrib.sites',
            'django.contrib.admin',
            'tagging',
            'mptt',
            'gstudio',)
        
        .. _template-context-processors:
        
        Template Context Processors
        ===========================
        
        Add these following
        :setting:`template context processors<TEMPLATE_CONTEXT_PROCESSORS>` if not
        already present. ::
        
          TEMPLATE_CONTEXT_PROCESSORS = (
            'django.core.context_processors.auth',
            'django.core.context_processors.i18n',
            'django.core.context_processors.request',
            'django.core.context_processors.media',
            'django.core.context_processors.static',
            'gstudio.context_processors.version',) # Optional
        
        .. _urls:
        
        URLs
        ====
        
        Add the following lines to your project's urls.py in order to display the
        blog. ::
        
          url(r'^gstudio/', include('gstudio.urls')),
          url(r'^comments/', include('django.contrib.comments.urls')),
        
        Note that the default gstudio URLset is provided for convenient usage, but
        you can customize your URLs if you want. Here's how: ::
        
          url(r'^', include('gstudio.urls.capabilities')),
          url(r'^search/', include('gstudio.urls.search')),
          url(r'^sitemap/', include('gstudio.urls.sitemap')),
          url(r'^trackback/', include('gstudio.urls.trackback')),
          url(r'^gstudio/tags/', include('gstudio.urls.tags')),
          url(r'^gstudio/feeds/', include('gstudio.urls.feeds')),
          url(r'^gstudio/authors/', include('gstudio.urls.authors')),
          url(r'^gstudio/categories/', include('gstudio.urls.categories')),
          url(r'^gstudio/discussions/', include('gstudio.urls.discussions')),
          url(r'^gstudio/', include('gstudio.urls.quick_entry')),
          url(r'^gstudio/', include('gstudio.urls.entries')),
          url(r'^comments/', include('django.contrib.comments.urls')),
        
        .. _static-files:
        
        Static Files
        ============
        
        Since the version 1.3 of Django, Gstudio uses the
        :mod:`django.contrib.staticfiles` application to serve the static files
        needed. Please refer to
        https://docs.djangoproject.com/en/dev/howto/static-files/ for more
        informations about serving static files.
        
        .. _`Python 2.x`: http://www.python.org/
        .. _`Django`: https://www.djangoproject.com/
        .. _`django-mptt`: https://github.com/django-mptt/django-mptt/
        .. _`django-tagging`: https://code.google.com/p/django-tagging/
        .. _`BeautifulSoup`: http://www.crummy.com/software/BeautifulSoup/
        .. _`pyparsing`: http://pyparsing.wikispaces.com/
        .. _`django-xmlrpc`: https://github.com/Fantomas42/django-xmlrpc
        
        CHANGELOG
        =========
        
        0.10
        ----
        
        
Keywords: django,blog,post,news,gnowsys,gnowledge,semantic,networks,ontolgies,concept map,concept graph
Platform: UNKNOWN
Classifier: Framework :: Django
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Web Environment
Classifier: Programming Language :: Python
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: GNU Affero General Public License v3
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: Topic :: Scientific/Engineering :: Visualization
