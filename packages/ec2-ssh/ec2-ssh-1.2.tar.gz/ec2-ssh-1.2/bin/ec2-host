#!/usr/bin/env python

import os
import sys
import getopt

from sys import stderr

import boto.ec2


_ec2 = None


def short_usage():
    print >>stderr, """Usage: ec2-host [-k KEY] [-s SECRET] [-r REGION] [-t TAG] [NAME]
    ec2-host django8 => ec2-53-19-113-121.compute-1.amazonaws.com
Try `ec2-ssh --help' for more information."""


def full_usage():
    print >>stderr, """Usage: ec2-host [-k KEY] [-s SECRET] [-r REGION] [-t TAG] [NAME]
Prints server host name.

      --help                 display this help and exit
  -k, --aws-key KEY          Amazon EC2 Key, defaults to ENV[AWS_ACCESS_KEY_ID]
  -s, --aws-secret SECRET    Amazon EC2 Secret, defaults to ENV[AWS_SECRET_ACCESS_KEY]
  -r, --region REGION        Amazon EC2 Region, defaults to us-east-1 or ENV[AWS_EC2_REGION]
  -t, --tag TAG              Tag name for searching, defaults to 'Name'"""


def list_instances(instances, tag="Name"):
    instance_pairs = []
    for instance in instances:
        instance_name = instance.tags.get(tag)
        if instance.public_dns_name:
            pair = (instance_name, instance.public_dns_name)
            instance_pairs.append(pair)
    for pair in sorted(instance_pairs, key=lambda p: p[0]):
        print "%s\t%s" % pair


def ec2_instances(**kwargs):
    instances = []
    for reservation in _ec2.get_all_instances(**kwargs):
        instances.extend(reservation.instances)
    return instances


def main(argv):
    try:
        opts, args = getopt.getopt(argv, "hLk:s:r:t:",
                                         ["help", "aws-key=", "aws-secret=", "region=", "tag="])
    except getopt.GetoptError, err:
        print >>sys.stderr, err
        short_usage()
        sys.exit(2)

    aws_key = os.environ.get("AWS_ACCESS_KEY_ID")
    aws_secret = os.environ.get("AWS_SECRET_ACCESS_KEY")
    region = os.environ.get("AWS_EC2_REGION")
    tag = "Name"

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            full_usage()
            sys.exit()
        elif opt in("-k", "--aws-key"):
            aws_key = arg
        elif opt in("-s", "--aws-secret"):
            aws_secret = arg
        elif opt in ("-r", "--region"):
            region = arg
        elif opt in ("-t", "--tag"):
            tag = arg

    if not aws_key or not aws_secret:
        if not aws_key:
            print >>sys.stderr,\
            "AWS_ACCESS_KEY_ID not set in environment and not",\
            "specified by --aws-key KEY or -k KEY"

        if not aws_secret:
            print >>sys.stderr,\
            "AWS_SECRET_ACCESS_KEY not set in environment and not",\
            "specified by --aws-secret SECRET or -s SECRET"

        short_usage()
        sys.exit(2)

    region = region and boto.ec2.get_region(region,
                                            aws_access_key_id=aws_key,
                                            aws_secret_access_key=aws_secret)

    global _ec2
    _ec2 = boto.ec2.connection.EC2Connection(aws_key, aws_secret, region=region)

    argc = len(args)

    kwargs = {}
    if argc == 1:
        kwargs['filters'] = {'tag:%s' % tag: args[0]}
    elif argc > 1:
        print >>stderr, "Warning: more than one name given"
        sys.exit(1)
        return

    instances = ec2_instances(**kwargs)
    num_instances = len(instances)

    if num_instances == 1:
        print instances[0].public_dns_name

        sys.exit(0)
        return
    elif num_instances == 0 or num_instances > 1:
        list_instances(instances, tag)

        sys.exit(0)
        return
    else:
        print >>stderr, 'Unable to match "%s"' % args[0]
        short_usage()

        sys.exit(1)
        return

if __name__ == "__main__":
    main(sys.argv[1:])
