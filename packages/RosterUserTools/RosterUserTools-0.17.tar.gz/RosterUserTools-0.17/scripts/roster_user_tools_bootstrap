#!/usr/bin/env python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Carries out post user tools installation tasks for Roster"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.17'


import sys
from optparse import OptionParser
import ConfigParser

from roster_user_tools.data_flags import Bootstrap


class Args(Bootstrap):
  pass

def main(args):
  """Collects command line arguments.

  Inputs:
    args: list of arguments from the command line
  """
  command = 'bootstrap'
  if( args and not args[0].startswith('-') ):
    command = args.pop(0)
  usage = ('\n'
           '\n'
           'To generate a config file for Roster user tools:\n'
           '\t%s --server <server-url> --cred-file <cred-file>\n'
           '\t--config-file <config-file>\n' % tuple(
             [sys.argv[0] for _ in range(1)]))
  args_instance = Args(command, ['bootstrap'], args, usage, bootstrapper=True)
  options = args_instance.options

  missing_required = False
  if( options.server is None ):
    print ('ERROR: Server MUST be specified with --server to write the config '
           'file')
    missing_required = True
  if( options.config_file is None ):
    print 'ERROR: Config file MUST be specified with --config-file'
    missing_required = True
  if( missing_required ):
    sys.exit(1)

  config_file_object = ConfigParser.SafeConfigParser()

  section = 'user_tools'
  config_file_object.add_section(section)

  config_file_object.set(section, 'cred_file', options.credfile)
  config_file_object.set(section, 'server', options.server)

  config_file_object.write(open(options.config_file, 'wb'))

if __name__ == "__main__":
  main(sys.argv[1:])
