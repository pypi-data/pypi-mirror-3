Normally, zc.zk.ZooKeeper raises an exception if it can't connect to
ZooKeeper in a second.  Some applications might want to wait, so
zc.zk.ZooKeeper accepts a wait parameter that causes it to wait for a
connection.

    >>> zk = None
    >>> import zc.zk, zc.thread, zookeeper, zope.testing.loggingsupport

    >>> handler = zope.testing.loggingsupport.InstalledHandler('zc.zk')

    >>> @zc.thread.Thread
    ... def connect():
    ...     global zk
    ...     zk = zc.zk.ZooKeeper('Invalid', wait=True)

We'll wait a while while it tries in vane to connect:

    >>> wait_until((lambda : zk is not None), 4)
    Traceback (most recent call last):
    ...
    AssertionError: timeout

    >>> print handler # doctest: +ELLIPSIS
    zc.zk CRITICAL
      Can't connect to ZooKeeper at 'Invalid'
    zc.zk CRITICAL
      Can't connect to ZooKeeper at 'Invalid'
    ...
    >>> handler.uninstall()

Now, we'll make the connection possible:

    >>> ZooKeeper._allow_connection('Invalid')
    >>> wait_until(lambda : zk is not None)

    >>> zk.state == zookeeper.CONNECTED_STATE
    True

Yay!

    >>> zk.close()
