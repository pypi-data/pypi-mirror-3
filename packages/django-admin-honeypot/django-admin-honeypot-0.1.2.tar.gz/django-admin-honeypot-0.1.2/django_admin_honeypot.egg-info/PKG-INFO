Metadata-Version: 1.0
Name: django-admin-honeypot
Version: 0.1.2
Summary: A fake Django admin login screen.
Home-page: https://github.com/dmpayton/django-admin-honeypot
Author: Derek Payton
Author-email: derek.payton@gmail.com
License: MIT License
Download-URL: https://github.com/dmpayton/django-admin-honeypot/tarball/v0.1.2
Description: # django-admin-honeypot
        
        django-admin-honeypot is fake Django admin login page that logs all attempts to login in the database. The purpose is to give administrators some insight into who is attempting to gain unauthorized access to their Django-powered website.
        
        This app was inspired by discussion in and around Paul McMillan's security talk at DjangoCon 2011.
        
        * **Author**: [Derek Payton](http://dmpayton.com)
        * **Version**: 0.1.2
        * **License**: MIT
        
        ## Installation
        
        django-admin-honeypot can be installed in any number of the usual ways:
        
        ```
        easy_install django-admin-honeypot
        ```
        
        ```
        pip install django-admin-honeypot
        ```
        
        ```
        pip install -e git+git://github.com/dmpayton/django-admin-honeypot.git#egg=django-admin-honeypot
        ```
        
        ```
        git clone git://github.com/dmpayton/django-admin-honeypot.git
        cd django-admin-honeypot
        python setup.py install
        ```
        
        etc...
        
        ## Usage
        
        * Add `admin_honeypot` to `INSTALLED_APPS`.
        * Update your urls.py:
        
            ```
            urlpatterns = patterns(''
                ...
                url(r'^admin/', include('admin_honeypot.urls')),
                url(r'^secret/', include(admin.site.urls)),
            )
            ```
        
        ## Signals
        
        `admin_honeypot.signals.honeypot` is called on every login attempt with the following arguments:
        
        * **instance**: The LoginAttempt object created
        * **request**: The current request object
        
        You can setup custom listeners on this signal to, e.g., notify site admins of potential break-in attempts.
        
        ## Testing
        
            python manage.py test admin_honeypot
        
Keywords: django admin honeypot trap
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Framework :: Django
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
