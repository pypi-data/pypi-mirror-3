Metadata-Version: 1.0
Name: hexagonit.portletstyle
Version: 1.0
Summary: Assign a CSS style to portlet
Home-page: http://hexagonit.fi
Author: Hexagon IT
Author-email: oss@hexagonit.fi
License: BSD
Description: ===============================
        Assign a CSS style to a portlet
        ===============================
        
        `hexagonit.portletstyle` is a Plone 4.x add-on that allows you to assign a CSS
        style to a portlet. You can chose from a list of pre-defined (configurable
        through Plone Control Panel) classes.
        
        * `Source code @ GitHub <http://github.com/hexagonit/hexagonit.portletstyle>`_
        * `Releases @ PyPI <http://pypi.python.org/pypi/hexagonit.portletstyle>`_
        * `Sphinx docs @ ReadTheDocs <http://readthedocs.org/docs/hexagonitportletstyle>`_
        
        
        Installation
        ============
        
        To install ``hexagonit.portletstyle`` you simply add
        ``hexagonit.portletstyle`` to the list of eggs in your buildout, run
        buildout and restart Plone. Then, install `hexagonit.portletstyle` using the
        Add-ons control panel.
        
        
        Usage
        =====
        
        Click on ``Manage portlets`` and add or edit a portlet. Select your desired
        portlet style from the `Portlet Style` drop-down menu and save. That's it.
        
        
        Default portlet styles
        ======================
        
        By default, this package gives you three default portlet styles:
        
        * ``noheader``
        * ``nofooter``
        * ``noheader nofooter``
        
        
        Managing available portlet styles
        =================================
        
        You can add, edit and remove available portlet styles by going to the `Plone
        Control Panel` and clicking on the ``Portlet Styles`` configlet. Pointing your
        browser directly to ``http://<zope_ip>:<zope_port>/<plone_id>/@@portletstyles``
        also does the trick.
        
        
        Supported portlets
        ==================
        
        As of this moment, the following portlets are supported (as in, you can select
        a style when editing them):
        
        * `Events portlet`
        * `Navigation portlet`
        * `News portlet`
        * `Recently changed items portlet`
        * `RSS portlet`
        * `Collection portlet`
        * `Static text portlet`
        
        The rest of out-of-the-box Plone portlets are non-editable ones as you normally
        need only one instance per site. For these (and other) reasons the following
        portlets *do not support* choosing a style for them:
        
        * `Calendar portlet`
        * `Classic portlet`
        * `Language portlet`
        * `Login portlet`
        * `Review portlet`
        * `Search portlet`
        
        
        Styling third-party portlets
        ============================
        
        Follow the steps below to convince your third-party portlets to support
        selecting a style for them.
        
        Portlet Assignment
        ------------------
        
        You portlet's ``Assignment`` class must have an ``__init__()`` and inside this method
        it must call base assignment's ``__init__()``. To put it in other words,
        ``plone.app.portlets.portlets.base.Assignment`` (from which you portlet's 
        ``Assignment`` is likely inheriting from) has an ``__init__()`` method that sets
        the ``self.portlet_style`` value. You need to call this ``__init__()`` from your
        portlet's assignment's ``__init__()``.
        
        An example of how this can be achieved:
        
        ::
        
            from plone.app.portlets.portlets import base
            class Assignment(base.Assignment):
                implements(IMyCustomPortlet)
        
                def __init__(self, *args, **kwargs):
                    base.Assignment.__init__(self, *args, **kwargs)
                    self.foo = kwargs.get('foo', 5)
                    self.bar = kwargs.get('bar', "bar")
        
        Portlet AddForm
        ---------------
        
        Each portlet also has an ``AddForm`` class with a ``create`` method. This method
        must also pass the portlet style as a parameter. To make things simpler, just
        pass in the entire ``data``.
        
        ::
        
            class AddForm(base.AddForm):
                form_fields = form.Fields(IMyCustomPortlet)
        
                def create(self, data):
                    return Assignment(**data)
        
        Template
        --------
        
        Use the style in the template to assign an additional CSS class to your portlet:
        
        ::
        
            <dl class="portlet portletMyCustom"
                tal:attributes="class string:portlet portletMyCustom ${view/portlet_style}"
                i18n:domain="plone">
        
        TODO
        ====
        
        * use in the wild
        * better @@portletstyles control panel configlet UI: key (CSS class) - value
          (title) type records
        * maybe patch non-editable portlets (login, calendar, search, etc.)
        
        Credits
        =======
        
        * Idea, mentoring and sponsoring provided by Hexagon IT Oy.
        * Code monkeying by Nejc Zupan, NiteoWeb Ltd.
        
        Changelog
        =========
        
        1.0 (2011-11-20)
        ----------------
        
        - Slovenian translation.
          [zupo]
        
        - Added translation support for portlet_style field in patched
          IPortletDataProvider.
          [zupo]
        
        
        1.0a3 (2011-11-07)
        ------------------
        
        - Re-releasing, hoping this fixes problems with jarn.mkrelease.
          [zupo]
        
        
        1.0a2 (2011-10-27)
        ------------------
        
        - Added whitespace to `.rst` files in docs/ to fix reStucturedText indentation
          errors.
          [zupo]
        
        - Removed ``..code-block::`` elements from README.rst as they are
          Sphinx-specific block elements and are not valid reStucturedText.
          [zupo]
        
        
        1.0a1 (2011-10-27)
        ------------------
        
        - Initial release.
          [zupo]
        
        License
        =======
        
        Copyright (c) 2011, Hexagon IT Oy
        All rights reserved.
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
        
        * Redistributions of source code must retain the above copyright notice,
          this list of conditions and the following disclaimer.
        
        * Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.
        
        * Neither the name of Hexagon IT Oy nor the names of its contributors may
          be used to endorse or promote products derived from this software
          without specific prior written permission.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL HEXAGON IT OY BE LIABLE FOR ANY DIRECT,
        INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
        BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
        OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
        NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
        EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
Platform: UNKNOWN
Classifier: Framework :: Plone
Classifier: Programming Language :: Python
