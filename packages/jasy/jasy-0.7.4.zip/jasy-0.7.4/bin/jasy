#!/usr/bin/env python3

#
# Jasy - Web Tooling Framework
# Copyright 2010-2012 Zynga Inc.
#

# Import standard library stuff
import sys, os, os.path, pkg_resources, logging

# Version check
if sys.version_info[0] < 3:
    sys.stderr.write("Jasy requires Python 3!\n")
    sys.exit(1)

# Include local Jasy into Python library path
basedir = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), os.pardir))
if os.path.exists(os.path.join(basedir, "jasy")):
    sys.path.insert(0, basedir)

# Parse options
from jasy.core.Options import Options
from jasy.core.Logging import *

args = sys.argv[1:]
if args and "jasyscript.py" in args[0]:
    args = args.pop(0)
    
options = Options()

options.add("verbose", short="v", help="Print more detailed status messages to stdout")
options.add("quiet", short="q", help="Don't print status messages to stdout")
options.add("log", accept=str, help="Write debug messages to given logfile")
options.add("file", accept=str, value="jasyscript.py", help="Use the given jasy script")
options.add("version", short="V", help="Print version info only")
options.add("fast", short="f", help="Prevents repository updates")
options.add("stats", help="Show statistics after run")
options.add("help", short="h", help="Shows available options")

try:
    options.parse(args)
except Exception as optionError:
    logging.basicConfig(format="%(message)s")
    error(optionError)
    sys.exit(1)

# Configure log level for root logger first (enable debug level when either logfile or console verbosity is activated)
loglevel = logging.INFO
if options.log or options.verbose is True:
    loglevel = logging.DEBUG

# Basic configuration of console logging
logging.basicConfig(level=loglevel, format="%(message)s")

# Configure console handler to correct level
if options.verbose is True:
    logging.getLogger().handlers[0].setLevel(logging.DEBUG)
elif options.quiet is True:
    logging.getLogger().handlers[0].setLevel(logging.WARN)
else:
    logging.getLogger().handlers[0].setLevel(logging.INFO)

# Enable writing to logfile with debug level
if options.log:
    logfileHandler = logging.FileHandler(options.log)
    logfileHandler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s %(message)s'))
    logfileHandler.setLevel(logging.DEBUG)
    logging.getLogger().addHandler(logfileHandler)        

# Jasy Main
import jasy

# Print out some info
info("Jasy %s" % jasy.__version__)
debug("Jasy Path: %s" % os.path.dirname(os.path.abspath(jasy.__file__)))

if options.version:
    sys.exit(0)
    
del jasy

# Find Jasy Script
def findJasyscript():
    current = os.path.abspath(os.getcwd())
    while True:
        scriptfile = os.path.join(current, "jasyscript.py")
        if os.path.exists(scriptfile):
            return scriptfile

        old = current
        current = os.path.normpath(os.path.join(current, ".."))
        if current == old:
            break
            
jasyscript = options.file
if jasyscript == "jasyscript.py":
    jasyscript = findJasyscript()
else:
    jasyscript = os.path.abspath(os.path.expanduser(jasyscript))
    
if jasyscript is None or not os.path.isfile(jasyscript):
    error("Cannot find any Jasy script with task definitions (%s)!" % options.file)
    sys.exit(1)

header("Initializing...")

# Change to root directory of jasyscript before executing it
oldcwd = os.getcwd()
os.chdir(os.path.dirname(os.path.join(oldcwd, jasyscript)))
if os.getcwd() != oldcwd:
    info("Running from %s" % os.getcwd())
jasyscript = os.path.basename(jasyscript)

# Extend path
sys.path.insert(0, os.getcwd())

# Quick mode globally disables repository updates
if options.fast:
    from jasy.core.Repository import enableRepositoryUpdates
    enableRepositoryUpdates(False)

# Global environment
try:
    
    # Basics
    from jasy.core.Error import JasyError
    from jasy.core.Json import *
    from jasy.env.Task import *
    from jasy.env.State import *
    from jasy.env.File import *

    # User API
    from jasy.js.Resolver import Resolver
    from jasy.js.api.Writer import ApiWriter
    from jasy.asset.SpritePacker import SpritePacker

    # Environment Addons
    from jasy.env.JavaScript import *
    
except JasyError as errobj:
    error("%s" % errobj)
    sys.exit(1)

# Configuring jasy for remote calls
setJasyCommand(os.path.abspath(sys.argv[0]))

def main():
    
    try:
        # execute build script
        buildfile = open(jasyscript, "r")
        retval = exec(buildfile.read(), globals())

        # list all tasks when none is given
        tasks = options.getTasks()
        
        if not tasks or options.help:
            header("Help")
            info("Usage: jasy [options...] task1 [flags...] [task2 [flags...]]")
            options.showHelp()
            print("Tasks: ")
            printTasks()
            
            if options.help:
                sys.exit(0)
            else:
                sys.exit(1)

        # all arguments are processed as a list of task to execute in order
        for entry in tasks:
            executeTask(entry["task"], **entry["params"])
    
    except JasyError as errobj:
        error("%s" % errobj)
        sys.exit(1)

    except KeyboardInterrupt:
        error("Build interrupted!")
        sys.exit(2)

    sys.exit(0)

if options.stats:
    
    info("Running in profiling mode...")
    
    import cProfile
    cProfile.run("main()", "jasyprofile.txt")
    
    header("Analysing data...")
    import pstats
    stats = pstats.Stats("jasyprofile.txt")
    
    stats.sort_stats('time', 'cum').print_stats(30)
    
    os.remove("jasyprofile.txt")
    
else:
    
    main()
