// Generated by CoffeeScript 1.2.1-pre
(function() {
  var activate, active, add_class, deactivate, hover, reactive, rm_class, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  _ = function(x) {
    return document.querySelectorAll(x);
  };

  add_class = function(e, class_name) {
    var cn;
    if (!e) return;
    cn = e.getAttribute('class').split(' ');
    if (__indexOf.call(cn, class_name) < 0) cn.push(class_name);
    return e.setAttribute('class', cn.join(' '));
  };

  rm_class = function(e, class_name) {
    var cls, cn, i, _i, _len;
    if (!e) return;
    cn = e.getAttribute('class').split(' ');
    for (i = _i = 0, _len = cn.length; _i < _len; i = ++_i) {
      cls = cn[i];
      if (cls === class_name) cn.splice(i, 1);
    }
    return e.setAttribute('class', cn.join(' '));
  };

  activate = function() {
    var element, elements, _i, _len, _results;
    elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      element = elements[_i];
      _results.push(add_class(element, 'active'));
    }
    return _results;
  };

  deactivate = function() {
    var element, elements, _i, _len, _results;
    elements = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      element = elements[_i];
      _results.push(rm_class(element, 'active'));
    }
    return _results;
  };

  Function.prototype.bind = function(scope) {
    var _fun;
    _fun = this;
    return function() {
      return _fun.apply(scope, arguments);
    };
  };

  reactive = function(element) {
    return document.getElementById('re' + element.id);
  };

  active = function(element) {
    return document.getElementById(element.id.replace(/re/, ''));
  };

  hover = function(elts, over, out) {
    var elt, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = elts.length; _i < _len; _i++) {
      elt = elts[_i];
      elt.addEventListener('mouseover', over.bind(elt), false);
      _results.push(elt.addEventListener('mouseout', out.bind(elt), false));
    }
    return _results;
  };

  this.svg_load = function() {
    hover(_('.reactive-text'), (function() {
      return activate(this, active(this));
    }), (function() {
      return deactivate(this, active(this));
    }));
    hover(_('.reactive'), (function() {
      return activate(this, reactive(this));
    }), (function() {
      return deactivate(this, reactive(this));
    }));
    return hover(_('.activate-serie'), (function() {
      var element, num, _i, _len, _ref, _results;
      num = this.id.replace('activate-serie-', '');
      _ref = _('.serie-' + num + ' .reactive');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        _results.push(activate(element, reactive(element)));
      }
      return _results;
    }), (function() {
      var element, num, _i, _len, _ref, _results;
      num = this.id.replace('activate-serie-', '');
      _ref = _('.serie-' + num + ' .reactive');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        _results.push(deactivate(element, reactive(element)));
      }
      return _results;
    }));
  };

}).call(this);
