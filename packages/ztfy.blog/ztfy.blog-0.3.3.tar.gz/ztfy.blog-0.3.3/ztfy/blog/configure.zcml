<configure
	xmlns="http://namespaces.zope.org/zope"
	xmlns:i18n="http://namespaces.zope.org/i18n"
	i18n_domain="ztfy.blog">

	<i18n:registerTranslations directory="locales" />

	<!-- ZTFY ZBlog skin -->
	<interface
		name="ZBlog.FO"
		interface=".layer.IZTFYBlogFrontSkin"
		type="zope.publisher.interfaces.browser.IBrowserSkinType" />

	<interface
		name="ZBlog.BO"
		interface=".layer.IZTFYBlogBackSkin"
		type="zope.publisher.interfaces.browser.IBrowserSkinType" />

	<utility
		name="ZTFY blog skins"
		component=".vocabulary.SkinsVocabulary" />

	<!-- Permissions and roles -->
	<include file="security.zcml" />

	<!-- Base content management -->
	<subscriber
		handler=".database.handleOpenedDatabase" />

	<subscriber
		handler=".database.handleNewSiteManager" />

	<adapter
		factory=".oid.UniqueIDAdapter" />

	<adapter
		factory=".path.PathElementsAdapter" />

	<adapter
		factory=".content.BaseContentTextIndexer" />

	<!-- Sites management -->
	<interface
		interface=".interfaces.site.ISiteManager"
		type="zope.app.content.interfaces.IContentType" />

	<class class=".site.SiteManager">
		<implements
			interface="zope.annotation.interfaces.IAttributeAnnotatable" />
		<require
			attributes="getSiteManager"
			interface="zope.location.interfaces.ILocation
					   zope.container.interfaces.IReadContainer
					   .interfaces.blog.IBlogContainerInfo
					   .interfaces.section.ISectionContainerInfo
					   .interfaces.ISkinnable
					   .interfaces.IBaseContentRoles
					   .interfaces.site.ISiteManagerInfo"
			permission="zope.View" />
		<require
			set_schema=".interfaces.ISkinnable
						.interfaces.site.ISiteManagerInfo"
			interface="zope.container.interfaces.IWriteContainer
					   .interfaces.container.IOrderedContainerOrder
					   .interfaces.site.ISiteManagerWriter"
			permission="ztfy.ManageBlog" />
		<require
			set_schema=".interfaces.IBaseContentRoles"
			attributes="setSiteManager"
			permission="zope.ManageServices" />
	</class>

	<adapter
		factory=".site.SiteManagerTreeViewContentsAdapter"
		permission="zope.Public" />

	<!-- Sections management -->
	<interface
		interface=".interfaces.section.ISection"
		type="zope.app.content.interfaces.IContentType" />

	<class class=".section.Section">
		<implements
			interface="zope.annotation.interfaces.IAttributeAnnotatable" />
		<require
			interface="zope.location.interfaces.ILocation
					   zope.container.interfaces.IReadContainer
					   .interfaces.section.ISectionContainerInfo
					   .interfaces.topic.ITopicContainerInfo
					   .interfaces.ISkinnable
					   .interfaces.IBaseContentRoles
					   .interfaces.section.ISectionInfo"
			permission="zope.View" />
		<require
			set_schema=".interfaces.section.ISectionInfo"
			interface="zope.container.interfaces.IWriteContainer
					   .interfaces.container.IOrderedContainerOrder
					   .interfaces.section.ISectionWriter
					   .interfaces.topic.ITopicContainerWriter"
			permission="ztfy.ManageContent" />
		<require
			set_schema=".interfaces.ISkinnable
						.interfaces.IBaseContentRoles"
			permission="ztfy.ManageBlog" />
	</class>

	<adapter
		factory=".section.SectionTreeViewContentsAdapter"
		permission="zope.Public" />

	<!-- Blogs management -->
	<interface
		interface=".interfaces.blog.IBlogFolder"
		type="zope.app.content.interfaces.IContentType" />

	<class class=".blog.BlogFolder">
		<require
			interface="zope.app.container.interfaces.IReadContainer"
			permission="zope.View" />
		<require
			interface="zope.app.container.interfaces.IWriteContainer"
			permission="ztfy.ManageContent" />
	</class>

	<interface
		interface=".interfaces.blog.IBlog"
		type="zope.app.content.interfaces.IContentType" />

	<class class=".blog.Blog">
		<implements
			interface="zope.annotation.interfaces.IAttributeAnnotatable" />
		<require
			attributes="getSiteManager"
			interface="zope.container.interfaces.IReadContainer
					   zope.location.interfaces.ILocation
					   .interfaces.blog.IBlogInfo
					   .interfaces.ISkinnable
					   .interfaces.IBaseContentRoles
					   .interfaces.topic.ITopicContainerInfo"
			permission="zope.View" />
		<require
			set_schema=".interfaces.blog.IBlogInfo"
			interface="zope.container.interfaces.IWriteContainer
					   .interfaces.blog.IBlogWriter
					   .interfaces.topic.ITopicContainerWriter"
			permission="ztfy.ManageContent" />
		<require
			attributes="setSiteManager"
			permission="zope.ManageServices" />
		<require
			set_schema=".interfaces.ISkinnable
						.interfaces.IBaseContentRoles"
			permission="ztfy.ManageBlog" />
	</class>

	<utility
		name="ZTFY site blogs"
		component=".blog.BlogsVocabulary" />

	<!-- Topics management -->
	<interface
		interface=".interfaces.topic.ITopic"
		type="zope.app.content.interfaces.IContentType" />

	<utility
		name="SimpleWorkflow"
		component=".workflow.wf"
		provides="ztfy.workflow.interfaces.IWorkflow" />

	<class class=".topic.Topic">
		<implements
			interface="zope.annotation.interfaces.IAttributeAnnotatable" />
		<require
			interface="zope.container.interfaces.IReadContainer
					   ztfy.workflow.interfaces.IWorkflowTarget
					   .interfaces.topic.ITopicInfo
					   .interfaces.paragraph.IParagraphContainerInfo"
			permission="zope.View" />
		<require
			set_schema="ztfy.workflow.interfaces.IWorkflowTarget
						.interfaces.topic.ITopicInfo"
			interface="zope.container.interfaces.IWriteContainer
					   .interfaces.container.IOrderedContainerOrder
					   .interfaces.topic.ITopicWriter"
			permission="ztfy.ManageContent" />
	</class>

	<subscriber
		handler=".topic.handleNewTopic" />

	<!-- Categories management -->
	<adapter
		factory=".category.CategoryManagerAdapter"
		locate="True"
		trusted="True" />

	<class class=".category.CategoryManagerAdapter">
		<require
			interface="zope.container.interfaces.IReadContainer"
			permission="zope.View" />
		<require
			interface="zope.container.interfaces.IWriteContainer"
			permission="ztfy.ManageBlog" />
	</class>

	<class class=".category.Category">
		<factory
			id="ztfy.blog.category.Category"
			title="Topics category"
			description="Categories are used to organize topics" />
		<implements
			interface="zope.annotation.interfaces.IAttributeAnnotatable" />
		<require
			interface="zope.container.interfaces.IReadContainer
					   .interfaces.category.ICategoryInfo"
			permission="zope.View" />
		<require
			set_schema=".interfaces.category.ICategoryInfo"
			interface="zope.container.interfaces.IWriteContainer
					   .interfaces.category.ICategoryWriter"
			permission="ztfy.ManageBlog" />
	</class>

	<adapter
		factory=".category.CategorizedContentAdapter"
		locate="True"
		trusted="True" />

	<class class=".category.CategorizedContentAdapter">
		<require
			interface=".interfaces.category.ICategorizedContent"
			permission="zope.View" />
		<require
			set_schema=".interfaces.category.ICategorizedContent"
			permission="ztfy.ManageContent" />
	</class>

	<class class=".category.CategoriesList">
		<require
			interface=".interfaces.category.ICategorizedContent"
			permission="zope.View" />
		<require
			set_schema=".interfaces.category.ICategorizedContent"
			permission="ztfy.ManageContent" />
	</class>

	<!-- Static resources management -->
	<adapter
		factory=".resource.ResourceContainerAdapter"
		locate="True"
		trusted="True" />

	<class class=".resource.ResourceContainerAdapter">
		<require
			interface="zope.container.interfaces.IReadContainer"
			permission="zope.View" />
		<require
			interface="zope.container.interfaces.IWriteContainer
					   .interfaces.container.IOrderedContainerOrder"
			permission="ztfy.ManageContent" />
	</class>

	<class class=".resource.ResourceContainer">
		<require
			like_class=".resource.ResourceContainerAdapter" />
	</class>

	<class class=".resource.Resource">
		<implements
			interface="zope.annotation.interfaces.IAttributeAnnotatable" />
		<require
			interface=".interfaces.resource.IResourceInfo"
			permission="zope.View" />
		<require
			set_schema=".interfaces.resource.IResourceInfo"
			permission="ztfy.ManageContent" />
	</class>

	<utility
		name="ZTFY content resources"
		component=".resource.ResourceContainerResourcesVocabulary" />

	<!-- Links management -->
	<adapter
		factory=".link.LinkContainerAdapter"
		locate="True"
		trusted="True" />

	<class class=".link.LinkContainerAdapter">
		<require
			interface="zope.container.interfaces.IReadContainer"
			attributes="getVisibleLinks"
			permission="zope.View" />
		<require
			interface="zope.container.interfaces.IWriteContainer
					   .interfaces.container.IOrderedContainerOrder"
			permission="ztfy.ManageContent" />
	</class>

	<class class=".link.LinkContainer">
		<require
			like_class=".link.LinkContainerAdapter" />
	</class>

	<class class=".link.InternalLink">
		<implements
			interface="zope.annotation.interfaces.IAttributeAnnotatable" />
		<require
			interface=".interfaces.link.IInternalLinkInfo
					   .interfaces.link.ILinkChecker"
			permission="zope.View" />
		<require
			set_schema=".interfaces.link.IInternalLinkInfo"
			permission="ztfy.ManageContent" />
	</class>

	<class class=".link.ExternalLink">
		<implements
			interface="zope.annotation.interfaces.IAttributeAnnotatable" />
		<require
			interface=".interfaces.link.IExternalLinkInfo
					   .interfaces.link.ILinkChecker"
			permission="zope.View" />
		<require
			set_schema=".interfaces.link.IExternalLinkInfo"
			permission="ztfy.ManageContent" />
	</class>

	<!-- Google extensions management -->
	<adapter
		factory=".google.GoogleAnalyticsAdapter"
		locate="True"
		trusted="True" />

	<class class=".google.GoogleAnalyticsAdapter">
		<require
			interface=".interfaces.google.IGoogleAnalytics"
			permission="zope.View" />
		<require
			set_schema=".interfaces.google.IGoogleAnalytics"
			permission="ztfy.ManageBlog" />
	</class>

	<class class=".google.GoogleAnalytics">
		<require
			like_class=".google.GoogleAnalyticsAdapter" />
	</class>

	<adapter
		factory=".google.GoogleAdSenseAdapter"
		locate="True"
		trusted="True" />

	<class class=".google.GoogleAdSenseAdapter">
		<require
			interface=".interfaces.google.IGoogleAdSense"
			permission="zope.View" />
		<require
			set_schema=".interfaces.google.IGoogleAdSense"
			permission="ztfy.ManageBlog" />
	</class>

	<class class=".google.GoogleAdSense">
		<require
			like_class=".google.GoogleAdSenseAdapter" />
	</class>

	<!-- paragraphs sub-package include -->
	<include package=".browser" />
	<include package=".tal" />

	<include package=".paragraphs" />
	<include package=".defaultskin" />

</configure>