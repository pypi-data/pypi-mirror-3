#!/usr/bin/env python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Update user tool for dnsmanagement"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.17'


import sys

from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib
from roster_user_tools.action_flags import Update
from roster_user_tools.data_flags import Group

class Args(Update, Group):
  pass


def main(args):
  """Collects command line arguments, adds users/groups/assignments

  Inputs:
    args: list of arguments from the command line
  """
  command = None
  if( args and not args[0].startswith('-') ):
    command = args.pop(0)
  usage = ('\n'
           '\n'
           'To update a forward zone permission:\n'
           '\t%s forward -z <zone-name> -g <group>\n'
           '\t--group-permission <group-permission>\n'
           '\n'
           'To update a reverse range permission:\n'
           '\t%s reverse -b <cidr-block> -g <group>\n'
           '\t--group-permission <group-permission>\n' % tuple(
                   [sys.argv[0] for _ in range(2)]))
  args_instance = Args(command,
      ['update', 'edit', 'group', 'assignment', 'forward', 'reverse'], 
      args, usage)
  options = args_instance.options
  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, error:
    print 'ERROR: %s' % error
    sys.exit(1)
  
  #checking that the inputted zone name exists
  if( options.zone_name ):
    zones = roster_client_lib.RunFunction(u'ListZones', options.username,
                                          credfile=options.credfile,
                                          credstring=options.credstring,
                                          server_name=options.server)[
                                              'core_return']
    if( options.zone_name not in zones ):
      cli_common_lib.DnsError('Zone %s does not exist.' % options.zone_name, 1)
  
  #checking that the inputted group exists
  if( options.group ):
    groups = roster_client_lib.RunFunction(
        u'ListGroups', options.username, credfile=options.credfile,
        credstring=options.credstring, server_name=options.server)[
            'core_return']
    if( options.group not in groups ):
      cli_common_lib.DnsError('Group %s does not exist.' % options.group, 1)
  else:
      cli_common_lib.DnsError('Must specify a group.', 1)

  if( options.group_permission ):
    group_permissions = roster_client_lib.RunFunction(
        u'ListGroupPermissions', options.username, credfile=options.credfile,
        credstring=options.credstring, server_name=options.server)[
            'core_return']

    for record_type in options.group_permission.split(','):
      if( record_type not in group_permissions ):
        cli_common_lib.DnsError(
            'Permission %s does not exist.' % record_type, 1)
  else:
      cli_common_lib.DnsError('Must specify group_permission.', 1)

  #updating reverse permissions
  if( command == 'reverse' ):
    group_permission_list = options.group_permission.split(',')
    roster_client_lib.RunFunction(u'UpdateGroupReversePermission',
                                  options.username,
                                  credfile=options.credfile,
                                  credstring=options.credstring,
                                  server_name=options.server,
                                  args=[options.cidr_block,
                                        options.group,
                                        group_permission_list])
  #updating forward permissions
  elif( command == 'forward' ):
    group_permission_list = options.group_permission.split(',')
    roster_client_lib.RunFunction(u'UpdateGroupForwardPermission',
                                  options.username,
                                  credfile=options.credfile,
                                  credstring=options.credstring,
                                  server_name=options.server,
                                  args=[options.zone_name,
                                        options.group,
                                        group_permission_list])

  else:
    cli_common_lib.DnsError(
        'Command %s exists, but codepath doesn\'t.' % command, 1)

if __name__ == "__main__":
  main(sys.argv[1:])
