#!/usr/bin/env python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Credential tool for dnsmanagement"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.16'


import sys

from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib
from roster_user_tools.data_flags import Credential


class Args(Credential):
  pass


def main(args):
  """Collects command line arguments, adds inf credentials
  lists/removes credentials

  Inputs:
    args: list of arguments from the command line
  """
  command = None
  if( args and not args[0].startswith('-') ):
    command = args.pop(0)
  usage = ('\n'
           '\n'
           'To make an infinite credential:\n'
           '\t%s make_infinite -U <user-name>\n'
           '\n'
           'To remove a credential:\n'
           '\t%s remove -U <user-name>\n'
           '\n'
           'To list credentials:\n'
           '\t%s list [-U <user-name>]\n' % tuple(
             [sys.argv[0] for _ in range(3)]))
  args_instance = Args(command,
      ['list', 'make_infinite', 'remove'], args, usage)
  options = args_instance.options

  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, e:
    print 'ERROR: %s' % e
    sys.exit(1)

  if( command == 'list' ):
    credentials = roster_client_lib.RunFunction(
        u'ListCredentials', options.username, credfile=options.credfile,
        credstring=options.credstring, server_name=options.server,
        args=[options.user_credential])['core_return']
    print_list = [['user_name', 'credential_string', 'infinite_cred']]
    for user in credentials:
      print_list.append([user, credentials[user]['credential'],
                         credentials[user]['infinite_cred']])
    print cli_common_lib.PrintColumns(
        print_list, not options.no_header)

  elif( command == 'remove' ):
    roster_client_lib.RunFunction(
        u'RemoveCredential', options.username, credfile=options.credfile,
        credstring=options.credstring, server_name=options.server,
        kwargs={u'user_name': options.user_credential})

  elif( command == 'make_infinite' ):
    roster_client_lib.RunFunction(
        u'MakeInfiniteCredential', options.username, credfile=options.credfile,
        credstring=options.credstring, server_name=options.server,
        args=[options.user_credential])

  else:
    cli_common_lib.DnsError(
        'Command %s exists, but codepath does not.', 1)

if __name__ == "__main__":
  main(sys.argv[1:])
