(dp0
S'TComputeDomainContingency_ImputeWithClassifier'
p1
(i__main__
ClassDefinition
p2
(dp3
S'extended'
p4
I1
sS'imported'
p5
I01
sS'name'
p6
g1
sS'parent'
p7
S'TComputeDomainContingency'
p8
sS'abstract'
p9
I00
sS'components'
p10
(lp11
sS'properties'
p12
(lp13
(S'TLearner'
p14
S'learnerForDiscrete'
p15
S'learner_for_discrete'
p16
S'constructs a classifier for imputation of discrete values'
p17
I0
I0
I00
Ntp18
a(S'TLearner'
p19
S'learnerForContinuous'
p20
S'learner_for_continuous'
p21
S'constructs a classifier for imputation of continuous values'
p22
I0
I0
I00
Ntp23
a(S'bool'
p24
S'classIsOuter'
p25
S'class_is_outer'
p26
S'tells whether the class is the outer variable in contingencies'
p27
I0
I0
I01
Ntp28
asS'constants'
p29
(dp30
sbsS'TRuleDataStoppingCriteria_NoPositives'
p31
(i__main__
ClassDefinition
p32
(dp33
g4
I1
sg5
I01
sg6
g31
sg7
S'TRuleDataStoppingCriteria'
p34
sg9
I00
sg10
(lp35
sg12
(lp36
sg29
(dp37
sbsS'TExampleCluster'
p38
(i__main__
ClassDefinition
p39
(dp40
g4
I1
sg5
I01
sg6
g38
sg7
S'TOrange'
p41
sg9
I00
sg10
(lp42
sg12
(lp43
(S'TExampleCluster'
p44
S'left'
p45
g45
S"'left' cluster"
p46
I0
I0
I00
Ntp47
a(S'TExampleCluster'
p48
S'right'
p49
g49
S"'right' cluster"
p50
I0
I0
I00
Ntp51
a(S'float'
p52
S'distance'
p53
g53
S'distance between the two clusters (not defined for leaves)'
p54
I0
I0
I01
Ntp55
a(S'TExample'
p56
S'centroid'
p57
g57
S"cluster's centroid (always defined for leaves)"
p58
I0
I0
I00
Ntp59
asg29
(dp60
sbsS'TClassifierByLookupTableN'
p61
(i__main__
ClassDefinition
p62
(dp63
g4
I1
sg5
I01
sg6
g61
sg7
S'TClassifierByLookupTable'
p64
sg9
I00
sg10
(lp65
sg12
(lp66
(S'TVarList'
p67
S'variables'
p68
g68
S'attributes'
p69
I01
I0
I00
Ntp70
a(S'TIntList'
p71
S'noOfValues'
p72
S'no_of_values'
p73
S'number of values for each attribute'
p74
I01
I0
I00
Ntp75
a(S'TEFMDataDescription'
p76
S'dataDescription'
p77
S'data_description'
p78
S'data description'
p79
I0
I0
I00
Ntp80
a(S'TValueList'
p81
S'lookupTable'
p82
S'lookup_table'
p83
S'a list of class values, one for each attribute value'
p84
I01
I0
I00
Ntp85
a(S'TDistributionList'
p86
S'distributions'
p87
g87
S'a list of class distributions, one for each attribute value'
p88
I01
I0
I00
Ntp89
a(S'TVariable'
p90
S'classVar'
p91
S'class_var'
p92
S'class variable'
p93
I0
I0
I00
Ntp94
a(S'bool'
p95
S'computesProbabilities'
p96
S'computes_probabilities'
p97
S'set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)'
p98
I0
I0
I01
Ntp99
asg29
(dp100
sbsS'TLearner_Python'
p101
(i__main__
ClassDefinition
p102
(dp103
g4
I1
sg5
I01
sg6
g101
sg7
S'TLearner'
p104
sg9
I00
sg10
(lp105
sg12
(lp106
(S'int'
p107
S'needs'
p108
g108
S'the kind of data that learner needs'
p109
I01
I0
I01
Ntp110
asg29
(dp111
sbsS'TConditionalProbabilityEstimator_FromDistribution'
p112
(i__main__
ClassDefinition
p113
(dp114
g4
I1
sg5
I01
sg6
g112
sg7
S'TConditionalProbabilityEstimator'
p115
sg9
I00
sg10
(lp116
sg12
(lp117
(S'TContingency'
p118
S'probabilities'
p119
g119
S'Contingency that stores conditional probabilities'
p120
I0
I0
I00
Ntp121
a(S'bool'
p122
S'supportsDiscrete'
p123
S'supports_discrete'
p124
S'can estimate probabilities of discrete attributes'
p125
I01
I0
I01
Ntp126
a(S'bool'
p127
S'supportsContinuous'
p128
S'supports_continuous'
p129
S'can estimate probabilities of continuous attributes'
p130
I01
I0
I01
Ntp131
asg29
(dp132
sbsS'THeatmapList'
p133
(ipyprops
ClassDefinition
p134
(dp135
g4
I0
sg5
I01
sg6
g133
sg7
S'TOrange'
p136
sg9
I0
sg10
(lp137
sg12
(lp138
sg29
(dp139
sbsS'TFeatureInducer'
p140
(i__main__
ClassDefinition
p141
(dp142
g4
I1
sg5
I01
sg6
g140
sg7
S'TOrange'
p143
sg9
I01
sg10
(lp144
sg12
(lp145
sg29
(dp146
sbsS'TImputerConstruct_Python'
p147
(i__main__
ClassDefinition
p148
(dp149
g4
I1
sg5
I01
sg6
g147
sg7
S'TImputerConstructor'
p150
sg9
I00
sg10
(lp151
sg12
(lp152
(S'bool'
p153
S'imputeClass'
p154
S'impute_class'
p155
S'tells whether to impute the class value (default: true)'
p156
I0
I0
I01
Ntp157
asg29
(dp158
sbsS'TExampleGeneratorList'
p159
(ipyprops
ClassDefinition
p160
(dp161
g4
I0
sg5
I01
sg6
g159
sg7
g136
sg9
I0
sg10
(lp162
sg12
(lp163
sg29
(dp164
sbsS'TIMByRowsConstructor'
p165
(i__main__
ClassDefinition
p166
(dp167
g4
I1
sg5
I01
sg6
g165
sg7
S'TOrange'
p168
sg9
I01
sg10
(lp169
sg12
(lp170
sg29
(dp171
sbsS'TSubsetsGenerator_withRestrictions'
p172
(i__main__
ClassDefinition
p173
(dp174
g4
I1
sg5
I01
sg6
g172
sg7
S'TSubsetsGenerator'
p175
sg9
I00
sg10
(lp176
sg12
(lp177
(S'TSubsetsGenerator'
p178
S'subGenerator'
p179
S'sub_generator'
p180
S'subset generator'
p181
I0
I0
I00
Ntp182
a(S'TVarList'
p183
S'required'
p184
g184
S'set of required attributes'
p185
I0
I0
I00
Ntp186
a(S'TVarList'
p187
S'forbidden'
p188
g188
S'set of forbidden attributes'
p189
I0
I0
I00
Ntp190
a(S'TVarListList'
p191
S'forbiddenSubSubsets'
p192
S'forbidden_sub_subsets'
p193
S'set of forbidden subsets (attributes that must not occur together)'
p194
I0
I0
I00
Ntp195
a(S'TVarList'
p196
S'varList'
p197
S'var_list'
p198
S'a set of attributes from which subsets are generated'
p199
I0
I0
I00
Ntp200
asg29
(dp201
sbsS'TEVDistList'
p202
(ipyprops
ClassDefinition
p203
(dp204
g4
I0
sg5
I01
sg6
g202
sg7
g136
sg9
I0
sg10
(lp205
sg12
(lp206
sg29
(dp207
sbsS'TValueFilterList'
p208
(ipyprops
ClassDefinition
p209
(dp210
g4
I0
sg5
I01
sg6
g208
sg7
g136
sg9
I0
sg10
(lp211
sg12
(lp212
sg29
(dp213
sbsS'TRuleBeamFilter_Python'
p214
(i__main__
ClassDefinition
p215
(dp216
g4
I1
sg5
I01
sg6
g214
sg7
S'TRuleBeamFilter'
p217
sg9
I00
sg10
(lp218
sg12
(lp219
sg29
(dp220
sbsS'TTreeExampleSplitter'
p221
(i__main__
ClassDefinition
p222
(dp223
g4
I1
sg5
I01
sg6
g221
sg7
S'TOrange'
p224
sg9
I01
sg10
(lp225
sg12
(lp226
sg29
(dp227
sbsS'TSVMClassifier'
p228
(i__main__
ClassDefinition
p229
(dp230
g4
I1
sg5
I01
sg6
g228
sg7
S'TClassifierFD'
p231
sg9
I00
sg10
(lp232
sg12
(lp233
(S'TIntList'
p234
S'nSV'
p235
S'n_SV'
p236
S'nSV'
p237
I0
I0
I00
Ntp238
a(S'TFloatList'
p239
S'rho'
p240
g240
S'rho'
p241
I0
I0
I00
Ntp242
a(S'TFloatListList'
p243
S'coef'
p244
g244
S'coef'
p245
I0
I0
I00
Ntp246
a(S'TFloatList'
p247
S'probA'
p248
S'prob_a'
p249
S'probA - pairwise probability information'
p250
I0
I0
I00
Ntp251
a(S'TFloatList'
p252
S'probB'
p253
S'prob_b'
p254
S'probB - pairwise probability information'
p255
I0
I0
I00
Ntp256
a(S'TExampleTable'
p257
S'supportVectors'
p258
S'support_vectors'
p259
S'support vectors'
p260
I0
I0
I00
Ntp261
a(S'TExampleTable'
p262
S'examples'
p263
g263
S'examples used to train the classifier'
p264
I0
I0
I00
Ntp265
a(S'TKernelFunc'
p266
S'kernelFunc'
p267
S'kernel_func'
p268
S'custom kernel function'
p269
I0
I0
I00
Ntp270
a(S'int'
p271
S'svm_type'
p272
g272
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p273
I0
I0
I01
S'SVMLearner_SVMType'
p274
tp275
a(S'int'
p276
S'kernel_type'
p277
g277
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p278
I0
I0
I01
S'SVMLearner_Kernel'
p279
tp280
a(S'TDomain'
p281
S'domain'
p282
g282
S'domain'
p283
I0
I0
I00
Ntp284
ag94
ag99
asg29
(dp285
sbsS'TFilteredGenerator'
p286
(i__main__
ClassDefinition
p287
(dp288
g4
I1
sg5
I01
sg6
g286
sg7
S'TAdapterGenerator'
p289
sg9
I00
sg10
(lp290
sg12
(lp291
(S'TFilter'
p292
S'filter'
p293
g293
S'decides which examples are skipped'
p294
I0
I0
I00
Ntp295
a(S'TDomain'
p296
S'domain'
p297
g297
S'domain'
p298
I0
I0
I00
Ntp299
a(S'int'
p300
S'version'
p301
g301
S'unique version identifier'
p302
I01
I0
I01
Ntp303
asg29
(dp304
sbsS'TPythonVariable'
p305
(i__main__
ClassDefinition
p306
(dp307
g4
I1
sg5
I01
sg6
g305
sg7
S'TVariable'
p308
sg9
I00
sg10
(lp309
sg12
(lp310
(S'bool'
p311
S'usePickle'
p312
S'use_pickle'
p313
S'tells whether to use pickle for saving to/loading from files'
p314
I0
I0
I01
Ntp315
a(S'bool'
p316
S'useSomeValue'
p317
S'use_some_value'
p318
S'tells whether the Variable will operate on Value or SomeValue (default)'
p319
I0
I0
I01
Ntp320
a(S'int'
p321
S'varType'
p322
S'var_type'
p323
S' variable type'
p324
I0
I0
I01
S'Variable_Type'
p325
tp326
a(S'bool'
p327
S'ordered'
p328
g328
S'variable values are ordered'
p329
I0
I0
I01
Ntp330
a(S'bool'
p331
S'distributed'
p332
g332
S'variable values are distributions'
p333
I0
I0
I01
Ntp334
a(S'int'
p335
S'defaultMetaId'
p336
S'default_meta_id'
p337
S'default (proposed, suggested...) meta id for this variable'
p338
I0
I0
I01
Ntp339
a(S'TRandomGenerator'
p340
S'randomGenerator'
p341
S'random_generator'
p342
S'random generator for random values (initialized when first needed)'
p343
I0
I0
I00
Ntp344
a(S'TVariable'
p345
S'sourceVariable'
p346
S'source_variable'
p347
S'The attribute that this attribute is computed from (when applicable)'
p348
I0
I0
I00
Ntp349
a(S'TClassifier'
p350
S'getValueFrom'
p351
S'get_value_from'
p352
S'Function to compute the value from values of other variables'
p353
I0
I0
I00
Ntp354
asg29
(dp355
sbsS'TTreeLearner'
p356
(i__main__
ClassDefinition
p357
(dp358
g4
I1
sg5
I01
sg6
g356
sg7
S'TLearner'
p359
sg9
I00
sg10
(lp360
sg12
(lp361
(S'TTreeSplitConstructor'
p362
S'split'
p363
g363
S'split criterion'
p364
I0
I0
I00
Ntp365
a(S'TTreeStopCriteria'
p366
S'stop'
p367
g367
S'stop criterion'
p368
I0
I0
I00
Ntp369
a(S'TComputeDomainContingency'
p370
S'contingencyComputer'
p371
S'contingency_computer'
p372
S'computes contingency matrix'
p373
I0
I0
I00
Ntp374
a(S'TLearner'
p375
S'nodeLearner'
p376
S'node_learner'
p377
S'node learner'
p378
I0
I0
I00
Ntp379
a(S'TTreeExampleSplitter'
p380
S'exampleSplitter'
p381
S'example_splitter'
p382
S'splits examples to branches'
p383
I0
I0
I00
Ntp384
a(S'int'
p385
S'maxDepth'
p386
S'max_depth'
p387
S'maximal tree depth (0 = root only, -1 = no limit)'
p388
I0
I0
I01
Ntp389
a(S'bool'
p390
S'storeExamples'
p391
S'store_examples'
p392
S'if true (default: false), learning examples in nodes are stored'
p393
I0
I0
I01
Ntp394
a(S'bool'
p395
S'storeDistributions'
p396
S'store_distributions'
p397
S'if true (default), class distributions of learning examples in nodes are stored'
p398
I0
I0
I01
Ntp399
a(S'bool'
p400
S'storeContingencies'
p401
S'store_contingencies'
p402
S'if true (default), contingency matrices for examples are stored'
p403
I0
I0
I01
Ntp404
a(S'bool'
p405
S'storeNodeClassifier'
p406
S'store_node_classifier'
p407
S'if true (default), the internal nodes have classifiers; needed for pruning'
p408
I0
I0
I01
Ntp409
a(S'TTreeDescender'
p410
S'descender'
p411
g411
S'descends down the tree'
p412
I0
I0
I00
Ntp413
ag110
asg29
(dp414
sbsS'TPreprocessor_shuffle'
p415
(i__main__
ClassDefinition
p416
(dp417
g4
I1
sg5
I01
sg6
g415
sg7
S'TPreprocessor'
p418
sg9
I00
sg10
(lp419
sg12
(lp420
(S'TVarList'
p421
S'attributes'
p422
g422
S'tells which attributes to shuffle'
p423
I0
I0
I00
Ntp424
a(S'TRandomGenerator'
p425
S'randomGenerator'
p426
S'random_generator'
p427
S'random number generator'
p428
I0
I0
I00
Ntp429
asg29
(dp430
sbsS'TLearner'
p431
(i__main__
ClassDefinition
p432
(dp433
g4
I1
sg5
I01
sg6
g431
sg7
S'TOrange'
p434
sg9
I00
sg10
(lp435
sg12
(lp436
g110
asg29
(dp437
sbsS'TExamplesDistance_Maximal'
p438
(i__main__
ClassDefinition
p439
(dp440
g4
I1
sg5
I01
sg6
g438
sg7
S'TExamplesDistance_Normalized'
p441
sg9
I00
sg10
(lp442
sg12
(lp443
(S'TAttributedFloatList'
p444
S'normalizers'
p445
g445
S'normalizing factors for attributes'
p446
I0
I0
I00
Ntp447
a(S'TAttributedFloatList'
p448
S'bases'
p449
g449
S'lowest values for attributes'
p450
I0
I0
I00
Ntp451
a(S'TAttributedFloatList'
p452
S'averages'
p453
g453
S'average values for continuous attribute values'
p454
I0
I0
I00
Ntp455
a(S'TAttributedFloatList'
p456
S'variances'
p457
g457
S'variations for continuous attribute values'
p458
I0
I0
I00
Ntp459
a(S'int'
p460
S'domainVersion'
p461
S'domain_version'
p462
S'version of domain on which the ranges were computed'
p463
I0
I0
I01
Ntp464
a(S'bool'
p465
S'normalize'
p466
g466
S'tells whether to normalize distances between attributes'
p467
I0
I0
I01
Ntp468
a(S'bool'
p469
S'ignoreUnknowns'
p470
S'ignore_unknowns'
p471
S'if true (default: false) unknown values are ignored in computation'
p472
I0
I0
I01
Ntp473
asg29
(dp474
sbsS'TSubsetsGenerator_withRestrictions_iterator'
p475
(i__main__
ClassDefinition
p476
(dp477
g4
I1
sg5
I01
sg6
g475
sg7
S'TSubsetsGenerator_iterator'
p478
sg9
I00
sg10
(lp479
sg12
(lp480
(S'TSubsetsGenerator_iterator'
p481
S'subGenerator_iterator'
p482
S'sub_generator_iterator'
p483
S'subset generator'
p484
I0
I0
I00
Ntp485
a(S'TVarList'
p486
S'required'
p487
g487
S'set of required attributes'
p488
I0
I0
I00
Ntp489
a(S'TVarList'
p490
S'forbidden'
p491
g491
S'set of forbidden attributes'
p492
I0
I0
I00
Ntp493
a(S'TVarListList'
p494
S'forbiddenSubSubsets'
p495
S'forbidden_sub_subsets'
p496
S'set of forbidden subsets (attributes that must not occur together)'
p497
I0
I0
I00
Ntp498
a(S'TVarList'
p499
S'varList'
p500
S'var_list'
p501
S'a set of attributes from which subsets are generated'
p502
I0
I0
I00
Ntp503
asg29
(dp504
sbsS'TPreprocessor_discretize'
p505
(i__main__
ClassDefinition
p506
(dp507
g4
I1
sg5
I01
sg6
g505
sg7
S'TPreprocessor'
p508
sg9
I00
sg10
(lp509
sg12
(lp510
(S'TVarList'
p511
S'attributes'
p512
g512
S'attributes to be discretized (all, if not defined or empty)'
p513
I0
I0
I00
Ntp514
a(S'bool'
p515
S'discretizeClass'
p516
S'discretize_class'
p517
S'also discretize the class attribute (default: false)'
p518
I0
I0
I01
Ntp519
a(S'TDiscretization'
p520
S'method'
p521
g521
S'discretization method'
p522
I0
I0
I00
Ntp523
asg29
(dp524
sbsS'TRuleClassifier_logit'
p525
(i__main__
ClassDefinition
p526
(dp527
g4
I1
sg5
I01
sg6
g525
sg7
S'TRuleClassifier'
p528
sg9
I00
sg10
(lp529
sg12
(lp530
(S'TDistribution'
p531
S'prior'
p532
g532
S'prior distribution'
p533
I0
I0
I00
Ntp534
a(S'TDomain'
p535
S'domain'
p536
g536
S'Domain'
p537
I0
I0
I00
Ntp538
a(S'TFloatList'
p539
S'ruleBetas'
p540
S'rule_betas'
p541
S'Rule betas'
p542
I0
I0
I00
Ntp543
a(S'float'
p544
S'minStep'
p545
S'min_step'
p546
S'minimal step value'
p547
I0
I0
I01
Ntp548
a(S'float'
p549
S'minSignificance'
p550
S'min_significance'
p551
S'minimum requested significance for betas. '
p552
I0
I0
I01
Ntp553
a(S'float'
p554
S'minBeta'
p555
S'min_beta'
p556
S'minimum beta by rule to be included in the model. '
p557
I0
I0
I01
Ntp558
a(S'TClassifier'
p559
S'priorClassifier'
p560
S'prior_classifier'
p561
S'prior classifier used if provided'
p562
I0
I0
I00
Ntp563
a(S'TRuleList'
p564
S'prefixRules'
p565
S'prefix_rules'
p566
S'rules that trigger before logit sum.'
p567
I0
I0
I00
Ntp568
a(S'TRuleList'
p569
S'rules'
p570
g570
S''
p571
I0
I0
I00
Ntp572
a(S'TExampleTable'
p573
S'examples'
p574
g574
g571
I0
I0
I00
Ntp575
a(S'int'
p576
S'weightID'
p577
S'weight_ID'
p578
g571
I0
I0
I01
Ntp579
ag94
ag99
asg29
(dp580
sbsS'TProgressCallback_Python'
p581
(i__main__
ClassDefinition
p582
(dp583
g4
I1
sg5
I01
sg6
g581
sg7
S'TProgressCallback'
p584
sg9
I00
sg10
(lp585
sg12
(lp586
sg29
(dp587
sbsS'TImputeClassifier'
p588
(i__main__
ClassDefinition
p589
(dp590
g4
I1
sg5
I01
sg6
g588
sg7
S'TClassifier'
p591
sg9
I00
sg10
(lp592
sg12
(lp593
(S'TClassifierFromVar'
p594
S'classifierFromVar'
p595
S'classifier_from_var'
p596
S'ClassifierFromVar that is used to retrieve defined values'
p597
I0
I0
I00
Ntp598
a(S'TClassifier'
p599
S'imputer'
p600
g600
S'classifier that is used to determine the missing values '
p601
I0
I0
I00
Ntp602
ag94
ag99
asg29
(dp603
sbsS'TStopDistributionClustering'
p604
(i__main__
ClassDefinition
p605
(dp606
g4
I1
sg5
I01
sg6
g604
sg7
S'TOrange'
p607
sg9
I01
sg10
(lp608
sg12
(lp609
sg29
(dp610
sbsS'TFilterList'
p611
(ipyprops
ClassDefinition
p612
(dp613
g4
I0
sg5
I01
sg6
g611
sg7
g136
sg9
I0
sg10
(lp614
sg12
(lp615
sg29
(dp616
sbsS'TPythonValue'
p617
(i__main__
ClassDefinition
p618
(dp619
g4
I1
sg5
I01
sg6
g617
sg7
S'TSomeValue'
p620
sg9
I00
sg10
(lp621
sg12
(lp622
sg29
(dp623
sbsS'TAssociationRulesSparseInducer'
p624
(i__main__
ClassDefinition
p625
(dp626
g4
I1
sg5
I01
sg6
g624
sg7
S'TOrange'
p627
sg9
I00
sg10
(lp628
sg12
(lp629
(S'int'
p630
S'maxItemSets'
p631
S'max_item_sets'
p632
S'maximal number of itemsets (increase if you want)'
p633
I0
I0
I01
Ntp634
a(S'float'
p635
S'confidence'
p636
g636
S'required confidence'
p637
I0
I0
I01
Ntp638
a(S'float'
p639
S'support'
p640
g640
S'required support'
p641
I0
I0
I01
Ntp642
a(S'bool'
p643
S'storeExamples'
p644
S'store_examples'
p645
S'stores examples corresponding to rules'
p646
I0
I0
I01
Ntp647
asg29
(dp648
sbsS'TFilter_sameExample'
p649
(i__main__
ClassDefinition
p650
(dp651
g4
I1
sg5
I01
sg6
g649
sg7
S'TFilter'
p652
sg9
I00
sg10
(lp653
sg12
(lp654
(S'TExample'
p655
S'example'
p656
g656
S'example with which examples are compared'
p657
I0
I0
I00
Ntp658
a(S'bool'
p659
S'negate'
p660
g660
S'if true, filter output should be negated.'
p661
I0
I0
I01
Ntp662
a(S'TDomain'
p663
S'domain'
p664
g664
S'domain to which the examples are converted (if needed)'
p665
I0
I0
I00
Ntp666
asg29
(dp667
sbsS'TRuleClassifierConstructor'
p668
(i__main__
ClassDefinition
p669
(dp670
g4
I1
sg5
I01
sg6
g668
sg7
S'TOrange'
p671
sg9
I01
sg10
(lp672
sg12
(lp673
sg29
(dp674
sbsS'TMakeRandomIndicesMultiple'
p675
(i__main__
ClassDefinition
p676
(dp677
g4
I1
sg5
I01
sg6
g675
sg7
S'TMakeRandomIndices'
p678
sg9
I00
sg10
(lp679
sg12
(lp680
(S'int'
p681
S'stratified'
p682
g682
S' requests stratified distributions'
p683
I0
I0
I01
S'MakeRandomIndices_Stratification'
p684
tp685
a(S'int'
p686
S'randseed'
p687
g687
S'a seed for random generator'
p688
I0
I0
I01
Ntp689
a(S'TRandomGenerator'
p690
S'randomGenerator'
p691
S'random_generator'
p692
S'a random generator'
p693
I0
I0
I00
Ntp694
asg29
(dp695
sbsS'TLearnerFD'
p696
(i__main__
ClassDefinition
p697
(dp698
g4
I1
sg5
I01
sg6
g696
sg7
S'TLearner'
p699
sg9
I00
sg10
(lp700
sg12
(lp701
(S'TDomain'
p702
S'domain'
p703
g703
S'domain'
p704
I0
I0
I00
Ntp705
ag110
asg29
(dp706
sbsS'TP2NN'
p707
(i__main__
ClassDefinition
p708
(dp709
g4
I1
sg5
I01
sg6
g707
sg7
S'TPNN'
p710
sg9
I00
sg10
(lp711
sg12
(lp712
(S'int'
p713
S'dimensions'
p714
g714
S'the number of dimensions'
p715
I01
I0
I01
Ntp716
a(S'TFloatList'
p717
S'offsets'
p718
g718
S'offsets to subtract from the attribute values'
p719
I0
I0
I00
Ntp720
a(S'TFloatList'
p721
S'normalizers'
p722
g722
S'number to divide the values by'
p723
I0
I0
I00
Ntp724
a(S'TFloatList'
p725
S'averages'
p726
g726
S'numbers to use instead of the missing'
p727
I0
I0
I00
Ntp728
a(S'bool'
p729
S'normalizeExamples'
p730
S'normalize_examples'
p731
S'if true, attribute values are divided to sum up to 1'
p732
I0
I0
I01
Ntp733
a(S'int'
p734
S'nExamples'
p735
S'n_examples'
p736
S'the number of examples'
p737
I01
I0
I01
Ntp738
a(S'int'
p739
S'law'
p740
g740
S'law'
p741
I0
I0
I01
Ntp742
ag284
ag94
ag99
asg29
(dp743
sbsS'TTreeSplitConstructor'
p744
(i__main__
ClassDefinition
p745
(dp746
g4
I1
sg5
I01
sg6
g744
sg7
S'TOrange'
p747
sg9
I01
sg10
(lp748
sg12
(lp749
(S'float'
p750
S'minSubset'
p751
S'min_subset'
p752
S'minimal number of examples in a subset'
p753
I0
I0
I01
Ntp754
asg29
(dp755
sbsS'TProbabilityEstimatorList'
p756
(ipyprops
ClassDefinition
p757
(dp758
g4
I0
sg5
I01
sg6
g756
sg7
g136
sg9
I0
sg10
(lp759
sg12
(lp760
sg29
(dp761
sbsS'TMapIntValue'
p762
(i__main__
ClassDefinition
p763
(dp764
g4
I1
sg5
I01
sg6
g762
sg7
S'TTransformValue'
p765
sg9
I00
sg10
(lp766
sg12
(lp767
(S'TIntList'
p768
S'mapping'
p769
g769
S'a lookup table'
p770
I0
I0
I00
Ntp771
a(S'TTransformValue'
p772
S'subTransform'
p773
S'sub_transform'
p774
S'transformation executed prior to this'
p775
I0
I0
I00
Ntp776
asg29
(dp777
sbsS'TDistributionAssessor_Kramer'
p778
(i__main__
ClassDefinition
p779
(dp780
g4
I1
sg5
I01
sg6
g778
sg7
S'TDistributionAssessor'
p781
sg9
I00
sg10
(lp782
sg12
(lp783
sg29
(dp784
sbsS'TTreeExampleSplitter_UnknownsToBranch'
p785
(i__main__
ClassDefinition
p786
(dp787
g4
I1
sg5
I01
sg6
g785
sg7
S'TTreeExampleSplitter'
p788
sg9
I00
sg10
(lp789
sg12
(lp790
sg29
(dp791
sbsS'TMajorityLearner'
p792
(i__main__
ClassDefinition
p793
(dp794
g4
I1
sg5
I01
sg6
g792
sg7
S'TLearner'
p795
sg9
I00
sg10
(lp796
sg12
(lp797
(S'TProbabilityEstimatorConstructor'
p798
S'estimatorConstructor'
p799
S'estimator_constructor'
p800
S'constructs probability estimator'
p801
I0
I0
I00
Ntp802
a(S'TDistribution'
p803
S'aprioriDistribution'
p804
S'apriori_distribution'
p805
S'apriori class distribution'
p806
I0
I0
I00
Ntp807
ag110
asg29
(dp808
sbsS'TEVDistGetter_Standard'
p809
(i__main__
ClassDefinition
p810
(dp811
g4
I1
sg5
I01
sg6
g809
sg7
S'TEVDistGetter'
p812
sg9
I00
sg10
(lp813
sg12
(lp814
(S'TEVDistList'
p815
S'dists'
p816
g816
S'EVC distribution (sorted by rule length, 0 = for rules without conditions)'
p817
I0
I0
I00
Ntp818
asg29
(dp819
sbsS'TFeatureByIM'
p820
(i__main__
ClassDefinition
p821
(dp822
g4
I1
sg5
I01
sg6
g820
sg7
S'TFeatureInducer'
p823
sg9
I00
sg10
(lp824
sg12
(lp825
(S'TIMConstructor'
p826
S'IMconstructor'
p827
g827
S'incompatibility matrix constructor'
p828
I0
I0
I00
Ntp829
a(S'TClustersFromIM'
p830
S'clustersFromIM'
p831
S'clusters_from_IM'
p832
S'clustering algorithm'
p833
I0
I0
I00
Ntp834
a(S'int'
p835
S'completion'
p836
g836
S' decides how to determine the class for points not covered by any cluster'
p837
I0
I0
I01
S'FeatureByIM_Completion'
p838
tp839
asg29
(dp840
S'Completion'
p841
(lp842
(S'NoCompletion'
p843
S'completion_no'
p844
tp845
a(S'CompletionByDefault'
p846
S'completion_default'
p847
tp848
a(S'CompletionByBayes'
p849
S'completion_bayes'
p850
tp851
assbsS'TMeasureAttributeFromProbabilities'
p852
(i__main__
ClassDefinition
p853
(dp854
g4
I1
sg5
I01
sg6
g852
sg7
S'TMeasureAttribute'
p855
sg9
I01
sg10
(lp856
sg12
(lp857
(S'TProbabilityEstimatorConstructor'
p858
S'estimatorConstructor'
p859
S'estimator_constructor'
p860
S'probability estimator (none by default)'
p861
I0
I0
I00
Ntp862
a(S'TConditionalProbabilityEstimatorConstructor'
p863
S'conditionalEstimatorConstructor'
p864
S'conditional_estimator_constructor'
p865
S'conditional probability estimator (none by default)'
p866
I0
I0
I00
Ntp867
a(S'int'
p868
S'unknownsTreatment'
p869
S'unknowns_treatment'
p870
S' treatment of unknown values'
p871
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p872
tp873
a(S'int'
p874
S'needs'
p875
g875
S' describes what kind of data is needed for computation'
p876
I0
I0
I01
S'MeasureAttribute_Needs'
p877
tp878
a(S'bool'
p879
S'handlesDiscrete'
p880
S'handles_discrete'
p881
S'tells whether the measure can handle discrete attributes'
p882
I0
I0
I01
Ntp883
a(S'bool'
p884
S'handlesContinuous'
p885
S'handles_continuous'
p886
S'tells whether the measure can handle continuous attributes'
p887
I0
I0
I01
Ntp888
a(S'bool'
p889
S'computesThresholds'
p890
S'computes_thresholds'
p891
S'tells whether the measure can compute threshold functions/maxima for continuous attributes'
p892
I0
I0
I01
Ntp893
asg29
(dp894
sbsS'TProbabilityEstimatorConstructor_relative'
p895
(i__main__
ClassDefinition
p896
(dp897
g4
I1
sg5
I01
sg6
g895
sg7
S'TProbabilityEstimatorConstructor'
p898
sg9
I00
sg10
(lp899
sg12
(lp900
sg29
(dp901
sbsS'TClassifierByLookupTable3'
p902
(i__main__
ClassDefinition
p903
(dp904
g4
I1
sg5
I01
sg6
g902
sg7
S'TClassifierByLookupTable'
p905
sg9
I00
sg10
(lp906
sg12
(lp907
(S'TVariable'
p908
S'variable1'
p909
g909
S'the first attribute used for classification'
p910
I01
I0
I00
Ntp911
a(S'TVariable'
p912
S'variable2'
p913
g913
S'the second attribute used for classification'
p914
I01
I0
I00
Ntp915
a(S'TVariable'
p916
S'variable3'
p917
g917
S'the third attribute used for classification'
p918
I01
I0
I00
Ntp919
a(S'int'
p920
S'noOfValues1'
p921
S'no_of_values1'
p922
S'number of values of the first attribute'
p923
I01
I0
I01
Ntp924
a(S'int'
p925
S'noOfValues2'
p926
S'no_of_values2'
p927
S'number of values of the second attribute'
p928
I01
I0
I01
Ntp929
a(S'int'
p930
S'noOfValues3'
p931
S'no_of_values3'
p932
S'number of values of the third attribute'
p933
I01
I0
I01
Ntp934
a(S'TEFMDataDescription'
p935
S'dataDescription'
p936
S'data_description'
p937
S'data description'
p938
I0
I0
I00
Ntp939
ag85
ag89
ag94
ag99
asg29
(dp940
sbsS'TImputerConstructor_maximal'
p941
(i__main__
ClassDefinition
p942
(dp943
g4
I1
sg5
I01
sg6
g941
sg7
S'TImputerConstructor'
p944
sg9
I00
sg10
(lp945
sg12
(lp946
g157
asg29
(dp947
sbsS'TRuleBeamRefiner'
p948
(i__main__
ClassDefinition
p949
(dp950
g4
I1
sg5
I01
sg6
g948
sg7
S'TOrange'
p951
sg9
I01
sg10
(lp952
sg12
(lp953
sg29
(dp954
sbsS'TSubsetsGenerator_iterator'
p955
(i__main__
ClassDefinition
p956
(dp957
g4
I1
sg5
I01
sg6
g955
sg7
S'TOrange'
p958
sg9
I01
sg10
(lp959
sg12
(lp960
g503
asg29
(dp961
sbsS'TEquiDistDiscretizer'
p962
(i__main__
ClassDefinition
p963
(dp964
g4
I1
sg5
I01
sg6
g962
sg7
S'TDiscretizer'
p965
sg9
I00
sg10
(lp966
sg12
(lp967
(S'int'
p968
S'numberOfIntervals'
p969
S'number_of_intervals'
p970
S'number of intervals'
p971
I0
I0
I01
Ntp972
a(S'float'
p973
S'firstCut'
p974
S'first_cut'
p975
S'the first cut-off point'
p976
I0
I0
I01
Ntp977
a(S'float'
p978
S'step'
p979
g979
S'step (width of interval)'
p980
I0
I0
I01
Ntp981
ag776
asg29
(dp982
sbsS'TValueFilter_string'
p983
(i__main__
ClassDefinition
p984
(dp985
g4
I1
sg5
I01
sg6
g983
sg7
S'TValueFilter'
p986
sg9
I00
sg10
(lp987
sg12
(lp988
(S'string'
p989
S'min'
p990
(g990
S'ref'
p991
tp992
S' reference value (lower bound for interval operators)'
p993
I0
I0
I01
Ntp994
a(S'string'
p995
S'max'
p996
g996
S'upper bound for interval operators'
p997
I0
I0
I01
Ntp998
a(S'int'
p999
S'oper'
p1000
g1000
S' operator'
p1001
I0
I0
I01
S'ValueFilter_Operator'
p1002
tp1003
a(S'bool'
p1004
S'caseSensitive'
p1005
S'case_sensitive'
p1006
S'if true (default), the operator is case sensitive'
p1007
I0
I0
I01
Ntp1008
a(S'int'
p1009
S'position'
p1010
g1010
S"attribute's position in domain"
p1011
I0
I0
I01
Ntp1012
a(S'int'
p1013
S'acceptSpecial'
p1014
S'accept_special'
p1015
S'tells whether a special value (DK, DC...) is accepted (1), rejected (0) or ignored (-1)'
p1016
I0
I0
I01
Ntp1017
asg29
(dp1018
sbsS'TFindNearest_BruteForce'
p1019
(i__main__
ClassDefinition
p1020
(dp1021
g4
I1
sg5
I01
sg6
g1019
sg7
S'TFindNearest'
p1022
sg9
I00
sg10
(lp1023
sg12
(lp1024
(S'TExamplesDistance'
p1025
S'distance'
p1026
g1026
S'metrics'
p1027
I0
I0
I00
Ntp1028
a(S'TExampleGenerator'
p1029
S'examples'
p1030
g1030
S'a list of stored examples'
p1031
I0
I0
I00
Ntp1032
a(S'int'
p1033
S'weightID'
p1034
S'weight_ID'
p1035
S'weight to use when counting examples'
p1036
I0
I0
I01
Ntp1037
a(S'int'
p1038
S'distanceID'
p1039
S'distance_ID'
p1040
S'id of meta attribute where the distance should be stored (0 = no storing)'
p1041
I0
I0
I01
Ntp1042
a(S'bool'
p1043
S'includeSame'
p1044
S'include_same'
p1045
S'tells whether to include examples that are same as the reference example'
p1046
I0
I0
I01
Ntp1047
asg29
(dp1048
sbsS'TRuleBeamInitializer'
p1049
(i__main__
ClassDefinition
p1050
(dp1051
g4
I1
sg5
I01
sg6
g1049
sg7
S'TOrange'
p1052
sg9
I01
sg10
(lp1053
sg12
(lp1054
sg29
(dp1055
sbsS'TMeasureAttribute_relevance'
p1056
(i__main__
ClassDefinition
p1057
(dp1058
g4
I1
sg5
I01
sg6
g1056
sg7
S'TMeasureAttributeFromProbabilities'
p1059
sg9
I00
sg10
(lp1060
sg12
(lp1061
g862
ag867
ag873
ag878
ag883
ag888
ag893
asg29
(dp1062
sbsS'TFilter_hasSpecial'
p1063
(i__main__
ClassDefinition
p1064
(dp1065
g4
I1
sg5
I01
sg6
g1063
sg7
S'TFilter'
p1066
sg9
I00
sg10
(lp1067
sg12
(lp1068
g662
ag666
asg29
(dp1069
sbsS'TDiscDistribution'
p1070
(i__main__
ClassDefinition
p1071
(dp1072
g4
I1
sg5
I01
sg6
g1070
sg7
S'TDistribution'
p1073
sg9
I00
sg10
(lp1074
sg12
(lp1075
(S'TFloatList'
p1076
S'variances'
p1077
g1077
S'variances'
p1078
I0
I0
I00
Ntp1079
a(S'TVariable'
p1080
S'variable'
p1081
g1081
S'attribute descriptor (optional)'
p1082
I0
I0
I00
Ntp1083
a(S'float'
p1084
S'unknowns'
p1085
g1085
S'number of unknown values'
p1086
I0
I0
I01
Ntp1087
a(S'float'
p1088
S'abs'
p1089
g1089
S'sum of frequencies (not including unknown values!)'
p1090
I0
I0
I01
Ntp1091
a(S'float'
p1092
S'cases'
p1093
g1093
S"number of cases; as abs, but doesn't change at *= and normalize()"
p1094
I0
I0
I01
Ntp1095
a(S'bool'
p1096
S'normalized'
p1097
g1097
S'distribution is normalized'
p1098
I0
I0
I01
Ntp1099
a(S'bool'
p1100
S'supportsDiscrete'
p1101
S'supports_discrete'
p1102
S'distribution supports discrete interface'
p1103
I01
I0
I01
Ntp1104
a(S'bool'
p1105
S'supportsContinuous'
p1106
S'supports_continuous'
p1107
S'distribution supports continuous interface'
p1108
I01
I0
I01
Ntp1109
a(S'TRandomGenerator'
p1110
S'randomGenerator'
p1111
S'random_generator'
p1112
S'random generator; initialized when needed, if not given earlier'
p1113
I0
I0
I00
Ntp1114
asg29
(dp1115
sbsS'TBayesLearner'
p1116
(i__main__
ClassDefinition
p1117
(dp1118
g4
I1
sg5
I01
sg6
g1116
sg7
S'TLearner'
p1119
sg9
I00
sg10
(lp1120
sg12
(lp1121
(S'TProbabilityEstimatorConstructor'
p1122
S'estimatorConstructor'
p1123
S'estimator_constructor'
p1124
S'constructs a probability estimator for P(C)'
p1125
I0
I0
I00
Ntp1126
a(S'TConditionalProbabilityEstimatorConstructor'
p1127
S'conditionalEstimatorConstructor'
p1128
S'conditional_estimator_constructor'
p1129
S'constructs a probability estimator for P(C|A) '
p1130
I0
I0
I00
Ntp1131
a(S'TConditionalProbabilityEstimatorConstructor'
p1132
S'conditionalEstimatorConstructorContinuous'
p1133
S'conditional_estimator_constructor_continuous'
p1134
S'constructs a probability estimator for P(C|A) for continuous attributes'
p1135
I0
I0
I00
Ntp1136
a(S'bool'
p1137
S'normalizePredictions'
p1138
S'normalize_predictions'
p1139
S'instructs learner to construct a classifier that normalizes probabilities'
p1140
I0
I0
I01
Ntp1141
a(S'bool'
p1142
S'adjustThreshold'
p1143
S'adjust_threshold'
p1144
S'adjust probability thresholds (for binary classes only)'
p1145
I0
I0
I01
Ntp1146
ag110
asg29
(dp1147
sbsS'TIMByRelief'
p1148
(i__main__
ClassDefinition
p1149
(dp1150
g4
I1
sg5
I01
sg6
g1148
sg7
S'TIMConstructor'
p1151
sg9
I00
sg10
(lp1152
sg12
(lp1153
(S'TExamplesDistance_Relief'
p1154
S'distance'
p1155
g1155
S'distance measure'
p1156
I0
I0
I00
Ntp1157
a(S'float'
p1158
S'k'
p1159
g1159
S'number of neighbours'
p1160
I0
I0
I01
Ntp1161
a(S'float'
p1162
S'm'
p1163
g1163
S'number of reference examples'
p1164
I0
I0
I01
Ntp1165
a(S'float'
p1166
S'kFromColumns'
p1167
S'k_from_columns'
p1168
S'if positive, number of neighbours is #columns*kFromColumns'
p1169
I0
I0
I01
Ntp1170
a(S'bool'
p1171
S'ignoreSameExample'
p1172
S'ignore_same_example'
p1173
S'does not put reference example into M'
p1174
I0
I0
I01
Ntp1175
a(S'bool'
p1176
S'convertToBinary'
p1177
S'convert_to_binary'
p1178
S'convert to binary class (hit-miss)'
p1179
I0
I0
I01
Ntp1180
a(S'bool'
p1181
S'correctClassFirst'
p1182
S'correct_class_first'
p1183
S'puts the correct class proportion to the first place'
p1184
I0
I0
I01
Ntp1185
a(S'bool'
p1186
S'allExamples'
p1187
S'all_examples'
p1188
S'uses all examples for reference examples'
p1189
I0
I0
I01
Ntp1190
a(S'bool'
p1191
S'allSameNeighbours'
p1192
S'all_same_neighbours'
p1193
S'uses all the examples same to the reference as neighbours'
p1194
I0
I0
I01
Ntp1195
a(S'bool'
p1196
S'recordRowExamples'
p1197
S'record_row_examples'
p1198
S'enables creation of rowExample list'
p1199
I0
I0
I01
Ntp1200
asg29
(dp1201
sbsS'TConditionalProbabilityEstimator'
p1202
(i__main__
ClassDefinition
p1203
(dp1204
g4
I1
sg5
I01
sg6
g1202
sg7
S'TOrange'
p1205
sg9
I01
sg10
(lp1206
sg12
(lp1207
g126
ag131
asg29
(dp1208
sbsS'TColumnAssessor_Laplace'
p1209
(i__main__
ClassDefinition
p1210
(dp1211
g4
I1
sg5
I01
sg6
g1209
sg7
S'TColumnAssessor'
p1212
sg9
I00
sg10
(lp1213
sg12
(lp1214
sg29
(dp1215
sbsS'TPreprocessor_addGaussianNoise'
p1216
(i__main__
ClassDefinition
p1217
(dp1218
g4
I1
sg5
I01
sg6
g1216
sg7
S'TPreprocessor'
p1219
sg9
I00
sg10
(lp1220
sg12
(lp1221
(S'TVariableFloatMap'
p1222
S'deviations'
p1223
g1223
S'deviations individual attribute values'
p1224
I0
I0
I00
Ntp1225
a(S'float'
p1226
S'defaultDeviation'
p1227
S'default_deviation'
p1228
S'default deviation'
p1229
I0
I0
I01
Ntp1230
a(S'TRandomGenerator'
p1231
S'randomGenerator'
p1232
S'random_generator'
p1233
S'random number generator'
p1234
I0
I0
I00
Ntp1235
asg29
(dp1236
sbsS'TRuleStoppingCriteria_NegativeDistribution'
p1237
(i__main__
ClassDefinition
p1238
(dp1239
g4
I1
sg5
I01
sg6
g1237
sg7
S'TRuleStoppingCriteria'
p1240
sg9
I00
sg10
(lp1241
sg12
(lp1242
sg29
(dp1243
sbsS'TTreeSplitConstructor_ExhaustiveBinary'
p1244
(i__main__
ClassDefinition
p1245
(dp1246
g4
I1
sg5
I01
sg6
g1244
sg7
S'TTreeSplitConstructor_Measure'
p1247
sg9
I00
sg10
(lp1248
sg12
(lp1249
(S'TMeasureAttribute'
p1250
S'measure'
p1251
g1251
S'attribute quality measure'
p1252
I0
I0
I00
Ntp1253
a(S'float'
p1254
S'worstAcceptable'
p1255
S'worst_acceptable'
p1256
S'the worst acceptable quality of the attribute'
p1257
I0
I0
I01
Ntp1258
ag754
asg29
(dp1259
sbsS'TTreeClassifier'
p1260
(i__main__
ClassDefinition
p1261
(dp1262
g4
I1
sg5
I01
sg6
g1260
sg7
S'TClassifierFD'
p1263
sg9
I00
sg10
(lp1264
sg12
(lp1265
(S'TTreeNode'
p1266
S'tree'
p1267
g1267
S'decision tree'
p1268
I0
I0
I00
Ntp1269
a(S'TTreeDescender'
p1270
S'descender'
p1271
g1271
S'object that descends down the tree'
p1272
I0
I0
I00
Ntp1273
ag284
ag94
ag99
asg29
(dp1274
sbsS'TFilter_compatibleExample'
p1275
(i__main__
ClassDefinition
p1276
(dp1277
g4
I1
sg5
I01
sg6
g1275
sg7
S'TFilter'
p1278
sg9
I00
sg10
(lp1279
sg12
(lp1280
(S'TExample'
p1281
S'example'
p1282
g1282
S'example with which examples are compared'
p1283
I0
I0
I00
Ntp1284
ag662
ag666
asg29
(dp1285
sbsS'TRemoveRedundant'
p1286
(i__main__
ClassDefinition
p1287
(dp1288
g4
I1
sg5
I01
sg6
g1286
sg7
S'TOrange'
p1289
sg9
I01
sg10
(lp1290
sg12
(lp1291
(S'bool'
p1292
S'keepValues'
p1293
S'keep_values'
p1294
S'keep an attribute if number values is only smaller, not one'
p1295
I0
I0
I01
Ntp1296
asg29
(dp1297
sbsS'TExamplesDistanceConstructor_Hamming'
p1298
(i__main__
ClassDefinition
p1299
(dp1300
g4
I1
sg5
I01
sg6
g1298
sg7
S'TExamplesDistanceConstructor'
p1301
sg9
I00
sg10
(lp1302
sg12
(lp1303
(S'bool'
p1304
S'ignoreClass'
p1305
S'ignore_class'
p1306
S'if true (default), class value is ignored when computing distances'
p1307
I0
I0
I01
Ntp1308
a(S'bool'
p1309
S'ignoreUnknowns'
p1310
S'ignore_unknowns'
p1311
S'if true (default: false) unknown values are ignored in computation'
p1312
I0
I0
I01
Ntp1313
a(S'bool'
p1314
S'ignoreClass'
p1315
S'ignore_class'
p1316
S'if true (default), class value is ignored when computing distances'
p1317
I0
I0
I01
Ntp1318
asg29
(dp1319
sbsS'TSomeValue'
p1320
(i__main__
ClassDefinition
p1321
(dp1322
g4
I1
sg5
I01
sg6
g1320
sg7
S'TOrange'
p1323
sg9
I01
sg10
(lp1324
sg12
(lp1325
sg29
(dp1326
sbsS'TRuleClassifierConstructor_firstRule'
p1327
(i__main__
ClassDefinition
p1328
(dp1329
g4
I1
sg5
I01
sg6
g1327
sg7
S'TRuleClassifierConstructor'
p1330
sg9
I00
sg10
(lp1331
sg12
(lp1332
sg29
(dp1333
sbsS'TStopDistributionClustering_noProfit'
p1334
(i__main__
ClassDefinition
p1335
(dp1336
g4
I1
sg5
I01
sg6
g1334
sg7
S'TStopDistributionClustering'
p1337
sg9
I00
sg10
(lp1338
sg12
(lp1339
(S'float'
p1340
S'minProfitProportion'
p1341
S'min_profit_proportion'
p1342
S'minimal allowable profit proportion'
p1343
I0
I0
I01
Ntp1344
asg29
(dp1345
sbsS'TBiModalDiscretization'
p1346
(i__main__
ClassDefinition
p1347
(dp1348
g4
I1
sg5
I01
sg6
g1346
sg7
S'TDiscretization'
p1349
sg9
I00
sg10
(lp1350
sg12
(lp1351
(S'bool'
p1352
S'splitInTwo'
p1353
S'split_in_two'
p1354
S'if true (default), flanks are merged into a single interval'
p1355
I0
I0
I01
Ntp1356
asg29
(dp1357
sbsS'TColoredIG'
p1358
(i__main__
ClassDefinition
p1359
(dp1360
g4
I1
sg5
I01
sg6
g1358
sg7
S'TGeneralExampleClustering'
p1361
sg9
I00
sg10
(lp1362
sg12
(lp1363
(S'TIG'
p1364
S'ig'
p1365
g1365
S'incompatibility graph'
p1366
I0
I0
I00
Ntp1367
a(S'TIntList'
p1368
S'colors'
p1369
g1369
S'colors (one element corresponding to each ig node)'
p1370
I0
I0
I00
Ntp1371
asg29
(dp1372
sbsS'TMeasureAttribute'
p1373
(i__main__
ClassDefinition
p1374
(dp1375
g4
I1
sg5
I01
sg6
g1373
sg7
S'TOrange'
p1376
sg9
I00
sg10
(lp1377
sg12
(lp1378
g878
ag883
ag888
ag893
asg29
(dp1379
S'Needs'
p1380
(lp1381
(S'Contingency_Class'
p1382
I0
tp1383
a(S'DomainContingency'
p1384
I1
tp1385
a(S'Generator'
p1386
I2
tp1387
asS'UnknownsTreatment'
p1388
(lp1389
(S'IgnoreUnknowns'
p1390
I0
tp1391
a(S'ReduceByUnknowns'
p1392
I1
tp1393
a(S'UnknownsToCommon'
p1394
I2
tp1395
a(S'UnknownsAsValue'
p1396
I3
tp1397
assbsS'TRuleEvaluator'
p1398
(i__main__
ClassDefinition
p1399
(dp1400
g4
I1
sg5
I01
sg6
g1398
sg7
S'TOrange'
p1401
sg9
I01
sg10
(lp1402
sg12
(lp1403
sg29
(dp1404
sbsS'TStringVariable'
p1405
(i__main__
ClassDefinition
p1406
(dp1407
g4
I1
sg5
I01
sg6
g1405
sg7
S'TVariable'
p1408
sg9
I00
sg10
(lp1409
sg12
(lp1410
g326
ag330
ag334
ag339
ag344
ag349
ag354
asg29
(dp1411
sbsS'TAssessIMQuality'
p1412
(i__main__
ClassDefinition
p1413
(dp1414
g4
I1
sg5
I01
sg6
g1412
sg7
S'TOrange'
p1415
sg9
I00
sg10
(lp1416
sg12
(lp1417
(S'TColumnAssessor'
p1418
S'columnAssessor'
p1419
S'column_assessor'
p1420
S'column quality assessor'
p1421
I0
I0
I00
Ntp1422
asg29
(dp1423
sbsS'TGraphAsTree'
p1424
(i__main__
ClassDefinition
p1425
(dp1426
g4
I1
sg5
I01
sg6
g1424
sg7
S'TGraph'
p1427
sg9
I00
sg10
(lp1428
sg12
(lp1429
(S'int'
p1430
S'nVertices'
p1431
S'n_vertices'
p1432
S'the number of vertices'
p1433
I01
I0
I01
Ntp1434
a(S'int'
p1435
S'nEdgeTypes'
p1436
S'n_edge_types'
p1437
S'the number of edge types'
p1438
I01
I0
I01
Ntp1439
a(S'bool'
p1440
S'directed'
p1441
g1441
S'directed'
p1442
I01
I0
I01
Ntp1443
asg29
(dp1444
sbsS'TTreeExampleSplitter_IgnoreUnknowns'
p1445
(i__main__
ClassDefinition
p1446
(dp1447
g4
I1
sg5
I01
sg6
g1445
sg7
S'TTreeExampleSplitter'
p1448
sg9
I00
sg10
(lp1449
sg12
(lp1450
sg29
(dp1451
sbsS'TProbabilityEstimator_FromDistribution'
p1452
(i__main__
ClassDefinition
p1453
(dp1454
g4
I1
sg5
I01
sg6
g1452
sg7
S'TProbabilityEstimator'
p1455
sg9
I00
sg10
(lp1456
sg12
(lp1457
(S'TDistribution'
p1458
S'probabilities'
p1459
g1459
S'probabilities'
p1460
I0
I0
I00
Ntp1461
a(S'bool'
p1462
S'supportsDiscrete'
p1463
S'supports_discrete'
p1464
S'can estimate probabilities of discrete attributes'
p1465
I01
I0
I01
Ntp1466
a(S'bool'
p1467
S'supportsContinuous'
p1468
S'supports_continuous'
p1469
S'can estimate probabilities of continuous attributes'
p1470
I01
I0
I01
Ntp1471
asg29
(dp1472
sbsS'TC45TreeNode'
p1473
(i__main__
ClassDefinition
p1474
(dp1475
g4
I1
sg5
I01
sg6
g1473
sg7
S'TOrange'
p1476
sg9
I00
sg10
(lp1477
sg12
(lp1478
(S'int'
p1479
S'nodeType'
p1480
S'node_type'
p1481
S' 0 = leaf,  1 = branch,  2 = cut,  3 = subset'
p1482
I0
I0
I01
S'C45TreeNode_NodeType'
p1483
tp1484
a(S'TValue'
p1485
S'leaf'
p1486
g1486
S'most frequent class at this node'
p1487
I0
I0
I01
Ntp1488
a(S'float'
p1489
S'items'
p1490
g1490
S'no of items at this node'
p1491
I0
I0
I01
Ntp1492
a(S'TDiscDistribution'
p1493
S'classDist'
p1494
S'class_dist'
p1495
S'class distribution of items'
p1496
I0
I0
I00
Ntp1497
a(S'TVariable'
p1498
S'tested'
p1499
g1499
S'attribute referenced in test'
p1500
I0
I0
I00
Ntp1501
a(S'float'
p1502
S'cut'
p1503
g1503
S'threshold for continuous attribute'
p1504
I0
I0
I01
Ntp1505
a(S'float'
p1506
S'lower'
p1507
g1507
S'lower limit of soft threshold'
p1508
I0
I0
I01
Ntp1509
a(S'float'
p1510
S'upper'
p1511
g1511
S'upper limit of soft threshold'
p1512
I0
I0
I01
Ntp1513
a(S'TIntList'
p1514
S'mapping'
p1515
g1515
S'mapping for discrete value'
p1516
I0
I0
I00
Ntp1517
a(S'TC45TreeNodeList'
p1518
S'branch'
p1519
g1519
S'branch[x] = (sub)tree for outcome x */'
p1520
I0
I0
I00
Ntp1521
asg29
(dp1522
S'NodeType'
p1523
(lp1524
(S'Leaf'
p1525
S'0'
p1526
tp1527
a(S'Branch'
p1528
I1
tp1529
a(S'Cut'
p1530
I2
tp1531
a(S'Subset'
p1532
I3
tp1533
assbsS'TDistributionList'
p1534
(ipyprops
ClassDefinition
p1535
(dp1536
g4
I0
sg5
I01
sg6
g1534
sg7
g136
sg9
I0
sg10
(lp1537
sg12
(lp1538
sg29
(dp1539
sbsS'TTreeDescender_UnknownMergeAsBranchSizes'
p1540
(i__main__
ClassDefinition
p1541
(dp1542
g4
I1
sg5
I01
sg6
g1540
sg7
S'TTreeDescender'
p1543
sg9
I0
sg10
(lp1544
sg12
(lp1545
sg29
(dp1546
sbsS'THierarchicalClusterOrdering'
p1547
(i__main__
ClassDefinition
p1548
(dp1549
g4
I1
sg5
I01
sg6
g1547
sg7
S'TOrange'
p1550
sg9
I00
sg10
(lp1551
sg12
(lp1552
(S'TProgressCallback'
p1553
S'progress_callback'
p1554
g1554
S'progress callback function'
p1555
I0
I0
I00
Ntp1556
asg29
(dp1557
sbsS'TLogitClassifierState'
p1558
(i__main__
ClassDefinition
p1559
(dp1560
g4
I1
sg5
I01
sg6
g1558
sg7
S'TOrange'
p1561
sg9
I00
sg10
(lp1562
sg12
(lp1563
sg29
(dp1564
sbsS'TExamplesDistance'
p1565
(i__main__
ClassDefinition
p1566
(dp1567
g4
I1
sg5
I01
sg6
g1565
sg7
S'TOrange'
p1568
sg9
I01
sg10
(lp1569
sg12
(lp1570
sg29
(dp1571
sbsS'TFileExampleGenerator'
p1572
(i__main__
ClassDefinition
p1573
(dp1574
g4
I1
sg5
I01
sg6
g1572
sg7
S'TExampleGenerator'
p1575
sg9
I01
sg10
(lp1576
sg12
(lp1577
(S'string'
p1578
S'filename'
p1579
g1579
S'filename'
p1580
I0
I0
I01
Ntp1581
a(S'int'
p1582
S'startDataPos'
p1583
S'start_data_pos'
p1584
S'starting position of the data in file'
p1585
I0
I0
I01
Ntp1586
a(S'int'
p1587
S'startDataLine'
p1588
S'start_data_line'
p1589
S'line in the file where the data starts'
p1590
I0
I0
I01
Ntp1591
ag299
ag303
asg29
(dp1592
sbsS'TMeasureAttribute_gainRatio'
p1593
(i__main__
ClassDefinition
p1594
(dp1595
g4
I1
sg5
I01
sg6
g1593
sg7
S'TMeasureAttributeFromProbabilities'
p1596
sg9
I00
sg10
(lp1597
sg12
(lp1598
g862
ag867
ag873
ag878
ag883
ag888
ag893
asg29
(dp1599
sbsS'TContingencyClassAttr'
p1600
(i__main__
ClassDefinition
p1601
(dp1602
g4
I1
sg5
I01
sg6
g1600
sg7
S'TContingencyClass'
p1603
sg9
I00
sg10
(lp1604
sg12
(lp1605
(S'TVariable'
p1606
S'outerVariable'
p1607
S'outer_variable'
p1608
S'outer attribute'
p1609
I0
I0
I00
Ntp1610
a(S'TVariable'
p1611
S'innerVariable'
p1612
S'inner_variable'
p1613
S'inner attribute'
p1614
I0
I0
I00
Ntp1615
a(S'int'
p1616
S'varType'
p1617
S'var_type'
p1618
S' outer attribute type'
p1619
I0
I0
I01
S'Variable_Type'
p1620
tp1621
a(S'TDistribution'
p1622
S'outerDistribution'
p1623
S'outer_distribution'
p1624
S'distribution of values of outer attributes'
p1625
I0
I0
I00
Ntp1626
a(S'TDistribution'
p1627
S'innerDistribution'
p1628
S'inner_distribution'
p1629
S'distribution of values of inner attributes'
p1630
I0
I0
I00
Ntp1631
a(S'TDistribution'
p1632
S'innerDistributionUnknown'
p1633
S'inner_distribution_unknown'
p1634
S'distribution of inner variable for examples where the outer value was unknown'
p1635
I0
I0
I00
Ntp1636
asg29
(dp1637
sbsS'TMissValuesGenerator'
p1638
(i__main__
ClassDefinition
p1639
(dp1640
g4
I1
sg5
I01
sg6
g1638
sg7
S'TChangeExampleGenerator'
p1641
sg9
I00
sg10
(lp1642
sg12
(lp1643
(S'TIntFloatList'
p1644
S'replaceProbabilities'
p1645
S'replace_probabilities'
p1646
S"probabilities for replacing attributes' values"
p1647
I0
I0
I00
Ntp1648
a(S'TRandomGenerator'
p1649
S'randomGenerator'
p1650
S'random_generator'
p1651
S'random generator'
p1652
I0
I0
I00
Ntp1653
ag299
ag303
asg29
(dp1654
sbsS'TLogRegClassifier'
p1655
(i__main__
ClassDefinition
p1656
(dp1657
g4
I1
sg5
I01
sg6
g1655
sg7
S'TClassifierFD'
p1658
sg9
I00
sg10
(lp1659
sg12
(lp1660
(S'TDomain'
p1661
S'continuizedDomain'
p1662
S'continuized_domain'
p1663
S'if absent, there is no continuous attributes in original domain'
p1664
I0
I0
I00
Ntp1665
a(S'TEFMDataDescription'
p1666
S'dataDescription'
p1667
S'data_description'
p1668
S'Data needed for classification in presence of undefined values'
p1669
I0
I0
I00
Ntp1670
a(S'TAttributedFloatList'
p1671
S'beta'
p1672
g1672
S'estimated beta coefficients for logistic regression'
p1673
I0
I0
I00
Ntp1674
a(S'TAttributedFloatList'
p1675
S'beta_se'
p1676
g1676
S'estimated standard errors for beta coefficients'
p1677
I0
I0
I00
Ntp1678
a(S'TAttributedFloatList'
p1679
S'wald_Z'
p1680
g1680
S'Wald Z statstic for beta coefficients'
p1681
I0
I0
I00
Ntp1682
a(S'TAttributedFloatList'
p1683
S'P'
p1684
g1684
S'estimated significances for beta coefficients'
p1685
I0
I0
I00
Ntp1686
a(S'float'
p1687
S'likelihood'
p1688
g1688
S"Likelihood: The likelihood function is the function which specifies the probability of the sample observed on the basis of a known model, as a function of the model's parameters. "
p1689
I0
I0
I01
Ntp1690
a(S'int'
p1691
S'fit_status'
p1692
g1692
S"Tells how the model fitting ended - either regularly (LogRegFitter.OK), or it was interrupted due to one of beta coefficients escaping towards infinity (LogRegFitter.Infinity) or since the values didn't converge (LogRegFitter.Divergence)."
p1693
I0
I0
I01
Ntp1694
a(S'TImputer'
p1695
S'imputer'
p1696
g1696
S'if present, it imputes unknown values'
p1697
I0
I0
I00
Ntp1698
ag284
ag94
ag99
asg29
(dp1699
sbsS'TEquiDistDiscretization'
p1700
(i__main__
ClassDefinition
p1701
(dp1702
g4
I1
sg5
I01
sg6
g1700
sg7
S'TDiscretization'
p1703
sg9
I00
sg10
(lp1704
sg12
(lp1705
(S'int'
p1706
S'numberOfIntervals'
p1707
S'number_of_intervals'
p1708
S'number of intervals'
p1709
I0
I0
I01
Ntp1710
asg29
(dp1711
sbsS'TPreprocessor_select'
p1712
(i__main__
ClassDefinition
p1713
(dp1714
g4
I1
sg5
I01
sg6
g1712
sg7
S'TPreprocessor'
p1715
sg9
I00
sg10
(lp1716
sg12
(lp1717
(S'TVarList'
p1718
S'attributes'
p1719
g1719
S'tells which attributes to select'
p1720
I0
I0
I00
Ntp1721
asg29
(dp1722
sbsS'TSVMClassifierSparse'
p1723
(i__main__
ClassDefinition
p1724
(dp1725
g4
I1
sg5
I01
sg6
g1723
sg7
S'TSVMClassifier'
p1726
sg9
I00
sg10
(lp1727
sg12
(lp1728
(S'bool'
p1729
S'useNonMeta'
p1730
S'use_non_meta'
p1731
S'include non meta attributes'
p1732
I0
I0
I01
Ntp1733
ag238
ag242
ag246
ag251
ag256
ag261
ag265
ag270
ag275
ag280
ag284
ag94
ag99
asg29
(dp1734
sbsS'TFilter_disjunction'
p1735
(i__main__
ClassDefinition
p1736
(dp1737
g4
I1
sg5
I01
sg6
g1735
sg7
S'TFilter'
p1738
sg9
I00
sg10
(lp1739
sg12
(lp1740
(S'TFilterList'
p1741
S'filters'
p1742
g1742
S'a list of filters;'
p1743
I0
I0
I00
Ntp1744
ag662
ag666
asg29
(dp1745
sbsS'TMeasureAttribute_gini'
p1746
(i__main__
ClassDefinition
p1747
(dp1748
g4
I1
sg5
I01
sg6
g1746
sg7
S'TMeasureAttributeFromProbabilities'
p1749
sg9
I00
sg10
(lp1750
sg12
(lp1751
g862
ag867
ag873
ag878
ag883
ag888
ag893
asg29
(dp1752
sbsS'TAttributedFloatList'
p1753
(ipyprops
ClassDefinition
p1754
(dp1755
g4
I0
sg5
I01
sg6
g1753
sg7
S'TFloatList'
p1756
sg9
I0
sg10
(lp1757
sg12
(lp1758
sg29
(dp1759
sbsS'TIMByRowsByRelief'
p1760
(i__main__
ClassDefinition
p1761
(dp1762
g4
I1
sg5
I01
sg6
g1760
sg7
S'TIMByRowsConstructor'
p1763
sg9
I00
sg10
(lp1764
sg12
(lp1765
(S'float'
p1766
g1159
g1159
S'number of neighbours'
p1767
I0
I0
I01
Ntp1768
a(S'float'
p1769
g1163
g1163
S'number of reference examples'
p1770
I0
I0
I01
Ntp1771
a(S'float'
p1772
S'kFromColumns'
p1773
S'k_from_columns'
p1774
S'if positive, number of neighbours is #columns*kFromColumns'
p1775
I0
I0
I01
Ntp1776
a(S'bool'
p1777
S'ignoreSameExample'
p1778
S'ignore_same_example'
p1779
S'does not put reference example into M'
p1780
I0
I0
I01
Ntp1781
a(S'bool'
p1782
S'convertToBinary'
p1783
S'convert_to_binary'
p1784
S'convert to binary class (hit-miss)'
p1785
I0
I0
I01
Ntp1786
a(S'bool'
p1787
S'correctClassFirst'
p1788
S'correct_class_first'
p1789
S'puts the correct class proportion to the first place'
p1790
I0
I0
I01
Ntp1791
a(S'bool'
p1792
S'allExamples'
p1793
S'all_examples'
p1794
S'uses all examples for reference examples'
p1795
I0
I0
I01
Ntp1796
a(S'bool'
p1797
S'allSameNeighbours'
p1798
S'all_same_neighbours'
p1799
S'uses all the examples same to the reference as neighbours'
p1800
I0
I0
I01
Ntp1801
asg29
(dp1802
sbsS'TFindNearestConstructor'
p1803
(i__main__
ClassDefinition
p1804
(dp1805
g4
I1
sg5
I01
sg6
g1803
sg7
S'TOrange'
p1806
sg9
I01
sg10
(lp1807
sg12
(lp1808
(S'TExamplesDistanceConstructor'
p1809
S'distanceConstructor'
p1810
S'distance_constructor'
p1811
S'metrics'
p1812
I0
I0
I00
Ntp1813
a(S'bool'
p1814
S'includeSame'
p1815
S'include_same'
p1816
S'tells whether to include examples that are same as the reference example'
p1817
I0
I0
I01
Ntp1818
asg29
(dp1819
sbsS'TRuleClassifier_firstRule'
p1820
(i__main__
ClassDefinition
p1821
(dp1822
g4
I1
sg5
I01
sg6
g1820
sg7
S'TRuleClassifier'
p1823
sg9
I00
sg10
(lp1824
sg12
(lp1825
(S'TDistribution'
p1826
S'prior'
p1827
g1827
S'prior distribution'
p1828
I0
I0
I00
Ntp1829
ag572
ag575
ag579
ag94
ag99
asg29
(dp1830
sbsS'TColumnAssessor'
p1831
(i__main__
ClassDefinition
p1832
(dp1833
g4
I1
sg5
I01
sg6
g1831
sg7
S'TOrange'
p1834
sg9
I01
sg10
(lp1835
sg12
(lp1836
sg29
(dp1837
sbsS'TTableAverager'
p1838
(i__main__
ClassDefinition
p1839
(dp1840
g4
I1
sg5
I01
sg6
g1838
sg7
S'TOrange'
p1841
sg9
I00
sg10
(lp1842
sg12
(lp1843
sg29
(dp1844
sbsS'TComputeDomainContingency_Preprocessor'
p1845
(i__main__
ClassDefinition
p1846
(dp1847
g4
I1
sg5
I01
sg6
g1845
sg7
S'TComputeDomainContingency'
p1848
sg9
I00
sg10
(lp1849
sg12
(lp1850
(S'TPreprocessor'
p1851
S'preprocessor'
p1852
g1852
S'preprocesses the exmaples (see the manual for restrictions!)'
p1853
I0
I0
I00
Ntp1854
a(S'bool'
p1855
S'resultInOriginalDomain'
p1856
S'result_in_original_domain'
p1857
S'tells whether the resulting DomainContingency should consist of original attributes'
p1858
I0
I0
I01
Ntp1859
ag28
asg29
(dp1860
sbsS'TFloatFloatList'
p1861
(ipyprops
ClassDefinition
p1862
(dp1863
g4
I0
sg5
I01
sg6
g1861
sg7
g136
sg9
I0
sg10
(lp1864
sg12
(lp1865
sg29
(dp1866
sbsS'TMeasureAttribute_MSE'
p1867
(i__main__
ClassDefinition
p1868
(dp1869
g4
I1
sg5
I01
sg6
g1867
sg7
S'TMeasureAttribute'
p1870
sg9
I00
sg10
(lp1871
sg12
(lp1872
(S'float'
p1873
g1163
g1163
S'm for m-estimate'
p1874
I0
I0
I01
Ntp1875
a(S'int'
p1876
S'unknownsTreatment'
p1877
S'unknowns_treatment'
p1878
S' treatment of unknown values'
p1879
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p1880
tp1881
ag878
ag883
ag888
ag893
asg29
(dp1882
sbsS'TRuleList'
p1883
(ipyprops
ClassDefinition
p1884
(dp1885
g4
I0
sg5
I01
sg6
g1883
sg7
g136
sg9
I0
sg10
(lp1886
sg12
(lp1887
sg29
(dp1888
sbsS'TStopIMClusteringByAssessor_noBigChange'
p1889
(i__main__
ClassDefinition
p1890
(dp1891
g4
I1
sg5
I01
sg6
g1889
sg7
S'TStopIMClusteringByAssessor'
p1892
sg9
I00
sg10
(lp1893
sg12
(lp1894
sg29
(dp1895
sbsS'TItemsetsSparseInducer'
p1896
(i__main__
ClassDefinition
p1897
(dp1898
g4
I1
sg5
I01
sg6
g1896
sg7
S'TOrange'
p1899
sg9
I00
sg10
(lp1900
sg12
(lp1901
(S'int'
p1902
S'maxItemSets'
p1903
S'max_item_sets'
p1904
S'maximal number of itemsets (increase if you want)'
p1905
I0
I0
I01
Ntp1906
a(S'float'
p1907
S'support'
p1908
g1908
S'required support'
p1909
I0
I0
I01
Ntp1910
a(S'bool'
p1911
S'storeExamples'
p1912
S'store_examples'
p1913
S'stores examples corresponding to itemsets'
p1914
I0
I0
I01
Ntp1915
asg29
(dp1916
sbsS'TPreprocessor_dropMissing'
p1917
(i__main__
ClassDefinition
p1918
(dp1919
g4
I1
sg5
I01
sg6
g1917
sg7
S'TPreprocessor'
p1920
sg9
I00
sg10
(lp1921
sg12
(lp1922
sg29
(dp1923
sbsS'TDomainContinuizer'
p1924
(i__main__
ClassDefinition
p1925
(dp1926
g4
I1
sg5
I01
sg6
g1924
sg7
S'TOrange'
p1927
sg9
I00
sg10
(lp1928
sg12
(lp1929
(S'bool'
p1930
S'zeroBased'
p1931
S'zero_based'
p1932
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p1933
I0
I0
I01
Ntp1934
a(S'int'
p1935
S'continuousTreatment'
p1936
S'continuous_treatment'
p1937
S' 0-leave as they are, 1-divide by span, 1-normalize'
p1938
I0
I0
I01
S'DomainContinuizer_ContinuousTreatment'
p1939
tp1940
a(S'int'
p1941
S'multinomialTreatment'
p1942
S'multinomial_treatment'
p1943
S' 0-lowest value, 1-most frequent (or baseValue), 2-n binary, 3-ignore, 4-ignore all discrete, 5-error, 6-convert as ordinal, 7-ordinal,normalized'
p1944
I0
I0
I01
S'DomainContinuizer_MultinomialTreatment'
p1945
tp1946
a(S'int'
p1947
S'classTreatment'
p1948
S'class_treatment'
p1949
S' 3-leave as is unless target is given, 5-error if not continuous nor binary nor target given, 6-convert as ordinal (unless target given)'
p1950
I0
I0
I01
S'DomainContinuizer_ClassTreatment'
p1951
tp1952
asg29
(dp1953
S'MultinomialTreatment'
p1954
(lp1955
(S'LowestIsBase'
p1956
I0
tp1957
a(S'FrequentIsBase'
p1958
I1
tp1959
a(S'NValues'
p1960
I2
tp1961
a(S'Ignore'
p1962
I3
tp1963
a(S'IgnoreAllDiscrete'
p1964
I4
tp1965
a(S'ReportError'
p1966
I5
tp1967
a(S'AsOrdinal'
p1968
I6
tp1969
a(S'AsNormalizedOrdinal'
p1970
I7
tp1971
asS'ClassTreatment'
p1972
(lp1973
(S'LeaveUnlessTarget'
p1974
S'3'
p1975
tp1976
a(S'ErrorIfCannotHandle'
p1977
S'5'
p1978
tp1979
a(S'AsOrdinal'
p1980
S'6'
p1981
tp1982
asS'ContinuousTreatment'
p1983
(lp1984
(S'Leave'
p1985
I0
tp1986
a(S'NormalizeBySpan'
p1987
I1
tp1988
a(S'NormalizeByVariance'
p1989
I2
tp1990
assbsS'TNormalizeContinuous'
p1991
(i__main__
ClassDefinition
p1992
(dp1993
g4
I1
sg5
I01
sg6
g1991
sg7
S'TTransformValue'
p1994
sg9
I00
sg10
(lp1995
sg12
(lp1996
(S'float'
p1997
S'average'
p1998
g1998
S'the average value'
p1999
I0
I0
I01
Ntp2000
a(S'float'
p2001
S'span'
p2002
g2002
S'the value span'
p2003
I0
I0
I01
Ntp2004
ag776
asg29
(dp2005
sbsS'TSimpleTreeClassifier'
p2006
(i__main__
ClassDefinition
p2007
(dp2008
g4
I1
sg5
I01
sg6
g2006
sg7
S'TClassifier'
p2009
sg9
I00
sg10
(lp2010
sg12
(lp2011
g94
ag99
asg29
(dp2012
sbsS'TBiModalDiscretizer'
p2013
(i__main__
ClassDefinition
p2014
(dp2015
g4
I1
sg5
I01
sg6
g2013
sg7
S'TDiscretizer'
p2016
sg9
I00
sg10
(lp2017
sg12
(lp2018
(S'float'
p2019
S'low'
p2020
g2020
S'low threshold'
p2021
I0
I0
I01
Ntp2022
a(S'float'
p2023
S'high'
p2024
g2024
S'high threshold'
p2025
I0
I0
I01
Ntp2026
ag776
asg29
(dp2027
sbsS'TExamplesDistanceConstructor_Euclidean'
p2028
(i__main__
ClassDefinition
p2029
(dp2030
g4
I1
sg5
I01
sg6
g2028
sg7
S'TExamplesDistanceConstructor_Normalized'
p2031
sg9
I00
sg10
(lp2032
sg12
(lp2033
(S'bool'
p2034
S'normalize'
p2035
g2035
S'tells whether to normalize distances between attributes'
p2036
I0
I0
I01
Ntp2037
a(S'bool'
p2038
S'ignoreUnknowns'
p2039
S'ignore_unknowns'
p2040
S'if true (default: false) unknown values are ignored in computation'
p2041
I0
I0
I01
Ntp2042
ag1318
asg29
(dp2043
sbsS'TContingencyAttrAttr'
p2044
(i__main__
ClassDefinition
p2045
(dp2046
g4
I1
sg5
I01
sg6
g2044
sg7
S'TContingency'
p2047
sg9
I00
sg10
(lp2048
sg12
(lp2049
g1610
ag1615
ag1621
ag1626
ag1631
ag1636
asg29
(dp2050
sbsS'TRuleBeamRefiner_Selector'
p2051
(i__main__
ClassDefinition
p2052
(dp2053
g4
I1
sg5
I01
sg6
g2051
sg7
S'TRuleBeamRefiner'
p2054
sg9
I00
sg10
(lp2055
sg12
(lp2056
(S'TDiscretization'
p2057
S'discretization'
p2058
g2058
S'discretization for continuous attributes'
p2059
I0
I0
I00
Ntp2060
asg29
(dp2061
sbsS'TProbabilityEstimatorConstructor_Laplace'
p2062
(i__main__
ClassDefinition
p2063
(dp2064
g4
I1
sg5
I01
sg6
g2062
sg7
S'TProbabilityEstimatorConstructor'
p2065
sg9
I00
sg10
(lp2066
sg12
(lp2067
(S'float'
p2068
S'l'
p2069
g2069
S'number of examples added to each class (default: 1)'
p2070
I0
I0
I01
Ntp2071
a(S'bool'
p2072
S'renormalize'
p2073
g2073
S'computes the estimate on the original (not the normalized) distribution'
p2074
I0
I0
I01
Ntp2075
asg29
(dp2076
sbsS'TExamplesDistance_Relief'
p2077
(i__main__
ClassDefinition
p2078
(dp2079
g4
I1
sg5
I01
sg6
g2077
sg7
S'TExamplesDistance'
p2080
sg9
I00
sg10
(lp2081
sg12
(lp2082
(S'TDomainDistributions'
p2083
S'distributions'
p2084
g2084
S"distributions of attributes' values"
p2085
I0
I0
I00
Ntp2086
a(S'TAttributedFloatList'
p2087
S'averages'
p2088
g2088
S'average values of attributes'
p2089
I0
I0
I00
Ntp2090
a(S'TAttributedFloatList'
p2091
S'normalizations'
p2092
g2092
S"ranges of attributes' values"
p2093
I0
I0
I00
Ntp2094
a(S'TAttributedFloatList'
p2095
S'bothSpecial'
p2096
S'both_special'
p2097
S'distance if both values of both attributes are undefined'
p2098
I0
I0
I00
Ntp2099
asg29
(dp2100
sbsS'TExamplesDistance_Manhattan'
p2101
(i__main__
ClassDefinition
p2102
(dp2103
g4
I1
sg5
I01
sg6
g2101
sg7
S'TExamplesDistance_Normalized'
p2104
sg9
I00
sg10
(lp2105
sg12
(lp2106
g447
ag451
ag455
ag459
ag464
ag468
ag473
asg29
(dp2107
sbsS'TExamplesDistanceConstructor_Manhattan'
p2108
(i__main__
ClassDefinition
p2109
(dp2110
g4
I1
sg5
I01
sg6
g2108
sg7
S'TExamplesDistanceConstructor_Normalized'
p2111
sg9
I00
sg10
(lp2112
sg12
(lp2113
g2037
ag2042
ag1318
asg29
(dp2114
sbsS'TStringList'
p2115
(ipyprops
ClassDefinition
p2116
(dp2117
g4
I0
sg5
I01
sg6
g2115
sg7
g136
sg9
I0
sg10
(lp2118
sg12
(lp2119
sg29
(dp2120
sbsS'TTreeDescender'
p2121
(i__main__
ClassDefinition
p2122
(dp2123
g4
I1
sg5
I01
sg6
g2121
sg7
S'TOrange'
p2124
sg9
I01
sg10
(lp2125
sg12
(lp2126
sg29
(dp2127
sbsS'TColumnAssessor_Measure'
p2128
(i__main__
ClassDefinition
p2129
(dp2130
g4
I1
sg5
I01
sg6
g2128
sg7
S'TColumnAssessor'
p2131
sg9
I00
sg10
(lp2132
sg12
(lp2133
(S'TMeasureAttribute'
p2134
S'measure'
p2135
g2135
S'attribute quality measure'
p2136
I0
I0
I00
Ntp2137
asg29
(dp2138
sbsS'TIMBlurer'
p2139
(i__main__
ClassDefinition
p2140
(dp2141
g4
I1
sg5
I01
sg6
g2139
sg7
S'TIMByRowsPreprocessor'
p2142
sg9
I00
sg10
(lp2143
sg12
(lp2144
(S'float'
p2145
S'weight'
p2146
g2146
S'weight of neighbours'
p2147
I0
I0
I01
Ntp2148
a(S'float'
p2149
S'origWeight'
p2150
S'orig_weight'
p2151
S'weight of original row'
p2152
I0
I0
I01
Ntp2153
a(S'TFloatList'
p2154
S'attrWeights'
p2155
S'attr_weights'
p2156
S'weights by individual (different) attributes'
p2157
I0
I0
I00
Ntp2158
a(S'bool'
p2159
S'adjustOrigWeight'
p2160
S'adjust_orig_weight'
p2161
S'uses 1-weight(s) for weight of original row'
p2162
I0
I0
I01
Ntp2163
a(S'bool'
p2164
S'onlyEmpty'
p2165
S'only_empty'
p2166
S'blurs only empty cells'
p2167
I0
I0
I01
Ntp2168
asg29
(dp2169
sbsS'TFilter'
p2170
(i__main__
ClassDefinition
p2171
(dp2172
g4
I1
sg5
I01
sg6
g2170
sg7
S'TOrange'
p2173
sg9
I01
sg10
(lp2174
sg12
(lp2175
g662
ag666
asg29
(dp2176
sbsS'TC45Learner'
p2177
(i__main__
ClassDefinition
p2178
(dp2179
g4
I1
sg5
I01
sg6
g2177
sg7
S'TLearner'
p2180
sg9
I00
sg10
(lp2181
sg12
(lp2182
(S'bool'
p2183
S'gainRatio'
p2184
(g2184
S'g'
p2185
tp2186
S' use gain ratio (instead of information gain)'
p2187
I0
I0
I01
Ntp2188
a(S'bool'
p2189
S'subset'
p2190
(g2190
S's'
p2191
tp2192
S' use subsetting'
p2193
I0
I0
I01
Ntp2194
a(S'bool'
p2195
S'batch'
p2196
(g2196
S'b'
p2197
tp2198
S' batch'
p2199
I0
I0
I01
Ntp2200
a(S'bool'
p2201
S'probThresh'
p2202
(g2202
S'p'
p2203
tp2204
S' probability threshold'
p2205
I0
I0
I01
Ntp2206
a(S'int'
p2207
S'minObjs'
p2208
(g2208
g1163
tp2209
S' minimal number of objects (examples) in leaves'
p2210
I0
I0
I01
Ntp2211
a(S'int'
p2212
S'window'
p2213
(g2213
S'w'
p2214
tp2215
S' window'
p2216
I0
I0
I01
Ntp2217
a(S'int'
p2218
S'increment'
p2219
(g2219
S'i'
p2220
tp2221
S' increment'
p2222
I0
I0
I01
Ntp2223
a(S'float'
p2224
S'cf'
p2225
(g2225
S'c'
p2226
tp2227
S' cf'
p2228
I0
I0
I01
Ntp2229
a(S'int'
p2230
S'trials'
p2231
(g2231
S't'
p2232
tp2233
S' trials'
p2234
I0
I0
I01
Ntp2235
a(S'bool'
p2236
S'prune'
p2237
g2237
S'return pruned tree'
p2238
I0
I0
I01
Ntp2239
a(S'bool'
p2240
S'convertToOrange'
p2241
S'convert_to_orange'
p2242
S'return TreeClassifier instead of C45TreeClassifier'
p2243
I0
I0
I01
Ntp2244
a(S'bool'
p2245
S'storeExamples'
p2246
S'store_examples'
p2247
S'stores examples when (if) converting to TreeClassifier'
p2248
I0
I0
I01
Ntp2249
a(S'bool'
p2250
S'storeContingencies'
p2251
S'store_contingencies'
p2252
S'stores contingencies when (if) converting to TreeClassifier'
p2253
I0
I0
I01
Ntp2254
ag110
asg29
(dp2255
sbsS'TAttributedBoolList'
p2256
(ipyprops
ClassDefinition
p2257
(dp2258
g4
I0
sg5
I01
sg6
g2256
sg7
S'TBoolList'
p2259
sg9
I0
sg10
(lp2260
sg12
(lp2261
sg29
(dp2262
sbsS'TFeatureByMinComplexity'
p2263
(i__main__
ClassDefinition
p2264
(dp2265
g4
I1
sg5
I01
sg6
g2263
sg7
S'TFeatureInducer'
p2266
sg9
I00
sg10
(lp2267
sg12
(lp2268
(S'TColorIG'
p2269
S'colorIG'
p2270
S'color_IG'
p2271
S'graph coloring algorithm'
p2272
I0
I0
I00
Ntp2273
a(S'int'
p2274
S'completion'
p2275
g2275
S' decides how to determine the class for points not covered by any cluster'
p2276
I0
I0
I01
S'FeatureByMinComplexity_Completion'
p2277
tp2278
asg29
(dp2279
S'Completion'
p2280
(lp2281
(S'NoCompletion'
p2282
S'completion_no'
p2283
tp2284
a(S'CompletionByDefault'
p2285
S'completion_default'
p2286
tp2287
a(S'CompletionByBayes'
p2288
S'completion_bayes'
p2289
tp2290
assbsS'TPreprocessor_dropMissingClasses'
p2291
(i__main__
ClassDefinition
p2292
(dp2293
g4
I1
sg5
I01
sg6
g2291
sg7
S'TPreprocessor'
p2294
sg9
I00
sg10
(lp2295
sg12
(lp2296
sg29
(dp2297
sbsS'TkNNClassifier'
p2298
(i__main__
ClassDefinition
p2299
(dp2300
g4
I1
sg5
I01
sg6
g2298
sg7
S'TClassifierFD'
p2301
sg9
I00
sg10
(lp2302
sg12
(lp2303
(S'TFindNearest'
p2304
S'findNearest'
p2305
S'find_nearest'
p2306
g571
I0
I0
I00
Ntp2307
a(S'float'
p2308
g1159
g1159
S'number of neighbours (0 for sqrt of #examples)'
p2309
I0
I0
I01
Ntp2310
a(S'bool'
p2311
S'rankWeight'
p2312
S'rank_weight'
p2313
S'enable weighting by ranks'
p2314
I0
I0
I01
Ntp2315
a(S'int'
p2316
S'weightID'
p2317
S'weight_ID'
p2318
S'id of meta-attribute with weight'
p2319
I0
I0
I01
Ntp2320
a(S'int'
p2321
S'nExamples'
p2322
S'n_examples'
p2323
S'the number of learning examples '
p2324
I0
I0
I01
Ntp2325
ag284
ag94
ag99
asg29
(dp2326
sbsS'TMeasureAttribute_info'
p2327
(i__main__
ClassDefinition
p2328
(dp2329
g4
I1
sg5
I01
sg6
g2327
sg7
S'TMeasureAttributeFromProbabilities'
p2330
sg9
I00
sg10
(lp2331
sg12
(lp2332
g862
ag867
ag873
ag878
ag883
ag888
ag893
asg29
(dp2333
sbsS'TRuleBeamCandidateSelector_TakeAll'
p2334
(i__main__
ClassDefinition
p2335
(dp2336
g4
I1
sg5
I01
sg6
g2334
sg7
S'TRuleBeamCandidateSelector'
p2337
sg9
I00
sg10
(lp2338
sg12
(lp2339
sg29
(dp2340
sbsS'TExamplesDistanceConstructor_Relief'
p2341
(i__main__
ClassDefinition
p2342
(dp2343
g4
I1
sg5
I01
sg6
g2341
sg7
S'TExamplesDistanceConstructor'
p2344
sg9
I00
sg10
(lp2345
sg12
(lp2346
g1318
asg29
(dp2347
sbsS'TOrange'
p2348
(i__main__
ClassDefinition
p2349
(dp2350
g4
I1
sg5
I01
sg6
g2348
sg7
Nsg9
I00
sg10
(lp2351
sg12
(lp2352
sg29
(dp2353
sbsS'TRuleValidator'
p2354
(i__main__
ClassDefinition
p2355
(dp2356
g4
I1
sg5
I01
sg6
g2354
sg7
S'TOrange'
p2357
sg9
I01
sg10
(lp2358
sg12
(lp2359
sg29
(dp2360
sbsS'TColorIG'
p2361
(i__main__
ClassDefinition
p2362
(dp2363
g4
I1
sg5
I01
sg6
g2361
sg7
S'TOrange'
p2364
sg9
I01
sg10
(lp2365
sg12
(lp2366
sg29
(dp2367
sbsS'TRuleValidator_Python'
p2368
(i__main__
ClassDefinition
p2369
(dp2370
g4
I1
sg5
I01
sg6
g2368
sg7
S'TRuleValidator'
p2371
sg9
I00
sg10
(lp2372
sg12
(lp2373
sg29
(dp2374
sbsS'TSubsetsGenerator_constSize_iterator'
p2375
(i__main__
ClassDefinition
p2376
(dp2377
g4
I1
sg5
I01
sg6
g2375
sg7
S'TSubsetsGenerator_iterator'
p2378
sg9
I00
sg10
(lp2379
sg12
(lp2380
(S'bool'
p2381
S'moreToCome'
p2382
S'more_to_come'
p2383
g571
I01
I0
I01
Ntp2384
ag503
asg29
(dp2385
sbsS'TIMByRowsBySorting'
p2386
(i__main__
ClassDefinition
p2387
(dp2388
g4
I1
sg5
I01
sg6
g2386
sg7
S'TIMByRowsConstructor'
p2389
sg9
I00
sg10
(lp2390
sg12
(lp2391
sg29
(dp2392
sbsS'TAssociationLearner'
p2393
(i__main__
ClassDefinition
p2394
(dp2395
g4
I1
sg5
I01
sg6
g2393
sg7
S'TLearner'
p2396
sg9
I00
sg10
(lp2397
sg12
(lp2398
(S'float'
p2399
S'confidence'
p2400
g2400
S'required confidence'
p2401
I0
I0
I01
Ntp2402
a(S'float'
p2403
S'support'
p2404
g2404
S'required support'
p2405
I0
I0
I01
Ntp2406
a(S'int'
p2407
S'voteWeight'
p2408
S'vote_weight'
p2409
S'vote weight (s=support, c=confidence, p=product)'
p2410
I0
I0
I01
Ntp2411
a(S'int'
p2412
S'maxItemSets'
p2413
S'max_item_sets'
p2414
S'maximal number of itemsets (increase if you want)'
p2415
I0
I0
I01
Ntp2416
ag110
asg29
(dp2417
sbsS'TRuleBeamInitializer_Python'
p2418
(i__main__
ClassDefinition
p2419
(dp2420
g4
I1
sg5
I01
sg6
g2418
sg7
S'TRuleBeamInitializer'
p2421
sg9
I00
sg10
(lp2422
sg12
(lp2423
sg29
(dp2424
sbsS'TDistributionAssessor'
p2425
(i__main__
ClassDefinition
p2426
(dp2427
g4
I1
sg5
I01
sg6
g2425
sg7
S'TOrange'
p2428
sg9
I01
sg10
(lp2429
sg12
(lp2430
sg29
(dp2431
sbsS'TRuleCovererAndRemover_Python'
p2432
(i__main__
ClassDefinition
p2433
(dp2434
g4
I1
sg5
I01
sg6
g2432
sg7
S'TRuleCovererAndRemover'
p2435
sg9
I00
sg10
(lp2436
sg12
(lp2437
sg29
(dp2438
sbsS'TMeasureAttribute_gainRatioA'
p2439
(i__main__
ClassDefinition
p2440
(dp2441
g4
I1
sg5
I01
sg6
g2439
sg7
S'TMeasureAttribute_gainRatio'
p2442
sg9
I00
sg10
(lp2443
sg12
(lp2444
g862
ag867
ag873
ag878
ag883
ag888
ag893
asg29
(dp2445
sbsS'TConditionalProbabilityEstimatorConstructor_ByRows'
p2446
(i__main__
ClassDefinition
p2447
(dp2448
g4
I1
sg5
I01
sg6
g2446
sg7
S'TConditionalProbabilityEstimatorConstructor'
p2449
sg9
I00
sg10
(lp2450
sg12
(lp2451
(S'TProbabilityEstimatorConstructor'
p2452
S'estimatorConstructor'
p2453
S'estimator_constructor'
p2454
S'ProbabilityEstimator to be used '
p2455
I0
I0
I00
Ntp2456
asg29
(dp2457
sbsS'TCartesianClassifier'
p2458
(i__main__
ClassDefinition
p2459
(dp2460
g4
I1
sg5
I01
sg6
g2458
sg7
S'TClassifierFD'
p2461
sg9
I00
sg10
(lp2462
sg12
(lp2463
g284
ag94
ag99
asg29
(dp2464
sbsS'TLinearClassifier'
p2465
(i__main__
ClassDefinition
p2466
(dp2467
g4
I1
sg5
I01
sg6
g2465
sg7
S'TClassifierFD'
p2468
sg9
I00
sg10
(lp2469
sg12
(lp2470
(S'TFloatListList'
p2471
S'weights'
p2472
g2472
S'Computed feature weights'
p2473
I0
I0
I00
Ntp2474
a(S'TExampleTable'
p2475
S'examples'
p2476
g2476
S'Examples used to train the classifier'
p2477
I0
I0
I00
Ntp2478
ag284
ag94
ag99
asg29
(dp2479
sbsS'TTreeDescender_UnknownToBranch'
p2480
(i__main__
ClassDefinition
p2481
(dp2482
g4
I1
sg5
I01
sg6
g2480
sg7
g1543
sg9
I0
sg10
(lp2483
sg12
(lp2484
sg29
(dp2485
sbsS'TSubsetsGenerator_constSize'
p2486
(i__main__
ClassDefinition
p2487
(dp2488
g4
I1
sg5
I01
sg6
g2486
sg7
S'TSubsetsGenerator'
p2489
sg9
I00
sg10
(lp2490
sg12
(lp2491
(S'int'
p2492
S'B'
p2493
g2493
S'subset size'
p2494
I0
I0
I01
Ntp2495
ag200
asg29
(dp2496
sbsS'TColorIG_MCF'
p2497
(i__main__
ClassDefinition
p2498
(dp2499
g4
I1
sg5
I01
sg6
g2497
sg7
S'TColorIG'
p2500
sg9
I00
sg10
(lp2501
sg12
(lp2502
sg29
(dp2503
sbsS'TBasicAttrStat'
p2504
(i__main__
ClassDefinition
p2505
(dp2506
g4
I1
sg5
I01
sg6
g2504
sg7
S'TOrange'
p2507
sg9
I00
sg10
(lp2508
sg12
(lp2509
(S'float'
p2510
S'sum'
p2511
g2511
S'sum of values'
p2512
I0
I0
I01
Ntp2513
a(S'float'
p2514
S'sum2'
p2515
g2515
S'sum of squares of values'
p2516
I0
I0
I01
Ntp2517
a(S'float'
p2518
S'n'
p2519
g2519
S'number of examples for which the attribute is defined'
p2520
I0
I0
I01
Ntp2521
a(S'float'
p2522
S'min'
p2523
g2523
S'the lowest value of the attribute'
p2524
I0
I0
I01
Ntp2525
a(S'float'
p2526
S'max'
p2527
g2527
S'the highest value of the attribute'
p2528
I0
I0
I01
Ntp2529
a(S'float'
p2530
S'avg'
p2531
g2531
S'the average value of the attribute'
p2532
I0
I0
I01
Ntp2533
a(S'float'
p2534
S'dev'
p2535
g2535
S'the deviation of the value of the attribute'
p2536
I0
I0
I01
Ntp2537
a(S'TVariable'
p2538
S'variable'
p2539
g2539
S'the attribute to which the data applies'
p2540
I0
I0
I00
Ntp2541
a(S'bool'
p2542
S'holdRecomputation'
p2543
S'hold_recomputation'
p2544
S'temporarily disables recomputation of avg and dev while adding values'
p2545
I0
I0
I01
Ntp2546
asg29
(dp2547
sbsS'TTreeSplitConstructor_Attribute'
p2548
(i__main__
ClassDefinition
p2549
(dp2550
g4
I1
sg5
I01
sg6
g2548
sg7
S'TTreeSplitConstructor_Measure'
p2551
sg9
I00
sg10
(lp2552
sg12
(lp2553
g1253
ag1258
ag754
asg29
(dp2554
sbsS'TRemoveRedundantByInduction'
p2555
(i__main__
ClassDefinition
p2556
(dp2557
g4
I1
sg5
I01
sg6
g2555
sg7
S'TRemoveRedundant'
p2558
sg9
I00
sg10
(lp2559
sg12
(lp2560
(S'TFeatureInducer'
p2561
S'featureReducer'
p2562
S'feature_reducer'
p2563
S'feature construction algorithm'
p2564
I0
I0
I00
Ntp2565
a(S'TMeasureAttribute'
p2566
S'measure'
p2567
g2567
S'measure for initial ordering of attributes'
p2568
I0
I0
I00
Ntp2569
a(S'TDiscretization'
p2570
S'discretization'
p2571
g2571
S'discretization method'
p2572
I0
I0
I00
Ntp2573
ag1296
asg29
(dp2574
sbsS'TFilter_conjunction'
p2575
(i__main__
ClassDefinition
p2576
(dp2577
g4
I1
sg5
I01
sg6
g2575
sg7
S'TFilter'
p2578
sg9
I00
sg10
(lp2579
sg12
(lp2580
(S'TFilterList'
p2581
S'filters'
p2582
g2582
S'a list of filters;'
p2583
I0
I0
I00
Ntp2584
ag662
ag666
asg29
(dp2585
sbsS'TExampleForMissing'
p2586
(i__main__
ClassDefinition
p2587
(dp2588
g4
I1
sg5
I01
sg6
g2586
sg7
S'TExample'
p2589
sg9
I00
sg10
(lp2590
sg12
(lp2591
(S'TEFMDataDescription'
p2592
S'dataDescription'
p2593
S'data_description'
p2594
S'data description'
p2595
I0
I0
I00
Ntp2596
a(S'TDomain'
p2597
S'domain'
p2598
g2598
S"Example's domain"
p2599
I01
I0
I00
Ntp2600
a(S'int'
p2601
S'id'
p2602
g2602
g571
I0
I0
I01
Ntp2603
asg29
(dp2604
sbsS'TRuleBeamFilter'
p2605
(i__main__
ClassDefinition
p2606
(dp2607
g4
I1
sg5
I01
sg6
g2605
sg7
S'TOrange'
p2608
sg9
I01
sg10
(lp2609
sg12
(lp2610
sg29
(dp2611
sbsS'TBayesClassifier'
p2612
(i__main__
ClassDefinition
p2613
(dp2614
g4
I1
sg5
I01
sg6
g2612
sg7
S'TClassifierFD'
p2615
sg9
I00
sg10
(lp2616
sg12
(lp2617
(S'TDistribution'
p2618
S'distribution'
p2619
g2619
S'class distributions (P(C))'
p2620
I0
I0
I00
Ntp2621
a(S'TDomainContingency'
p2622
S'conditionalDistributions'
p2623
S'conditional_distributions'
p2624
S'conditional distributions, P(C|A)'
p2625
I0
I0
I00
Ntp2626
a(S'TProbabilityEstimator'
p2627
S'estimator'
p2628
g2628
S'a probability estimator for P(C)'
p2629
I0
I0
I00
Ntp2630
a(S'TConditionalProbabilityEstimatorList'
p2631
S'conditionalEstimators'
p2632
S'conditional_estimators'
p2633
S'a probability estimator for P(C|A)'
p2634
I0
I0
I00
Ntp2635
a(S'bool'
p2636
S'normalizePredictions'
p2637
S'normalize_predictions'
p2638
S'if true, classifier will normalize predictions'
p2639
I0
I0
I01
Ntp2640
a(S'float'
p2641
S'threshold'
p2642
g2642
S'threshold probability for class 1 (for binary classes only)'
p2643
I0
I0
I01
Ntp2644
ag284
ag94
ag99
asg29
(dp2645
sbsS'TGraph'
p2646
(i__main__
ClassDefinition
p2647
(dp2648
g4
I1
sg5
I01
sg6
g2646
sg7
S'TOrange'
p2649
sg9
I01
sg10
(lp2650
sg12
(lp2651
g1434
ag1439
ag1443
asg29
(dp2652
sbsS'TPreprocessor_addClassWeight'
p2653
(i__main__
ClassDefinition
p2654
(dp2655
g4
I1
sg5
I01
sg6
g2653
sg7
S'TPreprocessor'
p2656
sg9
I00
sg10
(lp2657
sg12
(lp2658
(S'TFloatList'
p2659
S'classWeights'
p2660
S'class_weights'
p2661
S'weights of examples of particular classes'
p2662
I0
I0
I00
Ntp2663
a(S'bool'
p2664
S'equalize'
p2665
g2665
S'reweight examples to equalize class proportions'
p2666
I0
I0
I01
Ntp2667
a(S'TRandomGenerator'
p2668
S'randomGenerator'
p2669
S'random_generator'
p2670
S'random number generator'
p2671
I0
I0
I00
Ntp2672
asg29
(dp2673
sbsS'THierarchicalClusterList'
p2674
(ipyprops
ClassDefinition
p2675
(dp2676
g4
I0
sg5
I01
sg6
g2674
sg7
g136
sg9
I0
sg10
(lp2677
sg12
(lp2678
sg29
(dp2679
sbsS'TStopIMClusteringByAssessor'
p2680
(i__main__
ClassDefinition
p2681
(dp2682
g4
I1
sg5
I01
sg6
g2680
sg7
S'TOrange'
p2683
sg9
I01
sg10
(lp2684
sg12
(lp2685
sg29
(dp2686
sbsS'TValueFilter_continuous'
p2687
(i__main__
ClassDefinition
p2688
(dp2689
g4
I1
sg5
I01
sg6
g2687
sg7
S'TValueFilter'
p2690
sg9
I00
sg10
(lp2691
sg12
(lp2692
(S'float'
p2693
S'min'
p2694
(g2694
S'ref'
p2695
tp2696
S' reference value (lower bound for interval operators)'
p2697
I0
I0
I01
Ntp2698
a(S'float'
p2699
S'max'
p2700
g2700
S'upper bound for interval operators'
p2701
I0
I0
I01
Ntp2702
a(S'bool'
p2703
S'outside'
p2704
g2704
S'obsolete: if true, the filter accepts the values outside the interval, not inside'
p2705
I0
I0
I01
Ntp2706
a(S'int'
p2707
S'oper'
p2708
g2708
S' operator'
p2709
I0
I0
I01
S'ValueFilter_Operator'
p2710
tp2711
ag1012
ag1017
asg29
(dp2712
sbsS'TAssociationRule'
p2713
(i__main__
ClassDefinition
p2714
(dp2715
g4
I1
sg5
I01
sg6
g2713
sg7
S'TOrange'
p2716
sg9
I00
sg10
(lp2717
sg12
(lp2718
(S'TExample'
p2719
S'left'
p2720
g2720
S'left side of the rule'
p2721
I01
I0
I00
Ntp2722
a(S'TExample'
p2723
S'right'
p2724
g2724
S'right side of the rule'
p2725
I01
I0
I00
Ntp2726
a(S'float'
p2727
S'support'
p2728
g2728
S'support for the rule'
p2729
I0
I0
I01
Ntp2730
a(S'float'
p2731
S'confidence'
p2732
g2732
S'confidence of the rule'
p2733
I0
I0
I01
Ntp2734
a(S'float'
p2735
S'coverage'
p2736
g2736
S"rule's coverage"
p2737
I0
I0
I01
Ntp2738
a(S'float'
p2739
S'strength'
p2740
g2740
S"rule's strength"
p2741
I0
I0
I01
Ntp2742
a(S'float'
p2743
S'lift'
p2744
g2744
S"rule's lift"
p2745
I0
I0
I01
Ntp2746
a(S'float'
p2747
S'leverage'
p2748
g2748
S"rule's leverage"
p2749
I0
I0
I01
Ntp2750
a(S'float'
p2751
S'nAppliesLeft'
p2752
S'n_applies_left'
p2753
S"number of examples covered by the rule's left side"
p2754
I0
I0
I01
Ntp2755
a(S'float'
p2756
S'nAppliesRight'
p2757
S'n_applies_right'
p2758
S"number of examples covered by the rule's right side"
p2759
I0
I0
I01
Ntp2760
a(S'float'
p2761
S'nAppliesBoth'
p2762
S'n_applies_both'
p2763
S'number of examples covered by the rule'
p2764
I0
I0
I01
Ntp2765
a(S'float'
p2766
S'nExamples'
p2767
S'n_examples'
p2768
S'number of learning examples'
p2769
I0
I0
I01
Ntp2770
a(S'int'
p2771
S'nLeft'
p2772
S'n_left'
p2773
S"number of items on the rule's left side"
p2774
I01
I0
I01
Ntp2775
a(S'int'
p2776
S'nRight'
p2777
S'n_right'
p2778
S"number of items on the rule's right side"
p2779
I01
I0
I01
Ntp2780
a(S'TExampleTable'
p2781
S'examples'
p2782
g2782
S'examples which the rule was built from'
p2783
I01
I0
I00
Ntp2784
a(S'TIntList'
p2785
S'matchLeft'
p2786
S'match_left'
p2787
S'indices of examples that match the left side of the rule'
p2788
I01
I0
I00
Ntp2789
a(S'TIntList'
p2790
S'matchBoth'
p2791
S'match_both'
p2792
S'indices to examples that match both sides of the rule'
p2793
I01
I0
I00
Ntp2794
asg29
(dp2795
sbsS'TValueFilter'
p2796
(i__main__
ClassDefinition
p2797
(dp2798
g4
I1
sg5
I01
sg6
g2796
sg7
S'TOrange'
p2799
sg9
I01
sg10
(lp2800
sg12
(lp2801
g1012
ag1017
asg29
(dp2802
S'Operator'
p2803
(lp2804
(S'None'
p2805
I0
tp2806
a(S'Equal'
p2807
I1
tp2808
a(S'NotEqual'
p2809
I2
tp2810
a(S'Less'
p2811
I3
tp2812
a(S'LessEqual'
p2813
I4
tp2814
a(S'Greater'
p2815
I5
tp2816
a(S'GreaterEqual'
p2817
I6
tp2818
a(S'Between'
p2819
I7
tp2820
a(S'Outside'
p2821
I8
tp2822
a(S'Contains'
p2823
I9
tp2824
a(S'NotContains'
p2825
I10
tp2826
a(S'BeginsWith'
p2827
I11
tp2828
a(S'EndsWith'
p2829
I12
tp2830
a(S'Listed'
p2831
I13
tp2832
assbsS'TClustersFromDistributions'
p2833
(i__main__
ClassDefinition
p2834
(dp2835
g4
I1
sg5
I01
sg6
g2833
sg7
S'TOrange'
p2836
sg9
I01
sg10
(lp2837
sg12
(lp2838
sg29
(dp2839
sbsS'TVariable'
p2840
(i__main__
ClassDefinition
p2841
(dp2842
g4
I1
sg5
I01
sg6
g2840
sg7
S'TOrange'
p2843
sg9
I01
sg10
(lp2844
sg12
(lp2845
g326
ag330
ag334
ag339
ag344
ag349
ag354
asg29
(dp2846
S'Type'
p2847
(lp2848
(S'None'
p2849
S'(int)TValue::NONE'
p2850
tp2851
a(S'Discrete'
p2852
S'(int)TValue::INTVAR'
p2853
tp2854
a(S'Continuous'
p2855
S'(int)TValue::FLOATVAR'
p2856
tp2857
a(S'Other'
p2858
S'(int)(TValue::FLOATVAR+1)'
p2859
tp2860
a(S'String'
p2861
S'(int)STRINGVAR'
p2862
tp2863
asS'MakeStatus'
p2864
(lp2865
(S'OK'
p2866
I0
tp2867
a(S'MissingValues'
p2868
I1
tp2869
a(S'NoRecognizedValues'
p2870
I2
tp2871
a(S'Incompatible'
p2872
I3
tp2873
a(S'NotFound'
p2874
I4
tp2875
assbsS'TNoiseValuesGenerator'
p2876
(i__main__
ClassDefinition
p2877
(dp2878
g4
I1
sg5
I01
sg6
g2876
sg7
S'TChangeExampleGenerator'
p2879
sg9
I00
sg10
(lp2880
sg12
(lp2881
(S'TIntFloatList'
p2882
S'replaceProbabilities'
p2883
S'replace_probabilities'
p2884
S"probabilities for replacing attributes' values"
p2885
I0
I0
I00
Ntp2886
a(S'TRandomGenerator'
p2887
S'randomGenerator'
p2888
S'random_generator'
p2889
S'random generator'
p2890
I0
I0
I00
Ntp2891
ag299
ag303
asg29
(dp2892
sbsS'TC45TreeNodeList'
p2893
(ipyprops
ClassDefinition
p2894
(dp2895
g4
I0
sg5
I01
sg6
g2893
sg7
g136
sg9
I0
sg10
(lp2896
sg12
(lp2897
sg29
(dp2898
sbsS'TFilter_sameValue'
p2899
(i__main__
ClassDefinition
p2900
(dp2901
g4
I1
sg5
I01
sg6
g2899
sg7
S'TFilter'
p2902
sg9
I00
sg10
(lp2903
sg12
(lp2904
(S'int'
p2905
S'position'
p2906
g2906
S'position of the observed attribute'
p2907
I0
I0
I01
Ntp2908
a(S'TValue'
p2909
S'value'
p2910
g2910
S'value that the selected examples should have'
p2911
I0
I0
I01
Ntp2912
ag662
ag666
asg29
(dp2913
sbsS'TEquiNDiscretization'
p2914
(i__main__
ClassDefinition
p2915
(dp2916
g4
I1
sg5
I01
sg6
g2914
sg7
S'TDiscretization'
p2917
sg9
I00
sg10
(lp2918
sg12
(lp2919
(S'int'
p2920
S'numberOfIntervals'
p2921
S'number_of_intervals'
p2922
S'number of intervals'
p2923
I0
I0
I01
Ntp2924
a(S'bool'
p2925
S'recursiveDivision'
p2926
S'recursive_division'
p2927
S'find cut-off points by recursive division (default = true)'
p2928
I0
I0
I01
Ntp2929
asg29
(dp2930
sbsS'TImputerConstructor_average'
p2931
(i__main__
ClassDefinition
p2932
(dp2933
g4
I1
sg5
I01
sg6
g2931
sg7
S'TImputerConstructor'
p2934
sg9
I00
sg10
(lp2935
sg12
(lp2936
g157
asg29
(dp2937
sbsS'TDomainBasicAttrStat'
p2938
(ipyprops
ClassDefinition
p2939
(dp2940
g4
I0
sg5
I01
sg6
S'TDomainBasicAttrStat'
p2941
sg7
g136
sg9
I0
sg10
(lp2942
sg12
(lp2943
sg29
(dp2944
sbsS'TRuleCovererAndRemover'
p2945
(i__main__
ClassDefinition
p2946
(dp2947
g4
I1
sg5
I01
sg6
g2945
sg7
S'TOrange'
p2948
sg9
I01
sg10
(lp2949
sg12
(lp2950
sg29
(dp2951
sbsS'TImputerConstructor_random'
p2952
(i__main__
ClassDefinition
p2953
(dp2954
g4
I1
sg5
I01
sg6
g2952
sg7
S'TImputerConstructor'
p2955
sg9
I00
sg10
(lp2956
sg12
(lp2957
(S'bool'
p2958
S'deterministic'
p2959
g2959
S"tells whether to initialize random by example's CRC (default: false)"
p2960
I0
I0
I01
Ntp2961
ag157
asg29
(dp2962
sbsS'TCostWrapperClassifier'
p2963
(i__main__
ClassDefinition
p2964
(dp2965
g4
I1
sg5
I01
sg6
g2963
sg7
S'TClassifier'
p2966
sg9
I00
sg10
(lp2967
sg12
(lp2968
(S'TClassifier'
p2969
S'classifier'
p2970
g2970
S'basic classifier'
p2971
I0
I0
I00
Ntp2972
a(S'TCostMatrix'
p2973
S'costMatrix'
p2974
S'cost_matrix'
p2975
S'cost matrix'
p2976
I0
I0
I00
Ntp2977
ag94
ag99
asg29
(dp2978
sbsS'TPreprocessor_ignore'
p2979
(i__main__
ClassDefinition
p2980
(dp2981
g4
I1
sg5
I01
sg6
g2979
sg7
S'TPreprocessor'
p2982
sg9
I00
sg10
(lp2983
sg12
(lp2984
(S'TVarList'
p2985
S'attributes'
p2986
g2986
S'tells which attributes to remove'
p2987
I0
I0
I00
Ntp2988
asg29
(dp2989
sbsS'TEVDist'
p2990
(i__main__
ClassDefinition
p2991
(dp2992
g4
I1
sg5
I01
sg6
g2990
sg7
S'TOrange'
p2993
sg9
I00
sg10
(lp2994
sg12
(lp2995
(S'float'
p2996
S'mu'
p2997
g2997
S'mu of Fisher-Tippett distribution'
p2998
I0
I0
I01
Ntp2999
a(S'float'
p3000
S'beta'
p3001
g3001
S'beta of Fisher-Tippett distribution'
p3002
I0
I0
I01
Ntp3003
a(S'TFloatList'
p3004
S'percentiles'
p3005
g3005
S'usually 10 values - 0 = 5th percentile, 1 = 15th percentile, 9 = 95th percentile, change maxPercentile and step for other settings'
p3006
I0
I0
I00
Ntp3007
a(S'float'
p3008
S'maxPercentile'
p3009
S'max_percentile'
p3010
S'maxPercentile Value, default 0.95'
p3011
I0
I0
I01
Ntp3012
a(S'float'
p3013
S'step'
p3014
g3014
S'step of percentiles, default 0.1'
p3015
I0
I0
I01
Ntp3016
asg29
(dp3017
sbsS'TMeasureAttribute_Python'
p3018
(i__main__
ClassDefinition
p3019
(dp3020
g4
I1
sg5
I01
sg6
g3018
sg7
S'TMeasureAttribute'
p3021
sg9
I00
sg10
(lp3022
sg12
(lp3023
g878
ag883
ag888
ag893
asg29
(dp3024
sbsS'TDistributionAssessor_Measure'
p3025
(i__main__
ClassDefinition
p3026
(dp3027
g4
I1
sg5
I01
sg6
g3025
sg7
S'TDistributionAssessor'
p3028
sg9
I00
sg10
(lp3029
sg12
(lp3030
(S'TMeasureAttribute'
p3031
S'measure'
p3032
g3032
S'attribute quality measure'
p3033
I0
I0
I00
Ntp3034
asg29
(dp3035
sbsS'TDistributionAssessor_m'
p3036
(i__main__
ClassDefinition
p3037
(dp3038
g4
I1
sg5
I01
sg6
g3036
sg7
S'TDistributionAssessor'
p3039
sg9
I00
sg10
(lp3040
sg12
(lp3041
(S'float'
p3042
g1163
g1163
S'm for m-estimate'
p3043
I0
I0
I01
Ntp3044
asg29
(dp3045
sbsS'TClassifierRandomGenerator'
p3046
(i__main__
ClassDefinition
p3047
(dp3048
g4
I1
sg5
I01
sg6
g3046
sg7
S'TExampleGenerator'
p3049
sg9
I00
sg10
(lp3050
sg12
(lp3051
(S'TClassifier'
p3052
S'classify'
p3053
g3053
S'classifier'
p3054
I0
I0
I00
Ntp3055
a(S'int'
p3056
S'noOfEx'
p3057
S'no_of_ex'
p3058
S'number of examples'
p3059
I0
I0
I01
Ntp3060
ag299
ag303
asg29
(dp3061
sbsS'TThresholdDiscretizer'
p3062
(i__main__
ClassDefinition
p3063
(dp3064
g4
I1
sg5
I01
sg6
g3062
sg7
S'TDiscretizer'
p3065
sg9
I00
sg10
(lp3066
sg12
(lp3067
(S'float'
p3068
S'threshold'
p3069
g3069
S'threshold'
p3070
I0
I0
I01
Ntp3071
ag776
asg29
(dp3072
sbsS'TExampleTable'
p3073
(i__main__
ClassDefinition
p3074
(dp3075
g4
I1
sg5
I01
sg6
g3073
sg7
S'TExampleGenerator'
p3076
sg9
I00
sg10
(lp3077
sg12
(lp3078
(S'TRandomGenerator'
p3079
S'randomGenerator'
p3080
S'random_generator'
p3081
S'random generator used by randomExample'
p3082
I0
I0
I00
Ntp3083
a(S'TExampleGenerator'
p3084
S'lock'
p3085
(g3085
S'owner'
p3086
tp3087
S' the real owner of examples'
p3088
I01
I0
I00
Ntp3089
a(S'bool'
p3090
S'ownsExamples'
p3091
(g3091
S'owns_instances'
p3092
tp3093
S' if false, examples in this table are references to examples in another table'
p3094
I01
I0
I01
Ntp3095
ag299
ag303
asg29
(dp3096
sbsS'TEVDistGetter'
p3097
(i__main__
ClassDefinition
p3098
(dp3099
g4
I1
sg5
I01
sg6
g3097
sg7
S'TOrange'
p3100
sg9
I01
sg10
(lp3101
sg12
(lp3102
sg29
(dp3103
sbsNNsS'TStopDistributionClustering_n'
p3104
(i__main__
ClassDefinition
p3105
(dp3106
g4
I1
sg5
I01
sg6
g3104
sg7
S'TStopDistributionClustering'
p3107
sg9
I00
sg10
(lp3108
sg12
(lp3109
(S'int'
p3110
g2519
g2519
S'number of clusters'
p3111
I0
I0
I01
Ntp3112
asg29
(dp3113
sbsS'TTreeExampleSplitter_UnknownsAsSelector'
p3114
(i__main__
ClassDefinition
p3115
(dp3116
g4
I1
sg5
I01
sg6
g3114
sg7
S'TTreeExampleSplitter'
p3117
sg9
I00
sg10
(lp3118
sg12
(lp3119
sg29
(dp3120
sbsS'TClassifier_Python'
p3121
(i__main__
ClassDefinition
p3122
(dp3123
g4
I1
sg5
I01
sg6
g3121
sg7
S'TClassifier'
p3124
sg9
I00
sg10
(lp3125
sg12
(lp3126
g94
ag99
asg29
(dp3127
sbsS'TFilter_isDefined'
p3128
(i__main__
ClassDefinition
p3129
(dp3130
g4
I1
sg5
I01
sg6
g3128
sg7
S'TFilter'
p3131
sg9
I00
sg10
(lp3132
sg12
(lp3133
(S'TAttributedBoolList'
p3134
S'check'
p3135
g3135
S'tells which attributes to check; checks all if the list is empty'
p3136
I0
I0
I00
Ntp3137
ag662
ag666
asg29
(dp3138
sbsS'TRemoveRedundantByQuality'
p3139
(i__main__
ClassDefinition
p3140
(dp3141
g4
I1
sg5
I01
sg6
g3139
sg7
S'TRemoveRedundant'
p3142
sg9
I00
sg10
(lp3143
sg12
(lp3144
(S'bool'
p3145
S'remeasure'
p3146
g3146
S'reapply the measure after removal'
p3147
I0
I0
I01
Ntp3148
a(S'float'
p3149
S'minQuality'
p3150
S'min_quality'
p3151
S'minimal acceptable quality'
p3152
I0
I0
I01
Ntp3153
a(S'int'
p3154
S'removeBut'
p3155
S'remove_but'
p3156
S'the desired number of attributes'
p3157
I0
I0
I01
Ntp3158
a(S'TMeasureAttribute'
p3159
S'measure'
p3160
g3160
S'attribute quality measure'
p3161
I0
I0
I00
Ntp3162
ag1296
asg29
(dp3163
sbsS'TGraphAsList'
p3164
(i__main__
ClassDefinition
p3165
(dp3166
g4
I1
sg5
I01
sg6
g3164
sg7
S'TGraph'
p3167
sg9
I00
sg10
(lp3168
sg12
(lp3169
g1434
ag1439
ag1443
asg29
(dp3170
sbsS'TProbabilityEstimatorConstructor_m'
p3171
(i__main__
ClassDefinition
p3172
(dp3173
g4
I1
sg5
I01
sg6
g3171
sg7
S'TProbabilityEstimatorConstructor'
p3174
sg9
I00
sg10
(lp3175
sg12
(lp3176
(S'float'
p3177
g1163
g1163
S'parameter m for m-estimation'
p3178
I0
I0
I01
Ntp3179
a(S'bool'
p3180
S'renormalize'
p3181
g3181
S'computes the estimate on the original (not the normalized) distribution'
p3182
I0
I0
I01
Ntp3183
asg29
(dp3184
sbsS'TDistanceMap'
p3185
(i__main__
ClassDefinition
p3186
(dp3187
g4
I1
sg5
I01
sg6
g3185
sg7
S'TOrange'
p3188
sg9
I00
sg10
(lp3189
sg12
(lp3190
(S'int'
p3191
S'dim'
p3192
g3192
S'bitmap dimension (in cells)'
p3193
I01
I0
I01
Ntp3194
a(S'int'
p3195
S'matrixType'
p3196
S'matrix_type'
p3197
S'0 lower, 1 upper, 2 symmetric'
p3198
I0
I0
I01
Ntp3199
a(S'TIntList'
p3200
S'elementIndices'
p3201
S'element_indices'
p3202
S'indices to elements (one for row + one at the end)'
p3203
I01
I0
I00
Ntp3204
asg29
(dp3205
sbsS'TDistanceMapConstructor'
p3206
(i__main__
ClassDefinition
p3207
(dp3208
g4
I1
sg5
I01
sg6
g3206
sg7
S'TOrange'
p3209
sg9
I00
sg10
(lp3210
sg12
(lp3211
(S'TSymMatrix'
p3212
S'distanceMatrix'
p3213
S'distance_matrix'
p3214
S'distance matrix'
p3215
I0
I0
I00
Ntp3216
a(S'TIntList'
p3217
S'order'
p3218
g3218
S'order of elements'
p3219
I0
I0
I00
Ntp3220
asg29
(dp3221
sbsS'TTransformValue'
p3222
(i__main__
ClassDefinition
p3223
(dp3224
g4
I1
sg5
I01
sg6
g3222
sg7
S'TOrange'
p3225
sg9
I01
sg10
(lp3226
sg12
(lp3227
g776
asg29
(dp3228
sbsS'TComputeDomainContingency_DomainTransformation'
p3229
(i__main__
ClassDefinition
p3230
(dp3231
g4
I1
sg5
I01
sg6
g3229
sg7
S'TComputeDomainContingency'
p3232
sg9
I00
sg10
(lp3233
sg12
(lp3234
(S'TDomainTransformerConstructor'
p3235
S'domainTransformerConstructor'
p3236
S'domain_transformer_constructor'
p3237
S'constructs a domain in which each attribute corresponds one of originals'
p3238
I0
I0
I00
Ntp3239
a(S'bool'
p3240
S'resultInOriginalDomain'
p3241
S'result_in_original_domain'
p3242
S'tells whether the resulting DomainContingency should consist of original attributes'
p3243
I0
I0
I01
Ntp3244
ag28
asg29
(dp3245
sbsS'TStopDistributionClustering_noBigChange'
p3246
(i__main__
ClassDefinition
p3247
(dp3248
g4
I1
sg5
I01
sg6
g3246
sg7
S'TStopDistributionClustering'
p3249
sg9
I00
sg10
(lp3250
sg12
(lp3251
sg29
(dp3252
sbsS'TTreePruner'
p3253
(i__main__
ClassDefinition
p3254
(dp3255
g4
I1
sg5
I01
sg6
g3253
sg7
S'TOrange'
p3256
sg9
I01
sg10
(lp3257
sg12
(lp3258
sg29
(dp3259
sbsg1756
(ipyprops
ClassDefinition
p3260
(dp3261
g4
I0
sg5
I01
sg6
g1756
sg7
g136
sg9
I0
sg10
(lp3262
sg12
(lp3263
sg29
(dp3264
sbsS'TStringValue'
p3265
(i__main__
ClassDefinition
p3266
(dp3267
g4
I1
sg5
I01
sg6
g3265
sg7
S'TSomeValue'
p3268
sg9
I00
sg10
(lp3269
sg12
(lp3270
sg29
(dp3271
sbsS'TVarList'
p3272
(ipyprops
ClassDefinition
p3273
(dp3274
g4
I0
sg5
I01
sg6
g3272
sg7
g136
sg9
I0
sg10
(lp3275
sg12
(lp3276
sg29
(dp3277
sbsS'TRuleLearner'
p3278
(i__main__
ClassDefinition
p3279
(dp3280
g4
I1
sg5
I01
sg6
g3278
sg7
S'TLearner'
p3281
sg9
I00
sg10
(lp3282
sg12
(lp3283
(S'TRuleDataStoppingCriteria'
p3284
S'dataStopping'
p3285
S'data_stopping'
p3286
g571
I0
I0
I00
Ntp3287
a(S'TRuleStoppingCriteria'
p3288
S'ruleStopping'
p3289
S'rule_stopping'
p3290
g571
I0
I0
I00
Ntp3291
a(S'TRuleCovererAndRemover'
p3292
S'coverAndRemove'
p3293
S'cover_and_remove'
p3294
g571
I0
I0
I00
Ntp3295
a(S'TRuleFinder'
p3296
S'ruleFinder'
p3297
S'rule_finder'
p3298
g571
I0
I0
I00
Ntp3299
a(S'TRuleClassifierConstructor'
p3300
S'classifierConstructor'
p3301
S'classifier_constructor'
p3302
S'classifier'
p3303
I0
I0
I00
Ntp3304
a(S'TProgressCallback'
p3305
S'progressCallback'
p3306
S'progress_callback'
p3307
S'progress callback function'
p3308
I0
I0
I00
Ntp3309
a(S'bool'
p3310
S'storeExamples'
p3311
S'store_examples'
p3312
g571
I0
I0
I01
Ntp3313
a(S'int'
p3314
S'targetClass'
p3315
S'target_class'
p3316
g571
I0
I0
I01
Ntp3317
a(S'TRuleList'
p3318
S'baseRules'
p3319
S'base_rules'
p3320
g571
I0
I0
I00
Ntp3321
ag110
asg29
(dp3322
sbsS'TOrdinal2Continuous'
p3323
(i__main__
ClassDefinition
p3324
(dp3325
g4
I1
sg5
I01
sg6
g3323
sg7
S'TTransformValue'
p3326
sg9
I00
sg10
(lp3327
sg12
(lp3328
(S'float'
p3329
S'factor'
p3330
g3330
S'number of values'
p3331
I0
I0
I01
Ntp3332
ag776
asg29
(dp3333
sbsS'TLinearLearner'
p3334
(i__main__
ClassDefinition
p3335
(dp3336
g4
I1
sg5
I01
sg6
g3334
sg7
S'TLearner'
p3337
sg9
I00
sg10
(lp3338
sg12
(lp3339
(S'int'
p3340
S'solver_type'
p3341
g3341
S' Solver type (loss function1)'
p3342
I0
I0
I01
S'LinearLearner_Lossfunction1'
p3343
tp3344
a(S'float'
p3345
S'eps'
p3346
g3346
S'Stopping criteria'
p3347
I0
I0
I01
Ntp3348
a(S'float'
p3349
S'C'
p3350
g3350
S'Regularization parameter'
p3351
I0
I0
I01
Ntp3352
ag110
asg29
(dp3353
S'LIBLINEAR_VERSION'
p3354
(lp3355
(S'VERSION'
p3356
S'180'
p3357
tp3358
asS'Lossfunction1'
p3359
(lp3360
(S'L2R_LR'
p3361
I0
tp3362
a(S'L2R_L2Loss_SVC_Dual'
p3363
I1
tp3364
a(S'L2R_L2Loss_SVC'
p3365
I2
tp3366
a(S'L2R_L1Loss_SVC_Dual'
p3367
I3
tp3368
a(S'MCSVM_CS'
p3369
I4
tp3370
a(S'L1R_L2Loss_SVC'
p3371
I5
tp3372
a(S'L1R_LR'
p3373
I6
tp3374
a(S'L2R_LR_Dual'
p3375
I7
tp3376
asS'Lossfunction1_old_'
p3377
(lp3378
(S'L2_LR'
p3379
I0
tp3380
a(S'L2Loss_SVM_Dual'
p3381
I1
tp3382
a(S'L2Loss_SVM'
p3383
I2
tp3384
a(S'L1Loss_SVM_Dual'
p3385
I3
tp3386
assbsS'TTreeSplitConstructor_Combined'
p3387
(i__main__
ClassDefinition
p3388
(dp3389
g4
I1
sg5
I01
sg6
g3387
sg7
S'TTreeSplitConstructor'
p3390
sg9
I00
sg10
(lp3391
sg12
(lp3392
(S'TTreeSplitConstructor'
p3393
S'discreteSplitConstructor'
p3394
S'discrete_split_constructor'
p3395
S'split constructor for discrete attributes'
p3396
I0
I0
I00
Ntp3397
a(S'TTreeSplitConstructor'
p3398
S'continuousSplitConstructor'
p3399
S'continuous_split_constructor'
p3400
S'split constructor for continuous attributes'
p3401
I0
I0
I00
Ntp3402
ag754
asg29
(dp3403
sbsS'TTransformValue_Python'
p3404
(i__main__
ClassDefinition
p3405
(dp3406
g4
I1
sg5
I01
sg6
g3404
sg7
S'TTransformValue'
p3407
sg9
I00
sg10
(lp3408
sg12
(lp3409
g776
asg29
(dp3410
sbsS'TRuleStoppingCriteria_Python'
p3411
(i__main__
ClassDefinition
p3412
(dp3413
g4
I1
sg5
I01
sg6
g3411
sg7
S'TRuleStoppingCriteria'
p3414
sg9
I00
sg10
(lp3415
sg12
(lp3416
sg29
(dp3417
sbsS'TRuleEvaluator_Python'
p3418
(i__main__
ClassDefinition
p3419
(dp3420
g4
I1
sg5
I01
sg6
g3418
sg7
S'TRuleEvaluator'
p3421
sg9
I00
sg10
(lp3422
sg12
(lp3423
sg29
(dp3424
sbsS'TIGBySorting'
p3425
(i__main__
ClassDefinition
p3426
(dp3427
g4
I1
sg5
I01
sg6
g3425
sg7
S'TIGConstructor'
p3428
sg9
I00
sg10
(lp3429
sg12
(lp3430
sg29
(dp3431
sbsS'TConditionalProbabilityEstimator_ByRows'
p3432
(i__main__
ClassDefinition
p3433
(dp3434
g4
I1
sg5
I01
sg6
g3432
sg7
S'TConditionalProbabilityEstimator'
p3435
sg9
I00
sg10
(lp3436
sg12
(lp3437
(S'TProbabilityEstimatorList'
p3438
S'estimatorList'
p3439
S'estimator_list'
p3440
S'A list of probability estimators'
p3441
I0
I0
I00
Ntp3442
ag126
ag131
asg29
(dp3443
sbsS'TFindNearest'
p3444
(i__main__
ClassDefinition
p3445
(dp3446
g4
I1
sg5
I01
sg6
g3444
sg7
S'TOrange'
p3447
sg9
I01
sg10
(lp3448
sg12
(lp3449
g1042
ag1047
asg29
(dp3450
sbsS'TProgressCallback'
p3451
(i__main__
ClassDefinition
p3452
(dp3453
g4
I1
sg5
I01
sg6
g3451
sg7
S'TOrange'
p3454
sg9
I01
sg10
(lp3455
sg12
(lp3456
sg29
(dp3457
sbsS'THierarchicalClustering'
p3458
(i__main__
ClassDefinition
p3459
(dp3460
g4
I1
sg5
I01
sg6
g3458
sg7
S'TOrange'
p3461
sg9
I00
sg10
(lp3462
sg12
(lp3463
(S'int'
p3464
S'linkage'
p3465
g3465
S' linkage'
p3466
I0
I0
I01
S'HierarchicalClustering_Linkage'
p3467
tp3468
a(S'bool'
p3469
S'overwriteMatrix'
p3470
S'overwrite_matrix'
p3471
S'if true (default is false) it will use (and destroy) the distance matrix given as argument'
p3472
I0
I0
I01
Ntp3473
a(S'TProgressCallback'
p3474
S'progressCallback'
p3475
S'progress_callback'
p3476
S'progress callback function'
p3477
I0
I0
I00
Ntp3478
asg29
(dp3479
S'Linkage'
p3480
(lp3481
(S'Single'
p3482
I0
tp3483
a(S'Average'
p3484
I1
tp3485
a(S'Complete'
p3486
I2
tp3487
a(S'Ward'
p3488
I3
tp3489
assbsS'TLogRegFitter_Cholesky'
p3490
(i__main__
ClassDefinition
p3491
(dp3492
g4
I1
sg5
I01
sg6
g3490
sg7
S'TLogRegFitter'
p3493
sg9
I00
sg10
(lp3494
sg12
(lp3495
sg29
(dp3496
sbsS'TClassifierFromVar'
p3497
(i__main__
ClassDefinition
p3498
(dp3499
g4
I1
sg5
I01
sg6
g3497
sg7
S'TClassifier'
p3500
sg9
I00
sg10
(lp3501
sg12
(lp3502
(S'TVariable'
p3503
S'whichVar'
p3504
(g3504
S'variable'
p3505
tp3506
S' variable'
p3507
I0
I0
I00
Ntp3508
a(S'TTransformValue'
p3509
S'transformer'
p3510
g3510
S'transformer'
p3511
I0
I0
I00
Ntp3512
a(S'TDistribution'
p3513
S'distributionForUnknown'
p3514
S'distribution_for_unknown'
p3515
S'distribution for unknown value'
p3516
I0
I0
I00
Ntp3517
a(S'bool'
p3518
S'transformUnknowns'
p3519
S'transform_unknowns'
p3520
S'if false (default), unknowns stay unknown or are changed into distribution if given'
p3521
I0
I0
I01
Ntp3522
ag94
ag99
asg29
(dp3523
sbsg2259
(ipyprops
ClassDefinition
p3524
(dp3525
g4
I0
sg5
I01
sg6
g2259
sg7
g136
sg9
I0
sg10
(lp3526
sg12
(lp3527
sg29
(dp3528
sbsS'TFilter_index'
p3529
(ipyprops
ClassDefinition
p3530
(dp3531
g4
I0
sg5
I01
sg6
g3529
sg7
g136
sg9
I0
sg10
(lp3532
sg12
(lp3533
sg29
(dp3534
sbsS'TIM'
p3535
(i__main__
ClassDefinition
p3536
(dp3537
g4
I1
sg5
I01
sg6
g3535
sg7
S'TOrange'
p3538
sg9
I00
sg10
(lp3539
sg12
(lp3540
(S'int'
p3541
S'varType'
p3542
S'var_type'
p3543
S' class variable type'
p3544
I0
I0
I01
S'Variable_Type'
p3545
tp3546
a(S'TExampleTable'
p3547
S'rowExamples'
p3548
S'row_examples'
p3549
S'examples with free attributes for each row'
p3550
I0
I0
I00
Ntp3551
asg29
(dp3552
sbsS'TTreeSplitConstructor_OneAgainstOthers'
p3553
(i__main__
ClassDefinition
p3554
(dp3555
g4
I1
sg5
I01
sg6
g3553
sg7
S'TTreeSplitConstructor_Measure'
p3556
sg9
I00
sg10
(lp3557
sg12
(lp3558
g1253
ag1258
ag754
asg29
(dp3559
sbsS'TClassifier'
p3560
(i__main__
ClassDefinition
p3561
(dp3562
g4
I1
sg5
I01
sg6
g3560
sg7
S'TOrange'
p3563
sg9
I00
sg10
(lp3564
sg12
(lp3565
g94
ag99
asg29
(dp3566
sbsS'TTreeSplitConstructor_Python'
p3567
(i__main__
ClassDefinition
p3568
(dp3569
g4
I1
sg5
I01
sg6
g3567
sg7
S'TTreeSplitConstructor'
p3570
sg9
I00
sg10
(lp3571
sg12
(lp3572
g754
asg29
(dp3573
sbsS'TIG'
p3574
(i__main__
ClassDefinition
p3575
(dp3576
g4
I1
sg5
I01
sg6
g3574
sg7
S'TOrange'
p3577
sg9
I00
sg10
(lp3578
sg12
(lp3579
sg29
(dp3580
sbsS'TMeasureAttribute_relief'
p3581
(i__main__
ClassDefinition
p3582
(dp3583
g4
I1
sg5
I01
sg6
g3581
sg7
S'TMeasureAttribute'
p3584
sg9
I00
sg10
(lp3585
sg12
(lp3586
(S'float'
p3587
g1159
g1159
S'number of neighbours'
p3588
I0
I0
I01
Ntp3589
a(S'float'
p3590
g1163
g1163
S'number of reference examples'
p3591
I0
I0
I01
Ntp3592
a(S'bool'
p3593
S'checkCachedData'
p3594
S'check_cached_data'
p3595
S'tells whether to check the checksum of the data before reusing the cached neighbours'
p3596
I0
I0
I01
Ntp3597
ag878
ag883
ag888
ag893
asg29
(dp3598
sbsS'TEarthLearner'
p3599
(i__main__
ClassDefinition
p3600
(dp3601
g4
I1
sg5
I01
sg6
g3599
sg7
S'TLearner'
p3602
sg9
I00
sg10
(lp3603
sg12
(lp3604
(S'int'
p3605
S'max_terms'
p3606
g3606
S'Maximum number of terms.'
p3607
I0
I0
I01
Ntp3608
a(S'int'
p3609
S'max_degree'
p3610
g3610
S'Maximum degree of terms.'
p3611
I0
I0
I01
Ntp3612
a(S'float'
p3613
S'penalty'
p3614
g3614
S'Penalty.'
p3615
I0
I0
I01
Ntp3616
a(S'float'
p3617
S'threshold'
p3618
g3618
S'Forward step threshold.'
p3619
I0
I0
I01
Ntp3620
a(S'bool'
p3621
S'prune'
p3622
g3622
S'Prune terms (do backward pass).'
p3623
I0
I0
I01
Ntp3624
a(S'float'
p3625
S'fast_beta'
p3626
g3626
S'Fast beta (aging coefficient).'
p3627
I0
I0
I01
Ntp3628
a(S'float'
p3629
S'trace'
p3630
g3630
S'Execution trace (for debugging only).'
p3631
I0
I0
I01
Ntp3632
a(S'int'
p3633
S'min_span'
p3634
g3634
S'Min. span (training instances) between knots.'
p3635
I0
I0
I01
Ntp3636
a(S'int'
p3637
S'fast_k'
p3638
g3638
S'Fast K.'
p3639
I0
I0
I01
Ntp3640
a(S'bool'
p3641
S'new_var_penalty'
p3642
g3642
S'Penalty for adding a new variable.'
p3643
I0
I0
I01
Ntp3644
a(S'bool'
p3645
S'use_beta_cache'
p3646
g3646
S'Use caching for betas.'
p3647
I0
I0
I01
Ntp3648
ag110
asg29
(dp3649
sbsS'TMeasureAttribute_logOddsRatio'
p3650
(i__main__
ClassDefinition
p3651
(dp3652
g4
I1
sg5
I01
sg6
g3650
sg7
S'TMeasureAttributeFromProbabilities'
p3653
sg9
I00
sg10
(lp3654
sg12
(lp3655
g862
ag867
ag873
ag878
ag883
ag888
ag893
asg29
(dp3656
sbsS'TTreeExampleSplitter_Python'
p3657
(i__main__
ClassDefinition
p3658
(dp3659
g4
I1
sg5
I01
sg6
g3657
sg7
S'TTreeExampleSplitter'
p3660
sg9
I00
sg10
(lp3661
sg12
(lp3662
sg29
(dp3663
sbsS'TKernelFunc_Python'
p3664
(i__main__
ClassDefinition
p3665
(dp3666
g4
I1
sg5
I01
sg6
g3664
sg7
S'TKernelFunc'
p3667
sg9
I00
sg10
(lp3668
sg12
(lp3669
sg29
(dp3670
sbsS'TAdapterGenerator'
p3671
(i__main__
ClassDefinition
p3672
(dp3673
g4
I1
sg5
I01
sg6
g3671
sg7
S'TExampleGenerator'
p3674
sg9
I00
sg10
(lp3675
sg12
(lp3676
g299
ag303
asg29
(dp3677
sbsS'TIMFromExamples'
p3678
(i__main__
ClassDefinition
p3679
(dp3680
g4
I1
sg5
I01
sg6
g3678
sg7
S'TOrange'
p3681
sg9
I01
sg10
(lp3682
sg12
(lp3683
sg29
(dp3684
sbsS'TFilter_random'
p3685
(i__main__
ClassDefinition
p3686
(dp3687
g4
I1
sg5
I01
sg6
g3685
sg7
S'TFilter'
p3688
sg9
I00
sg10
(lp3689
sg12
(lp3690
(S'float'
p3691
S'prob'
p3692
g3692
S'probability of selecting an example'
p3693
I0
I0
I01
Ntp3694
a(S'TRandomGenerator'
p3695
S'randomGenerator'
p3696
S'random_generator'
p3697
S'random generator'
p3698
I0
I0
I00
Ntp3699
ag662
ag666
asg29
(dp3700
sbsS'TC45ExampleGenerator'
p3701
(i__main__
ClassDefinition
p3702
(dp3703
g4
I1
sg5
I01
sg6
g3701
sg7
S'TFileExampleGenerator'
p3704
sg9
I00
sg10
(lp3705
sg12
(lp3706
(S'TBoolList'
p3707
S'skip'
p3708
g3708
S'a boolean list, one element per attribute, denoting which attributes to skip'
p3709
I0
I0
I00
Ntp3710
ag1581
ag1586
ag1591
ag299
ag303
asg29
(dp3711
sbsS'TProbabilityEstimatorConstructor_loess'
p3712
(i__main__
ClassDefinition
p3713
(dp3714
g4
I1
sg5
I01
sg6
g3712
sg7
S'TProbabilityEstimatorConstructor'
p3715
sg9
I00
sg10
(lp3716
sg12
(lp3717
(S'float'
p3718
S'windowProportion'
p3719
S'window_proportion'
p3720
S'The proportion of points in a window for LR'
p3721
I0
I0
I01
Ntp3722
a(S'int'
p3723
S'nPoints'
p3724
S'n_points'
p3725
S'The number of points on curve (negative means the given number of points is inserted in each interval)'
p3726
I0
I0
I01
Ntp3727
a(S'int'
p3728
S'distributionMethod'
p3729
S'distribution_method'
p3730
S" Meaning of the 'nPoints'"
p3731
I0
I0
I01
S'ProbabilityEstimatorConstructor_loess_DistributionMethod'
p3732
tp3733
asg29
(dp3734
S'DistributionMethod'
p3735
(lp3736
(S'Minimal'
p3737
S'DISTRIBUTE_MINIMAL'
p3738
tp3739
a(S'Factor'
p3740
S'DISTRIBUTE_FACTOR'
p3741
tp3742
a(S'Fixed'
p3743
S'DISTRIBUTE_FIXED'
p3744
tp3745
a(S'Uniform'
p3746
S'DISTRIBUTE_UNIFORM'
p3747
tp3748
a(S'Maximal'
p3749
S'DISTRIBUTE_MAXIMAL'
p3750
tp3751
assbsS'TExamplesDistance_Lp'
p3752
(i__main__
ClassDefinition
p3753
(dp3754
g4
I1
sg5
I01
sg6
g3752
sg7
S'TExamplesDistance_Normalized'
p3755
sg9
I00
sg10
(lp3756
sg12
(lp3757
(S'float'
p3758
g2203
g2203
g2203
I01
I0
I01
Ntp3759
ag447
ag451
ag455
ag459
ag464
ag468
ag473
asg29
(dp3760
sbsS'TLogRegFitter'
p3761
(i__main__
ClassDefinition
p3762
(dp3763
g4
I1
sg5
I01
sg6
g3761
sg7
S'TOrange'
p3764
sg9
I01
sg10
(lp3765
sg12
(lp3766
sg29
(dp3767
S'ErrorCode'
p3768
(lp3769
(S'OK'
p3770
I0
tp3771
a(S'Infinity'
p3772
I1
tp3773
a(S'Divergence'
p3774
I2
tp3775
a(S'Constant'
p3776
I3
tp3777
a(S'Singularity'
p3778
I4
tp3779
assbsS'TMakeRandomIndicesCV'
p3780
(i__main__
ClassDefinition
p3781
(dp3782
g4
I1
sg5
I01
sg6
g3780
sg7
S'TMakeRandomIndices'
p3783
sg9
I00
sg10
(lp3784
sg12
(lp3785
(S'int'
p3786
S'folds'
p3787
g3787
S'number of folds'
p3788
I0
I0
I01
Ntp3789
ag685
ag689
ag694
asg29
(dp3790
sbsS'TClassifierList'
p3791
(ipyprops
ClassDefinition
p3792
(dp3793
g4
I0
sg5
I01
sg6
g3791
sg7
g136
sg9
I0
sg10
(lp3794
sg12
(lp3795
sg29
(dp3796
sbsS'TPreprocessor_removeDuplicates'
p3797
(i__main__
ClassDefinition
p3798
(dp3799
g4
I1
sg5
I01
sg6
g3797
sg7
S'TPreprocessor'
p3800
sg9
I00
sg10
(lp3801
sg12
(lp3802
sg29
(dp3803
sbsS'TTreeExampleSplitter_UnknownsAsBranchSizes'
p3804
(i__main__
ClassDefinition
p3805
(dp3806
g4
I1
sg5
I01
sg6
g3804
sg7
S'TTreeExampleSplitter'
p3807
sg9
I00
sg10
(lp3808
sg12
(lp3809
sg29
(dp3810
sbsS'TExamplesDistanceConstructor_Normalized'
p3811
(i__main__
ClassDefinition
p3812
(dp3813
g4
I1
sg5
I01
sg6
g3811
sg7
S'TExamplesDistanceConstructor'
p3814
sg9
I01
sg10
(lp3815
sg12
(lp3816
g2037
ag2042
ag1318
asg29
(dp3817
sbsS'TCostWrapperLearner'
p3818
(i__main__
ClassDefinition
p3819
(dp3820
g4
I1
sg5
I01
sg6
g3818
sg7
S'TLearner'
p3821
sg9
I00
sg10
(lp3822
sg12
(lp3823
(S'TLearner'
p3824
S'basicLearner'
p3825
S'basic_learner'
p3826
S'basic learner'
p3827
I0
I0
I00
Ntp3828
a(S'TCostMatrix'
p3829
S'costMatrix'
p3830
S'cost_matrix'
p3831
S'cost matrix'
p3832
I0
I0
I00
Ntp3833
ag110
asg29
(dp3834
sbsS'TRandomLearner'
p3835
(i__main__
ClassDefinition
p3836
(dp3837
g4
I1
sg5
I01
sg6
g3835
sg7
S'TLearner'
p3838
sg9
I00
sg10
(lp3839
sg12
(lp3840
(S'TDistribution'
p3841
S'probabilities'
p3842
g3842
S'probabilities of predictions'
p3843
I0
I0
I00
Ntp3844
ag110
asg29
(dp3845
sbsS'TImputer_asValue'
p3846
(i__main__
ClassDefinition
p3847
(dp3848
g4
I1
sg5
I01
sg6
g3846
sg7
S'TImputer'
p3849
sg9
I00
sg10
(lp3850
sg12
(lp3851
(S'TDomain'
p3852
S'domain'
p3853
g3853
S'domain to which the values are converted'
p3854
I0
I0
I00
Ntp3855
a(S'TExample'
p3856
S'defaults'
p3857
g3857
S'values to impute instead of missing ones - for continuous attributes only!'
p3858
I0
I0
I00
Ntp3859
asg29
(dp3860
sbsS'TPearsonCorrelation'
p3861
(i__main__
ClassDefinition
p3862
(dp3863
g4
I1
sg5
I01
sg6
g3861
sg7
S'TOrange'
p3864
sg9
I00
sg10
(lp3865
sg12
(lp3866
(S'float'
p3867
S'r'
p3868
g3868
S'correlation coefficient'
p3869
I0
I0
I01
Ntp3870
a(S'float'
p3871
g2232
g2232
S't-statics significance'
p3872
I0
I0
I01
Ntp3873
a(S'int'
p3874
S'df'
p3875
g3875
S'degrees of freedom'
p3876
I0
I0
I01
Ntp3877
a(S'float'
p3878
g2203
g2203
S'significance'
p3879
I0
I0
I01
Ntp3880
asg29
(dp3881
sbsS'TDistributionAssessor_Laplace'
p3882
(i__main__
ClassDefinition
p3883
(dp3884
g4
I1
sg5
I01
sg6
g3882
sg7
S'TDistributionAssessor'
p3885
sg9
I00
sg10
(lp3886
sg12
(lp3887
sg29
(dp3888
sbsS'TColumnAssessor_Relief'
p3889
(i__main__
ClassDefinition
p3890
(dp3891
g4
I1
sg5
I01
sg6
g3889
sg7
S'TColumnAssessor'
p3892
sg9
I00
sg10
(lp3893
sg12
(lp3894
sg29
(dp3895
sbsS'TClassifierByLookupTable'
p3896
(i__main__
ClassDefinition
p3897
(dp3898
g4
I1
sg5
I01
sg6
g3896
sg7
S'TClassifier'
p3899
sg9
I01
sg10
(lp3900
sg12
(lp3901
g85
ag89
ag94
ag99
asg29
(dp3902
sbsS'TRuleBeamFinder'
p3903
(i__main__
ClassDefinition
p3904
(dp3905
g4
I1
sg5
I01
sg6
g3903
sg7
S'TRuleFinder'
p3906
sg9
I00
sg10
(lp3907
sg12
(lp3908
(S'TRuleBeamInitializer'
p3909
S'initializer'
p3910
g3910
g571
I0
I0
I00
Ntp3911
a(S'TRuleBeamRefiner'
p3912
S'refiner'
p3913
g3913
g571
I0
I0
I00
Ntp3914
a(S'TRuleBeamCandidateSelector'
p3915
S'candidateSelector'
p3916
S'candidate_selector'
p3917
g571
I0
I0
I00
Ntp3918
a(S'TRuleBeamFilter'
p3919
S'ruleFilter'
p3920
S'rule_filter'
p3921
g571
I0
I0
I00
Ntp3922
a(S'TRuleValidator'
p3923
S'ruleStoppingValidator'
p3924
S'rule_stopping_validator'
p3925
g571
I0
I0
I00
Ntp3926
a(S'TRuleValidator'
p3927
S'validator'
p3928
g3928
g571
I0
I0
I00
Ntp3929
a(S'TRuleEvaluator'
p3930
S'evaluator'
p3931
g3931
g571
I0
I0
I00
Ntp3932
asg29
(dp3933
sbsS'TC45Classifier'
p3934
(i__main__
ClassDefinition
p3935
(dp3936
g4
I1
sg5
I01
sg6
g3934
sg7
S'TClassifierFD'
p3937
sg9
I00
sg10
(lp3938
sg12
(lp3939
(S'TC45TreeNode'
p3940
S'tree'
p3941
g3941
S'tree'
p3942
I0
I0
I00
Ntp3943
ag284
ag94
ag99
asg29
(dp3944
sbsS'TGeneralExampleClustering'
p3945
(i__main__
ClassDefinition
p3946
(dp3947
g4
I1
sg5
I01
sg6
g3945
sg7
S'TOrange'
p3948
sg9
I01
sg10
(lp3949
sg12
(lp3950
sg29
(dp3951
sbsS'TMeasureAttribute_cost'
p3952
(i__main__
ClassDefinition
p3953
(dp3954
g4
I1
sg5
I01
sg6
g3952
sg7
S'TMeasureAttributeFromProbabilities'
p3955
sg9
I00
sg10
(lp3956
sg12
(lp3957
(S'TCostMatrix'
p3958
S'cost'
p3959
g3959
S'cost matrix'
p3960
I0
I0
I00
Ntp3961
ag862
ag867
ag873
ag878
ag883
ag888
ag893
asg29
(dp3962
sbsS'TImputerConstructor_minimal'
p3963
(i__main__
ClassDefinition
p3964
(dp3965
g4
I1
sg5
I01
sg6
g3963
sg7
S'TImputerConstructor'
p3966
sg9
I00
sg10
(lp3967
sg12
(lp3968
g157
asg29
(dp3969
sbsS'TClustersFromIM'
p3970
(i__main__
ClassDefinition
p3971
(dp3972
g4
I1
sg5
I01
sg6
g3970
sg7
S'TOrange'
p3973
sg9
I01
sg10
(lp3974
sg12
(lp3975
sg29
(dp3976
sbsS'TFilter_values'
p3977
(i__main__
ClassDefinition
p3978
(dp3979
g4
I1
sg5
I01
sg6
g3977
sg7
S'TFilter'
p3980
sg9
I00
sg10
(lp3981
sg12
(lp3982
(S'TValueFilterList'
p3983
S'conditions'
p3984
g3984
S'a list of filters'
p3985
I0
I0
I00
Ntp3986
a(S'bool'
p3987
S'conjunction'
p3988
g3988
S'if true, filter computes conjunction, otherwise disjunction'
p3989
I0
I0
I01
Ntp3990
ag662
ag666
asg29
(dp3991
S'Operator'
p3992
(lp3993
(S'None'
p3994
I0
tp3995
a(S'Equal'
p3996
I1
tp3997
a(S'NotEqual'
p3998
I2
tp3999
a(S'Less'
p4000
I3
tp4001
a(S'LessEqual'
p4002
I4
tp4003
a(S'Greater'
p4004
I5
tp4005
a(S'GreaterEqual'
p4006
I6
tp4007
a(S'Between'
p4008
I7
tp4009
a(S'Outside'
p4010
I8
tp4011
a(S'Contains'
p4012
I9
tp4013
a(S'NotContains'
p4014
I10
tp4015
a(S'BeginsWith'
p4016
I11
tp4017
a(S'EndsWith'
p4018
I12
tp4019
a(S'Listed'
p4020
I13
tp4021
assbsS'TRuleClassifier'
p4022
(i__main__
ClassDefinition
p4023
(dp4024
g4
I1
sg5
I01
sg6
g4022
sg7
S'TClassifier'
p4025
sg9
I01
sg10
(lp4026
sg12
(lp4027
g572
ag575
ag579
ag94
ag99
asg29
(dp4028
sbsS'TAssociationRules'
p4029
(ipyprops
ClassDefinition
p4030
(dp4031
g4
I0
sg5
I01
sg6
g4029
sg7
g136
sg9
I0
sg10
(lp4032
sg12
(lp4033
sg29
(dp4034
sbsS'TSymMatrix'
p4035
(i__main__
ClassDefinition
p4036
(dp4037
g4
I1
sg5
I01
sg6
g4035
sg7
S'TOrange'
p4038
sg9
I00
sg10
(lp4039
sg12
(lp4040
(S'int'
p4041
S'dim'
p4042
g4042
S'matrix dimension'
p4043
I01
I0
I01
Ntp4044
a(S'int'
p4045
S'matrixType'
p4046
S'matrix_type'
p4047
S' 0 lower, 1 upper, 2 symmetric, 3 lower_filled, 4 upper_filled'
p4048
I0
I0
I01
S'SymMatrix_Shape'
p4049
tp4050
asg29
(dp4051
S'Shape'
p4052
(lp4053
(S'Lower'
p4054
I0
tp4055
a(S'Upper'
p4056
I1
tp4057
a(S'Symmetric'
p4058
I2
tp4059
a(S'LowerFilled'
p4060
I3
tp4061
a(S'UpperFilled'
p4062
I4
tp4063
assbsS'TSVMLearner'
p4064
(i__main__
ClassDefinition
p4065
(dp4066
g4
I1
sg5
I01
sg6
g4064
sg7
S'TLearner'
p4067
sg9
I00
sg10
(lp4068
sg12
(lp4069
(S'int'
p4070
S'svm_type'
p4071
g4071
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p4072
I0
I0
I01
S'SVMLearner_SVMType'
p4073
tp4074
a(S'int'
p4075
S'kernel_type'
p4076
g4076
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p4077
I0
I0
I01
S'SVMLearner_Kernel'
p4078
tp4079
a(S'float'
p4080
S'degree'
p4081
g4081
S'polynomial kernel degree'
p4082
I0
I0
I01
Ntp4083
a(S'float'
p4084
S'gamma'
p4085
g4085
S'poly/rbf/sigm parameter'
p4086
I0
I0
I01
Ntp4087
a(S'float'
p4088
S'coef0'
p4089
g4089
S'poly/sigm parameter'
p4090
I0
I0
I01
Ntp4091
a(S'float'
p4092
S'cache_size'
p4093
g4093
S'cache size in MB'
p4094
I0
I0
I01
Ntp4095
a(S'float'
p4096
S'eps'
p4097
g4097
S'stopping criteria'
p4098
I0
I0
I01
Ntp4099
a(S'float'
p4100
g3350
g3350
S'for C_SVC and C_SVR'
p4101
I0
I0
I01
Ntp4102
a(S'float'
p4103
S'nu'
p4104
g4104
S'for NU_SVC and ONE_CLASS'
p4105
I0
I0
I01
Ntp4106
a(S'float'
p4107
g2203
g2203
S'for C_SVR'
p4108
I0
I0
I01
Ntp4109
a(S'int'
p4110
S'shrinking'
p4111
g4111
S'shrinking'
p4112
I0
I0
I01
Ntp4113
a(S'int'
p4114
S'probability'
p4115
g4115
S'probability'
p4116
I0
I0
I01
Ntp4117
a(S'bool'
p4118
S'verbose'
p4119
g4119
S'verbose'
p4120
I0
I0
I01
Ntp4121
a(S'TKernelFunc'
p4122
S'kernelFunc'
p4123
S'kernel_func'
p4124
S'custom kernel function'
p4125
I0
I0
I00
Ntp4126
ag110
asg29
(dp4127
S'Kernel'
p4128
(lp4129
(S'Linear'
p4130
S'LINEAR'
p4131
tp4132
a(S'Polynomial'
p4133
S'POLY'
p4134
tp4135
a(S'RBF'
p4136
S'RBF'
p4137
tp4138
a(S'Sigmoid'
p4139
S'SIGMOID'
p4140
tp4141
a(S'Custom'
p4142
S'PRECOMPUTED'
p4143
tp4144
asS'LIBSVM_VERSION'
p4145
(lp4146
(S'VERSION'
p4147
S'LIBSVM_VERSION'
p4148
tp4149
asS'SVMType'
p4150
(lp4151
(S'C_SVC'
p4152
S'C_SVC'
p4153
tp4154
a(S'Nu_SVC'
p4155
S'NU_SVC'
p4156
tp4157
a(S'OneClass'
p4158
S'ONE_CLASS'
p4159
tp4160
a(S'Epsilon_SVR'
p4161
S'EPSILON_SVR'
p4162
tp4163
a(S'Nu_SVR'
p4164
S'NU_SVR'
p4165
tp4166
assbsS'TPNN'
p4167
(i__main__
ClassDefinition
p4168
(dp4169
g4
I1
sg5
I01
sg6
g4167
sg7
S'TClassifierFD'
p4170
sg9
I00
sg10
(lp4171
sg12
(lp4172
g716
ag720
ag724
ag728
ag733
ag738
ag742
ag284
ag94
ag99
asg29
(dp4173
sbsS'TImputerConstructor_defaults'
p4174
(i__main__
ClassDefinition
p4175
(dp4176
g4
I1
sg5
I01
sg6
g4174
sg7
S'TImputerConstructor'
p4177
sg9
I00
sg10
(lp4178
sg12
(lp4179
(S'TExample'
p4180
S'defaults'
p4181
g4181
S'default values to be imputed instead missing ones'
p4182
I0
I0
I00
Ntp4183
ag157
asg29
(dp4184
sbsS'TConditionalProbabilityEstimatorConstructor'
p4185
(i__main__
ClassDefinition
p4186
(dp4187
g4
I1
sg5
I01
sg6
g4185
sg7
S'TOrange'
p4188
sg9
I01
sg10
(lp4189
sg12
(lp4190
sg29
(dp4191
sbsS'TPreprocessor_takeMissingClasses'
p4192
(i__main__
ClassDefinition
p4193
(dp4194
g4
I1
sg5
I01
sg6
g4192
sg7
S'TPreprocessor'
p4195
sg9
I00
sg10
(lp4196
sg12
(lp4197
sg29
(dp4198
sbsS'TClustersFromIMByAssessor'
p4199
(i__main__
ClassDefinition
p4200
(dp4201
g4
I1
sg5
I01
sg6
g4199
sg7
S'TClustersFromIM'
p4202
sg9
I00
sg10
(lp4203
sg12
(lp4204
(S'TColumnAssessor'
p4205
S'columnAssessor'
p4206
S'column_assessor'
p4207
S'column quality assessor'
p4208
I0
I0
I00
Ntp4209
a(S'TStopIMClusteringByAssessor'
p4210
S'stopCriterion'
p4211
S'stop_criterion'
p4212
S'stop criterion'
p4213
I0
I0
I00
Ntp4214
asg29
(dp4215
sbsS'TRuleValidator_LRS'
p4216
(i__main__
ClassDefinition
p4217
(dp4218
g4
I1
sg5
I01
sg6
g4216
sg7
S'TRuleValidator'
p4219
sg9
I00
sg10
(lp4220
sg12
(lp4221
(S'float'
p4222
S'alpha'
p4223
g4223
g571
I0
I0
I01
Ntp4224
a(S'float'
p4225
S'min_coverage'
p4226
g4226
g571
I0
I0
I01
Ntp4227
a(S'int'
p4228
S'max_rule_complexity'
p4229
g4229
g571
I0
I0
I01
Ntp4230
a(S'float'
p4231
S'min_quality'
p4232
g4232
g571
I0
I0
I01
Ntp4233
asg29
(dp4234
sbsS'TLogRegFitter_Python'
p4235
(i__main__
ClassDefinition
p4236
(dp4237
g4
I1
sg5
I01
sg6
g4235
sg7
S'TLogRegFitter'
p4238
sg9
I00
sg10
(lp4239
sg12
(lp4240
sg29
(dp4241
sbsS'TEarthClassifier'
p4242
(i__main__
ClassDefinition
p4243
(dp4244
g4
I1
sg5
I01
sg6
g4242
sg7
S'TClassifierFD'
p4245
sg9
I00
sg10
(lp4246
sg12
(lp4247
(S'int'
p4248
S'num_preds'
p4249
g4249
S'Number of predictor variables'
p4250
I0
I0
I01
Ntp4251
a(S'int'
p4252
S'num_terms'
p4253
g4253
S'Number of used terms'
p4254
I0
I0
I01
Ntp4255
a(S'int'
p4256
S'max_terms'
p4257
g4257
S'Maximum number of terms'
p4258
I0
I0
I01
Ntp4259
a(S'int'
p4260
S'num_responses'
p4261
g4261
S'Number of response variables'
p4262
I0
I0
I01
Ntp4263
a(S'TBoolList'
p4264
S'best_set'
p4265
g4265
S'Used terms.'
p4266
I0
I0
I00
Ntp4267
a(S'TFloatListList'
p4268
S'dirs'
p4269
g4269
S'max_preds x num_preds matrix'
p4270
I0
I0
I00
Ntp4271
a(S'TFloatListList'
p4272
S'cuts'
p4273
g4273
S'max_preds x num_preds matrix of cuts'
p4274
I0
I0
I00
Ntp4275
a(S'TFloatList'
p4276
S'betas'
p4277
g4277
S'Term coefficients;'
p4278
I0
I0
I00
Ntp4279
ag284
ag94
ag99
asg29
(dp4280
sbsS'TValueList'
p4281
(ipyprops
ClassDefinition
p4282
(dp4283
g4
I0
sg5
I01
sg6
S'TValueList'
p4284
sg7
g136
sg9
I0
sg10
(lp4285
sg12
(lp4286
sg29
(dp4287
sbsS'TTreeExampleSplitter_UnknownsToCommon'
p4288
(i__main__
ClassDefinition
p4289
(dp4290
g4
I1
sg5
I01
sg6
g4288
sg7
S'TTreeExampleSplitter'
p4291
sg9
I00
sg10
(lp4292
sg12
(lp4293
sg29
(dp4294
sbsS'TContDistribution'
p4295
(i__main__
ClassDefinition
p4296
(dp4297
g4
I1
sg5
I01
sg6
g4295
sg7
S'TDistribution'
p4298
sg9
I00
sg10
(lp4299
sg12
(lp4300
(S'TFloatList'
p4301
S'variances'
p4302
g4302
S'variances'
p4303
I0
I0
I00
Ntp4304
a(S'float'
p4305
S'sum'
p4306
g4306
S'weighted sum of elements (i.e. N*average)'
p4307
I01
I0
I01
Ntp4308
a(S'float'
p4309
S'sum2'
p4310
g4310
S'weighted sum of squares of elements'
p4311
I01
I0
I01
Ntp4312
ag1083
ag1087
ag1091
ag1095
ag1099
ag1104
ag1109
ag1114
asg29
(dp4313
sbsS'TTreeDescender_UnknownMergeAsSelector'
p4314
(i__main__
ClassDefinition
p4315
(dp4316
g4
I1
sg5
I01
sg6
g4314
sg7
g1543
sg9
I0
sg10
(lp4317
sg12
(lp4318
sg29
(dp4319
sbsS'TContingencyAttrClass'
p4320
(i__main__
ClassDefinition
p4321
(dp4322
g4
I1
sg5
I01
sg6
g4320
sg7
S'TContingencyClass'
p4323
sg9
I00
sg10
(lp4324
sg12
(lp4325
g1610
ag1615
ag1621
ag1626
ag1631
ag1636
asg29
(dp4326
sbsS'TDomainTransformerConstructor'
p4327
(i__main__
ClassDefinition
p4328
(dp4329
g4
I1
sg5
I01
sg6
g4327
sg7
S'TOrange'
p4330
sg9
I01
sg10
(lp4331
sg12
(lp4332
(S'bool'
p4333
S'preservesOrder'
p4334
S'preserves_order'
p4335
S'a flag telling that original attributes have corresponding attribute in the same order'
p4336
I01
I0
I01
Ntp4337
a(S'bool'
p4338
S'preservesAttributes'
p4339
S'preserves_attributes'
p4340
S'a flag telling whether each original has a corresponding new attribute'
p4341
I01
I0
I01
Ntp4342
asg29
(dp4343
sbsS'TPythonValueSpecial'
p4344
(i__main__
ClassDefinition
p4345
(dp4346
g4
I1
sg5
I01
sg6
g4344
sg7
S'TOrange'
p4347
sg9
I00
sg10
(lp4348
sg12
(lp4349
(S'int'
p4350
S'valueType'
p4351
S'value_type'
p4352
S'value type'
p4353
I0
I0
I01
Ntp4354
asg29
(dp4355
sbsS'TIGConstructor'
p4356
(i__main__
ClassDefinition
p4357
(dp4358
g4
I1
sg5
I01
sg6
g4356
sg7
S'TOrange'
p4359
sg9
I01
sg10
(lp4360
sg12
(lp4361
sg29
(dp4362
sbsS'TProbabilityEstimatorConstructor'
p4363
(i__main__
ClassDefinition
p4364
(dp4365
g4
I1
sg5
I01
sg6
g4363
sg7
S'TOrange'
p4366
sg9
I01
sg10
(lp4367
sg12
(lp4368
sg29
(dp4369
sbsS'TTreeNodeList'
p4370
(ipyprops
ClassDefinition
p4371
(dp4372
g4
I0
sg5
I01
sg6
g4370
sg7
g136
sg9
I0
sg10
(lp4373
sg12
(lp4374
sg29
(dp4375
sbsS'TFloatVariable'
p4376
(i__main__
ClassDefinition
p4377
(dp4378
g4
I1
sg5
I01
sg6
g4376
sg7
S'TVariable'
p4379
sg9
I00
sg10
(lp4380
sg12
(lp4381
(S'float'
p4382
S'startValue'
p4383
S'start_value'
p4384
S'lowest value'
p4385
I0
I0
I01
Ntp4386
a(S'float'
p4387
S'endValue'
p4388
S'end_value'
p4389
S'highest value'
p4390
I0
I0
I01
Ntp4391
a(S'float'
p4392
S'stepValue'
p4393
S'step_value'
p4394
S'step'
p4395
I0
I0
I01
Ntp4396
a(S'int'
p4397
S'numberOfDecimals'
p4398
S'number_of_decimals'
p4399
S'number of digits after decimal point'
p4400
I0
I0
I01
Ntp4401
a(S'bool'
p4402
S'scientificFormat'
p4403
S'scientific_format'
p4404
S'use scientific format in output'
p4405
I0
I0
I01
Ntp4406
a(S'int'
p4407
S'adjustDecimals'
p4408
S'adjust_decimals'
p4409
S"adjust number of decimals according to the values converted (0 - no, 1 - yes, 2 - yes, but haven't seen any yet)"
p4410
I0
I0
I01
Ntp4411
ag326
ag330
ag334
ag339
ag344
ag349
ag354
asg29
(dp4412
sbsS'TImputer_random'
p4413
(i__main__
ClassDefinition
p4414
(dp4415
g4
I1
sg5
I01
sg6
g4413
sg7
S'TImputer'
p4416
sg9
I00
sg10
(lp4417
sg12
(lp4418
(S'bool'
p4419
S'imputeClass'
p4420
S'impute_class'
p4421
S'Tells whether to impute the class values, too (default: true)'
p4422
I0
I0
I01
Ntp4423
a(S'bool'
p4424
S'deterministic'
p4425
g4425
S"tells whether to initialize random by example's CRC (default: false)"
p4426
I0
I0
I01
Ntp4427
a(S'TDistributionList'
p4428
S'distributions'
p4429
g4429
S'probability functions'
p4430
I0
I0
I00
Ntp4431
asg29
(dp4432
sbsS'TFilter_hasMeta'
p4433
(i__main__
ClassDefinition
p4434
(dp4435
g4
I1
sg5
I01
sg6
g4433
sg7
S'TFilter'
p4436
sg9
I00
sg10
(lp4437
sg12
(lp4438
(S'int'
p4439
S'id'
p4440
g4440
S'meta attribute id'
p4441
I0
I0
I01
Ntp4442
ag662
ag666
asg29
(dp4443
sbsS'TProbabilityEstimatorConstructor_kernel'
p4444
(i__main__
ClassDefinition
p4445
(dp4446
g4
I1
sg5
I01
sg6
g4444
sg7
S'TProbabilityEstimatorConstructor'
p4447
sg9
I00
sg10
(lp4448
sg12
(lp4449
(S'float'
p4450
S'minImpact'
p4451
S'min_impact'
p4452
S'Minimal impact the point must have to be counted'
p4453
I0
I0
I01
Ntp4454
a(S'float'
p4455
S'smoothing'
p4456
g4456
S'Smoothing factor'
p4457
I0
I0
I01
Ntp4458
a(S'int'
p4459
S'nPoints'
p4460
S'n_points'
p4461
S'Number of points for curve (negative means the given number of points is inserted in each interval)'
p4462
I0
I0
I01
Ntp4463
asg29
(dp4464
sbsS'TRuleCovererAndRemover_Default'
p4465
(i__main__
ClassDefinition
p4466
(dp4467
g4
I1
sg5
I01
sg6
g4465
sg7
S'TRuleCovererAndRemover'
p4468
sg9
I00
sg10
(lp4469
sg12
(lp4470
sg29
(dp4471
sbsS'TMakeRandomIndices'
p4472
(i__main__
ClassDefinition
p4473
(dp4474
g4
I1
sg5
I01
sg6
g4472
sg7
S'TOrange'
p4475
sg9
I00
sg10
(lp4476
sg12
(lp4477
g685
ag689
ag694
asg29
(dp4478
S'Stratification'
p4479
(lp4480
(S'StratifiedIfPossible'
p4481
S'-1'
p4482
tp4483
a(S'NotStratified'
p4484
I0
tp4485
a(S'Stratified'
p4486
I1
tp4487
assbsS'TFilter_Python'
p4488
(i__main__
ClassDefinition
p4489
(dp4490
g4
I1
sg5
I01
sg6
g4488
sg7
S'TFilter'
p4491
sg9
I00
sg10
(lp4492
sg12
(lp4493
g662
ag666
asg29
(dp4494
sbsS'TRuleBeamInitializer_Default'
p4495
(i__main__
ClassDefinition
p4496
(dp4497
g4
I1
sg5
I01
sg6
g4495
sg7
S'TRuleBeamInitializer'
p4498
sg9
I00
sg10
(lp4499
sg12
(lp4500
sg29
(dp4501
sbsS'TExamplesDistanceConstructor_Python'
p4502
(i__main__
ClassDefinition
p4503
(dp4504
g4
I1
sg5
I01
sg6
g4502
sg7
S'TExamplesDistanceConstructor'
p4505
sg9
I00
sg10
(lp4506
sg12
(lp4507
g1318
asg29
(dp4508
sbsS'TTreeDescender_Python'
p4509
(i__main__
ClassDefinition
p4510
(dp4511
g4
I1
sg5
I01
sg6
g4509
sg7
S'TTreeDescender'
p4512
sg9
I00
sg10
(lp4513
sg12
(lp4514
sg29
(dp4515
sbsS'THeatmap'
p4516
(i__main__
ClassDefinition
p4517
(dp4518
g4
I1
sg5
I0
sg6
g4516
sg7
S'TOrange'
p4519
sg9
I00
sg10
(lp4520
sg12
(lp4521
(S'int'
p4522
S'height'
p4523
g4523
S'bitmap height (in cells)'
p4524
I0
I0
I01
Ntp4525
a(S'int'
p4526
S'width'
p4527
g4527
S'bitmap width (in cells)'
p4528
I0
I0
I01
Ntp4529
a(S'TExampleTable'
p4530
S'examples'
p4531
g4531
S'examples from the whole bitmap'
p4532
I01
I0
I00
Ntp4533
a(S'TIntList'
p4534
S'exampleIndices'
p4535
S'example_indices'
p4536
S"indices to 'examples' (one for row + one at the end)"
p4537
I01
I0
I00
Ntp4538
asg29
(dp4539
sbsS'TSubsetsGenerator_constant'
p4540
(i__main__
ClassDefinition
p4541
(dp4542
g4
I1
sg5
I01
sg6
g4540
sg7
S'TSubsetsGenerator'
p4543
sg9
I00
sg10
(lp4544
sg12
(lp4545
(S'TVarList'
p4546
S'constant'
p4547
g4547
S'a subset that is returned (once!)'
p4548
I0
I0
I00
Ntp4549
ag200
asg29
(dp4550
sbsS'TGaussianNoiseGenerator'
p4551
(i__main__
ClassDefinition
p4552
(dp4553
g4
I1
sg5
I01
sg6
g4551
sg7
S'TChangeExampleGenerator'
p4554
sg9
I00
sg10
(lp4555
sg12
(lp4556
(S'TIntFloatList'
p4557
S'deviations'
p4558
g4558
S"deviations for attributes' values"
p4559
I0
I0
I00
Ntp4560
a(S'TRandomGenerator'
p4561
S'randomGenerator'
p4562
S'random_generator'
p4563
S'random generator'
p4564
I0
I0
I00
Ntp4565
ag299
ag303
asg29
(dp4566
sbsS'TClustersFromDistributionsByAssessor'
p4567
(i__main__
ClassDefinition
p4568
(dp4569
g4
I1
sg5
I01
sg6
g4567
sg7
S'TClustersFromDistributions'
p4570
sg9
I00
sg10
(lp4571
sg12
(lp4572
(S'TDistributionAssessor'
p4573
S'distributionAssessor'
p4574
S'distribution_assessor'
p4575
S'column quality assessor'
p4576
I0
I0
I00
Ntp4577
a(S'TStopDistributionClustering'
p4578
S'stopCriterion'
p4579
S'stop_criterion'
p4580
S'stop criterion'
p4581
I0
I0
I00
Ntp4582
a(S'float'
p4583
S'minProfitProportion'
p4584
S'min_profit_proportion'
p4585
S'minimal merge profit'
p4586
I0
I0
I01
Ntp4587
asg29
(dp4588
sbsS'TExamplesDistance_Hamming'
p4589
(i__main__
ClassDefinition
p4590
(dp4591
g4
I1
sg5
I01
sg6
g4589
sg7
S'TExamplesDistance'
p4592
sg9
I00
sg10
(lp4593
sg12
(lp4594
(S'bool'
p4595
S'ignoreClass'
p4596
S'ignore_class'
p4597
S'if true (default), class value is ignored when computing distances'
p4598
I0
I0
I01
Ntp4599
a(S'bool'
p4600
S'ignoreUnknowns'
p4601
S'ignore_unknowns'
p4602
S'if true (default: false) unknown values are ignored in computation'
p4603
I0
I0
I01
Ntp4604
asg29
(dp4605
sbsS'TDefaultClassifier'
p4606
(i__main__
ClassDefinition
p4607
(dp4608
g4
I1
sg5
I01
sg6
g4606
sg7
S'TClassifier'
p4609
sg9
I00
sg10
(lp4610
sg12
(lp4611
(S'TValue'
p4612
S'defaultVal'
p4613
S'default_val'
p4614
S'default prediction'
p4615
I0
I0
I01
Ntp4616
a(S'TDistribution'
p4617
S'defaultDistribution'
p4618
S'default_distribution'
p4619
S'default distribution'
p4620
I0
I0
I00
Ntp4621
ag94
ag99
asg29
(dp4622
sbsS'TColumnAssessor_Kramer'
p4623
(i__main__
ClassDefinition
p4624
(dp4625
g4
I1
sg5
I01
sg6
g4623
sg7
S'TColumnAssessor'
p4626
sg9
I00
sg10
(lp4627
sg12
(lp4628
sg29
(dp4629
sbsS'TEVDistGetter_Python'
p4630
(i__main__
ClassDefinition
p4631
(dp4632
g4
I1
sg5
I01
sg6
g4630
sg7
S'TEVDistGetter'
p4633
sg9
I00
sg10
(lp4634
sg12
(lp4635
sg29
(dp4636
sbsS'TDiscretization'
p4637
(i__main__
ClassDefinition
p4638
(dp4639
g4
I1
sg5
I01
sg6
g4637
sg7
S'TOrange'
p4640
sg9
I01
sg10
(lp4641
sg12
(lp4642
sg29
(dp4643
sbsS'TTreeSplitConstructor_Measure'
p4644
(i__main__
ClassDefinition
p4645
(dp4646
g4
I1
sg5
I01
sg6
g4644
sg7
S'TTreeSplitConstructor'
p4647
sg9
I01
sg10
(lp4648
sg12
(lp4649
g1253
ag1258
ag754
asg29
(dp4650
sbsS'TTreeNode'
p4651
(i__main__
ClassDefinition
p4652
(dp4653
g4
I1
sg5
I01
sg6
g4651
sg7
S'TOrange'
p4654
sg9
I00
sg10
(lp4655
sg12
(lp4656
(S'TClassifier'
p4657
S'nodeClassifier'
p4658
S'node_classifier'
p4659
S'classifies an example'
p4660
I0
I0
I00
Ntp4661
a(S'TDistribution'
p4662
S'distribution'
p4663
g4663
S'distribution of classes in the node'
p4664
I0
I0
I00
Ntp4665
a(S'TDomainContingency'
p4666
S'contingency'
p4667
g4667
S'domain contingency for examples in the node'
p4668
I0
I0
I00
Ntp4669
a(S'TExampleGenerator'
p4670
S'examples'
p4671
g4671
S'learning examples (if stored)'
p4672
I0
I0
I00
Ntp4673
a(S'int'
p4674
S'weightID'
p4675
S'weight_ID'
p4676
S'weightID used to construct this node'
p4677
I0
I0
I01
Ntp4678
a(S'TClassifier'
p4679
S'branchSelector'
p4680
S'branch_selector'
p4681
S'classifier that select a branch for an example'
p4682
I0
I0
I00
Ntp4683
a(S'TTreeNodeList'
p4684
S'branches'
p4685
g4685
S'classifiers presenting the branches'
p4686
I0
I0
I00
Ntp4687
a(S'TStringList'
p4688
S'branchDescriptions'
p4689
S'branch_descriptions'
p4690
S'descriptions of branches'
p4691
I0
I0
I00
Ntp4692
a(S'TDiscDistribution'
p4693
S'branchSizes'
p4694
S'branch_sizes'
p4695
S'numbers of examples in branches'
p4696
I0
I0
I00
Ntp4697
asg29
(dp4698
sbsS'TTransformValue_IsDefined'
p4699
(i__main__
ClassDefinition
p4700
(dp4701
g4
I1
sg5
I01
sg6
g4699
sg7
S'TTransformValue'
p4702
sg9
I00
sg10
(lp4703
sg12
(lp4704
g776
asg29
(dp4705
sbsS'TFilter_hasClassValue'
p4706
(i__main__
ClassDefinition
p4707
(dp4708
g4
I1
sg5
I01
sg6
g4706
sg7
S'TFilter'
p4709
sg9
I00
sg10
(lp4710
sg12
(lp4711
g662
ag666
asg29
(dp4712
sbsS'TStopDistributionClustering_binary'
p4713
(i__main__
ClassDefinition
p4714
(dp4715
g4
I1
sg5
I01
sg6
g4713
sg7
S'TStopDistributionClustering'
p4716
sg9
I00
sg10
(lp4717
sg12
(lp4718
sg29
(dp4719
sbsS'TIMByRows'
p4720
(i__main__
ClassDefinition
p4721
(dp4722
g4
I1
sg5
I01
sg6
g4720
sg7
S'TOrange'
p4723
sg9
I00
sg10
(lp4724
sg12
(lp4725
(S'int'
p4726
S'varType'
p4727
S'var_type'
p4728
S' class variable type'
p4729
I0
I0
I01
S'Variable_Type'
p4730
tp4731
asg29
(dp4732
sbsS'TRuleFinder'
p4733
(i__main__
ClassDefinition
p4734
(dp4735
g4
I1
sg5
I01
sg6
g4733
sg7
S'TOrange'
p4736
sg9
I01
sg10
(lp4737
sg12
(lp4738
g3929
ag3932
asg29
(dp4739
sbsS'TClassifierByExampleTable'
p4740
(i__main__
ClassDefinition
p4741
(dp4742
g4
I1
sg5
I01
sg6
g4740
sg7
S'TClassifierFD'
p4743
sg9
I00
sg10
(lp4744
sg12
(lp4745
(S'TExampleTable'
p4746
S'sortedExamples'
p4747
S'sorted_examples'
p4748
S'a table of examples'
p4749
I0
I0
I00
Ntp4750
a(S'bool'
p4751
S'containsUnknowns'
p4752
S'contains_unknowns'
p4753
S'if true, the table contains unknown values'
p4754
I0
I0
I01
Ntp4755
a(S'TClassifier'
p4756
S'classifierForUnknown'
p4757
S'classifier_for_unknown'
p4758
S'a classifier for unknown cases'
p4759
I0
I0
I00
Ntp4760
a(S'TEFMDataDescription'
p4761
S'dataDescription'
p4762
S'data_description'
p4763
S'data description'
p4764
I0
I0
I00
Ntp4765
ag284
ag94
ag99
asg29
(dp4766
sbsS'TKernelFunc'
p4767
(i__main__
ClassDefinition
p4768
(dp4769
g4
I1
sg5
I01
sg6
g4767
sg7
S'TOrange'
p4770
sg9
I01
sg10
(lp4771
sg12
(lp4772
sg29
(dp4773
sbsS'TChangeExampleGenerator'
p4774
(i__main__
ClassDefinition
p4775
(dp4776
g4
I1
sg5
I01
sg6
g4774
sg7
S'TAdapterGenerator'
p4777
sg9
I01
sg10
(lp4778
sg12
(lp4779
g299
ag303
asg29
(dp4780
sbsS'TRule'
p4781
(i__main__
ClassDefinition
p4782
(dp4783
g4
I1
sg5
I01
sg6
g4781
sg7
S'TOrange'
p4784
sg9
I00
sg10
(lp4785
sg12
(lp4786
(S'TFilter'
p4787
S'filter'
p4788
g4788
S'stored filter for this rule'
p4789
I0
I0
I00
Ntp4790
a(S'TFilter'
p4791
S'valuesFilter'
p4792
S'values_filter'
p4793
S'Filter_values representation of main filter (sometimes needed)'
p4794
I0
I0
I00
Ntp4795
a(S'TClassifier'
p4796
S'classifier'
p4797
g4797
S'classifies an example'
p4798
I0
I0
I00
Ntp4799
a(S'TLearner'
p4800
S'learner'
p4801
g4801
S'learns a classifier from data'
p4802
I0
I0
I00
Ntp4803
a(S'TRule'
p4804
S'parentRule'
p4805
S'parent_rule'
p4806
g571
I0
I0
I00
Ntp4807
a(S'TDistribution'
p4808
S'baseDist'
p4809
S'base_dist'
p4810
S'initial distribution'
p4811
I0
I0
I00
Ntp4812
a(S'TDistribution'
p4813
S'classDistribution'
p4814
S'class_distribution'
p4815
S'distribution of classes covered by the rule'
p4816
I0
I0
I00
Ntp4817
a(S'TExampleTable'
p4818
S'examples'
p4819
g4819
S'covered examples'
p4820
I0
I0
I00
Ntp4821
a(S'int'
p4822
S'weightID'
p4823
S'weight_ID'
p4824
S'weight for the stored examples'
p4825
I0
I0
I01
Ntp4826
a(S'float'
p4827
S'quality'
p4828
g4828
S'some measure of rule quality'
p4829
I0
I0
I01
Ntp4830
a(S'int'
p4831
S'complexity'
p4832
g4832
g571
I0
I0
I01
Ntp4833
a(S'float'
p4834
S'chi'
p4835
g4835
g571
I0
I0
I01
Ntp4836
a(S'int'
p4837
S'requiredConditions'
p4838
S'required_conditions'
p4839
S'conditions that are mandatory in rule - rule attribute significance avoids these'
p4840
I0
I0
I01
Ntp4841
asg29
(dp4842
sbsS'TIntervalDiscretizer'
p4843
(i__main__
ClassDefinition
p4844
(dp4845
g4
I1
sg5
I01
sg6
g4843
sg7
S'TDiscretizer'
p4846
sg9
I00
sg10
(lp4847
sg12
(lp4848
(S'TFloatList'
p4849
S'points'
p4850
g4850
S'cut-off points'
p4851
I0
I0
I00
Ntp4852
ag776
asg29
(dp4853
sbsS'TClassifierByLookupTable2'
p4854
(i__main__
ClassDefinition
p4855
(dp4856
g4
I1
sg5
I01
sg6
g4854
sg7
S'TClassifierByLookupTable'
p4857
sg9
I00
sg10
(lp4858
sg12
(lp4859
(S'TVariable'
p4860
S'variable1'
p4861
g4861
S'the first attribute used for classification'
p4862
I01
I0
I00
Ntp4863
a(S'TVariable'
p4864
S'variable2'
p4865
g4865
S'the second attribute used for classification'
p4866
I01
I0
I00
Ntp4867
a(S'int'
p4868
S'noOfValues1'
p4869
S'no_of_values1'
p4870
S'number of values of the first attribute'
p4871
I01
I0
I01
Ntp4872
a(S'int'
p4873
S'noOfValues2'
p4874
S'no_of_values2'
p4875
S'number of values of the second attribute'
p4876
I01
I0
I01
Ntp4877
a(S'TEFMDataDescription'
p4878
S'dataDescription'
p4879
S'data_description'
p4880
S'data description'
p4881
I0
I0
I00
Ntp4882
ag85
ag89
ag94
ag99
asg29
(dp4883
sbsS'TPreprocessor_addClassNoise'
p4884
(i__main__
ClassDefinition
p4885
(dp4886
g4
I1
sg5
I01
sg6
g4884
sg7
S'TPreprocessor'
p4887
sg9
I00
sg10
(lp4888
sg12
(lp4889
(S'float'
p4890
S'proportion'
p4891
g4891
S'proportion of changed class values'
p4892
I0
I0
I01
Ntp4893
a(S'TRandomGenerator'
p4894
S'randomGenerator'
p4895
S'random_generator'
p4896
S'random number generator'
p4897
I0
I0
I00
Ntp4898
asg29
(dp4899
sbsS'TExampleGenerator'
p4900
(i__main__
ClassDefinition
p4901
(dp4902
g4
I1
sg5
I01
sg6
g4900
sg7
S'TOrange'
p4903
sg9
I01
sg10
(lp4904
sg12
(lp4905
g299
ag303
asg29
(dp4906
sbsS'TClassifierByLookupTable1'
p4907
(i__main__
ClassDefinition
p4908
(dp4909
g4
I1
sg5
I01
sg6
g4907
sg7
S'TClassifierByLookupTable'
p4910
sg9
I00
sg10
(lp4911
sg12
(lp4912
(S'TVariable'
p4913
S'variable1'
p4914
(g4914
S'variable'
p4915
tp4916
S' attribute used for classification'
p4917
I01
I0
I00
Ntp4918
ag85
ag89
ag94
ag99
asg29
(dp4919
sbsS'TRuleClassifierConstructor_Python'
p4920
(i__main__
ClassDefinition
p4921
(dp4922
g4
I1
sg5
I01
sg6
g4920
sg7
S'TRuleClassifierConstructor'
p4923
sg9
I00
sg10
(lp4924
sg12
(lp4925
sg29
(dp4926
sbsS'TRemoveRedundantOneValue'
p4927
(i__main__
ClassDefinition
p4928
(dp4929
g4
I1
sg5
I01
sg6
g4927
sg7
S'TRemoveRedundant'
p4930
sg9
I00
sg10
(lp4931
sg12
(lp4932
(S'bool'
p4933
S'onData'
p4934
S'on_data'
p4935
S'observe the actual number of value on the data (not on attribute definitions)'
p4936
I0
I0
I01
Ntp4937
ag1296
asg29
(dp4938
sbsS'TDistributionAssessor_Relief'
p4939
(i__main__
ClassDefinition
p4940
(dp4941
g4
I1
sg5
I01
sg6
g4939
sg7
S'TDistributionAssessor'
p4942
sg9
I00
sg10
(lp4943
sg12
(lp4944
sg29
(dp4945
sbsS'TEnumVariable'
p4946
(i__main__
ClassDefinition
p4947
(dp4948
g4
I1
sg5
I01
sg6
g4946
sg7
S'TVariable'
p4949
sg9
I00
sg10
(lp4950
sg12
(lp4951
(S'TStringList'
p4952
S'values'
p4953
g4953
S"attribute's values"
p4954
I0
I0
I00
Ntp4955
a(S'int'
p4956
S'baseValue'
p4957
S'base_value'
p4958
S'the index of the base value'
p4959
I0
I0
I01
Ntp4960
ag326
ag330
ag334
ag339
ag344
ag349
ag354
asg29
(dp4961
sbsS'THeatmapConstructor'
p4962
(i__main__
ClassDefinition
p4963
(dp4964
g4
I1
sg5
I0
sg6
g4962
sg7
S'TOrange'
p4965
sg9
I00
sg10
(lp4966
sg12
(lp4967
(S'TExampleTable'
p4968
S'sortedExamples'
p4969
S'sorted_examples'
p4970
S'sortedExamples'
p4971
I01
I0
I00
Ntp4972
a(S'int'
p4973
S'nColumns'
p4974
S'n_columns'
p4975
S'number of columns'
p4976
I01
I0
I01
Ntp4977
a(S'int'
p4978
S'nRows'
p4979
S'n_rows'
p4980
S'number of rows'
p4981
I01
I0
I01
Ntp4982
a(S'int'
p4983
S'nClasses'
p4984
S'n_classes'
p4985
S'number of classes (0 if the data is not classified)'
p4986
I01
I0
I01
Ntp4987
asg29
(dp4988
sbsS'TConditionalProbabilityEstimatorConstructor_loess'
p4989
(i__main__
ClassDefinition
p4990
(dp4991
g4
I1
sg5
I01
sg6
g4989
sg7
S'TConditionalProbabilityEstimatorConstructor'
p4992
sg9
I00
sg10
(lp4993
sg12
(lp4994
(S'float'
p4995
S'windowProportion'
p4996
S'window_proportion'
p4997
S'The proportion of points in a window for LR'
p4998
I0
I0
I01
Ntp4999
a(S'int'
p5000
S'nPoints'
p5001
S'n_points'
p5002
S'The number of points on curve'
p5003
I0
I0
I01
Ntp5004
a(S'int'
p5005
S'distributionMethod'
p5006
S'distribution_method'
p5007
S" Meaning of the 'nPoints'"
p5008
I0
I0
I01
S'ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod'
p5009
tp5010
asg29
(dp5011
S'DistributionMethod'
p5012
(lp5013
(S'Minimal'
p5014
S'DISTRIBUTE_MINIMAL'
p5015
tp5016
a(S'Factor'
p5017
S'DISTRIBUTE_FACTOR'
p5018
tp5019
a(S'Fixed'
p5020
S'DISTRIBUTE_FIXED'
p5021
tp5022
a(S'Uniform'
p5023
S'DISTRIBUTE_UNIFORM'
p5024
tp5025
a(S'Maximal'
p5026
S'DISTRIBUTE_MAXIMAL'
p5027
tp5028
assbsS'TPreprocessor_addMissing'
p5029
(i__main__
ClassDefinition
p5030
(dp5031
g4
I1
sg5
I01
sg6
g5029
sg7
S'TPreprocessor'
p5032
sg9
I00
sg10
(lp5033
sg12
(lp5034
(S'TVariableFloatMap'
p5035
S'proportions'
p5036
g5036
S'proportion of removed values for individual values'
p5037
I0
I0
I00
Ntp5038
a(S'float'
p5039
S'defaultProportion'
p5040
S'default_proportion'
p5041
S'default proportion of removed values (for attributes not specified above)'
p5042
I0
I0
I01
Ntp5043
a(S'int'
p5044
S'specialType'
p5045
S'special_type'
p5046
S'special value type (1=DC, 2=DK)'
p5047
I0
I0
I01
Ntp5048
a(S'TRandomGenerator'
p5049
S'randomGenerator'
p5050
S'random_generator'
p5051
S'random number generator'
p5052
I0
I0
I00
Ntp5053
asg29
(dp5054
sbsS'TRuleBeamCandidateSelector'
p5055
(i__main__
ClassDefinition
p5056
(dp5057
g4
I1
sg5
I01
sg6
g5055
sg7
S'TOrange'
p5058
sg9
I01
sg10
(lp5059
sg12
(lp5060
sg29
(dp5061
sbsS'TSubsetsGenerator_minMaxSize'
p5062
(i__main__
ClassDefinition
p5063
(dp5064
g4
I1
sg5
I01
sg6
g5062
sg7
S'TSubsetsGenerator'
p5065
sg9
I00
sg10
(lp5066
sg12
(lp5067
(S'int'
p5068
S'min'
p5069
g5069
S'minimal subset size'
p5070
I0
I0
I01
Ntp5071
a(S'int'
p5072
S'max'
p5073
g5073
S'maximal subset size'
p5074
I0
I0
I01
Ntp5075
ag200
asg29
(dp5076
sbsS'TMakeRandomIndicesN'
p5077
(i__main__
ClassDefinition
p5078
(dp5079
g4
I1
sg5
I01
sg6
g5077
sg7
S'TMakeRandomIndices'
p5080
sg9
I00
sg10
(lp5081
sg12
(lp5082
(S'TFloatList'
p5083
g2203
g2203
S'probabilities of indices (last is 1-sum(p))'
p5084
I0
I0
I00
Ntp5085
ag685
ag689
ag694
asg29
(dp5086
sbsS'TTreeExampleSplitter_UnknownsToAll'
p5087
(i__main__
ClassDefinition
p5088
(dp5089
g4
I1
sg5
I01
sg6
g5087
sg7
S'TTreeExampleSplitter'
p5090
sg9
I00
sg10
(lp5091
sg12
(lp5092
sg29
(dp5093
sbsS'TValueFilter_stringList'
p5094
(i__main__
ClassDefinition
p5095
(dp5096
g4
I1
sg5
I01
sg6
g5094
sg7
S'TValueFilter'
p5097
sg9
I00
sg10
(lp5098
sg12
(lp5099
(S'TStringList'
p5100
S'values'
p5101
g5101
S'accepted values'
p5102
I0
I0
I00
Ntp5103
a(S'bool'
p5104
S'caseSensitive'
p5105
S'case_sensitive'
p5106
S'if true (default), the comparison is case sensitive'
p5107
I0
I0
I01
Ntp5108
ag1012
ag1017
asg29
(dp5109
sbsS'TContingencyClass'
p5110
(i__main__
ClassDefinition
p5111
(dp5112
g4
I1
sg5
I01
sg6
g5110
sg7
S'TContingency'
p5113
sg9
I01
sg10
(lp5114
sg12
(lp5115
g1610
ag1615
ag1621
ag1626
ag1631
ag1636
asg29
(dp5116
sbsS'TAssociationClassifier'
p5117
(i__main__
ClassDefinition
p5118
(dp5119
g4
I1
sg5
I01
sg6
g5117
sg7
S'TClassifierFD'
p5120
sg9
I00
sg10
(lp5121
sg12
(lp5122
(S'TAssociationRules'
p5123
S'rules'
p5124
g5124
S'association rules'
p5125
I0
I0
I00
Ntp5126
a(S'int'
p5127
S'voteWeight'
p5128
S'vote_weight'
p5129
S'vote weight (s=support, c=confidence, p=product)'
p5130
I0
I0
I01
Ntp5131
ag284
ag94
ag99
asg29
(dp5132
sbsS'TDomainDistributions'
p5133
(ipyprops
ClassDefinition
p5134
(dp5135
g4
I0
sg5
I01
sg6
S'TDomainDistributions'
p5136
sg7
g136
sg9
I0
sg10
(lp5137
sg12
(lp5138
sg29
(dp5139
sbsS'TSVMLearnerSparse'
p5140
(i__main__
ClassDefinition
p5141
(dp5142
g4
I1
sg5
I01
sg6
g5140
sg7
S'TSVMLearner'
p5143
sg9
I00
sg10
(lp5144
sg12
(lp5145
(S'bool'
p5146
S'useNonMeta'
p5147
S'use_non_meta'
p5148
S'include non meta attributes in the learning process'
p5149
I0
I0
I01
Ntp5150
ag4074
ag4079
ag4083
ag4087
ag4091
ag4095
ag4099
ag4102
ag4106
ag4109
ag4113
ag4117
ag4121
ag4126
ag110
asg29
(dp5151
sbsS'TDomain'
p5152
(i__main__
ClassDefinition
p5153
(dp5154
g4
I1
sg5
I01
sg6
g5152
sg7
S'TOrange'
p5155
sg9
I00
sg10
(lp5156
sg12
(lp5157
(S'TVariable'
p5158
S'classVar'
p5159
S'class_var'
p5160
S'class variable'
p5161
I01
I0
I00
Ntp5162
a(S'TVarList'
p5163
S'attributes'
p5164
(g5164
S'features'
p5165
tp5166
S' list of attributes, excluding the class'
p5167
I01
I0
I00
Ntp5168
a(S'TVarList'
p5169
S'variables'
p5170
g5170
S'list of attributes, including the class at the end of the list'
p5171
I01
I0
I00
Ntp5172
a(S'TVarList'
p5173
S'classVars'
p5174
S'class_vars'
p5175
S'list of class variables, if multiple; else None'
p5176
I01
I0
I00
Ntp5177
a(S'int'
p5178
S'version'
p5179
g5179
S"unique version identifier; it's changed each time a domain is changed"
p5180
I01
I0
I01
Ntp5181
asg29
(dp5182
sbsS'TTreePruner_SameMajority'
p5183
(i__main__
ClassDefinition
p5184
(dp5185
g4
I1
sg5
I01
sg6
g5183
sg7
S'TTreePruner'
p5186
sg9
I00
sg10
(lp5187
sg12
(lp5188
sg29
(dp5189
sbsS'TSubsetsGenerator_constant_iterator'
p5190
(i__main__
ClassDefinition
p5191
(dp5192
g4
I1
sg5
I01
sg6
g5190
sg7
S'TSubsetsGenerator_iterator'
p5193
sg9
I00
sg10
(lp5194
sg12
(lp5195
(S'TVarList'
p5196
S'constant'
p5197
g5197
S'a subset that is returned (once!)'
p5198
I0
I0
I00
Ntp5199
a(S'bool'
p5200
S'moreToCome'
p5201
S'more_to_come'
p5202
g571
I0
I0
I01
Ntp5203
ag503
asg29
(dp5204
sbsS'TExampleDistConstructor'
p5205
(i__main__
ClassDefinition
p5206
(dp5207
g4
I1
sg5
I01
sg6
g5205
sg7
S'TOrange'
p5208
sg9
I01
sg10
(lp5209
sg12
(lp5210
sg29
(dp5211
sbsS'TIMByIMByRows'
p5212
(i__main__
ClassDefinition
p5213
(dp5214
g4
I1
sg5
I01
sg6
g5212
sg7
S'TIMConstructor'
p5215
sg9
I00
sg10
(lp5216
sg12
(lp5217
g1200
asg29
(dp5218
sbsS'TAlignmentList'
p5219
(ipyprops
ClassDefinition
p5220
(dp5221
g4
I0
sg5
I01
sg6
g5219
sg7
g136
sg9
I0
sg10
(lp5222
sg12
(lp5223
sg29
(dp5224
sbsS'TDiscrete2Continuous'
p5225
(i__main__
ClassDefinition
p5226
(dp5227
g4
I1
sg5
I01
sg6
g5225
sg7
S'TTransformValue'
p5228
sg9
I00
sg10
(lp5229
sg12
(lp5230
(S'int'
p5231
S'value'
p5232
g5232
S'target value'
p5233
I0
I0
I01
Ntp5234
a(S'bool'
p5235
S'invert'
p5236
g5236
S'give 1.0 to values not equal to the target'
p5237
I0
I0
I01
Ntp5238
a(S'bool'
p5239
S'zeroBased'
p5240
S'zero_based'
p5241
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p5242
I0
I0
I01
Ntp5243
ag776
asg29
(dp5244
sbsS'TDomainDiscretization'
p5245
(i__main__
ClassDefinition
p5246
(dp5247
g4
I1
sg5
I01
sg6
g5245
sg7
S'TOrange'
p5248
sg9
I00
sg10
(lp5249
sg12
(lp5250
(S'TDiscretization'
p5251
S'discretization'
p5252
g5252
S'discretization'
p5253
I0
I0
I00
Ntp5254
asg29
(dp5255
sbsS'TColumnAssessor_m'
p5256
(i__main__
ClassDefinition
p5257
(dp5258
g4
I1
sg5
I01
sg6
g5256
sg7
S'TColumnAssessor'
p5259
sg9
I00
sg10
(lp5260
sg12
(lp5261
(S'float'
p5262
g1163
g1163
S'm for m-estimate'
p5263
I0
I0
I01
Ntp5264
asg29
(dp5265
sbsS'TImputer_defaults'
p5266
(i__main__
ClassDefinition
p5267
(dp5268
g4
I1
sg5
I01
sg6
g5266
sg7
S'TImputer'
p5269
sg9
I00
sg10
(lp5270
sg12
(lp5271
(S'TExample'
p5272
S'defaults'
p5273
g5273
S'values that are to be inserted instead of missing ones'
p5274
I0
I0
I00
Ntp5275
asg29
(dp5276
sbsS'TRuleEvaluator_mEVC'
p5277
(i__main__
ClassDefinition
p5278
(dp5279
g4
I1
sg5
I01
sg6
g5277
sg7
S'TRuleEvaluator'
p5280
sg9
I00
sg10
(lp5281
sg12
(lp5282
(S'float'
p5283
g1163
g1163
S'Parameter m for m-estimate after EVC correction'
p5284
I0
I0
I01
Ntp5285
a(S'TEVDistGetter'
p5286
S'evDistGetter'
p5287
S'ev_dist_getter'
p5288
S'get EVC distribution for chi correction'
p5289
I0
I0
I00
Ntp5290
a(S'TVariable'
p5291
S'probVar'
p5292
S'prob_var'
p5293
S'probability coverage variable (meta usually)'
p5294
I0
I0
I00
Ntp5295
a(S'TRuleValidator'
p5296
S'validator'
p5297
g5297
S'rule validator for best rule'
p5298
I0
I0
I00
Ntp5299
a(S'int'
p5300
S'min_improved'
p5301
g5301
S'minimal number of improved examples'
p5302
I0
I0
I01
Ntp5303
a(S'float'
p5304
S'min_improved_perc'
p5305
g5305
S'minimal percentage of improved examples'
p5306
I0
I0
I01
Ntp5307
a(S'TRule'
p5308
S'bestRule'
p5309
S'best_rule'
p5310
S'best rule found and evaluated given conditions (min_improved, validator)'
p5311
I0
I0
I00
Ntp5312
a(S'float'
p5313
S'ruleAlpha'
p5314
S'rule_alpha'
p5315
S"minimal 'true' rule significance"
p5316
I0
I0
I01
Ntp5317
a(S'float'
p5318
S'attributeAlpha'
p5319
S'attribute_alpha'
p5320
S'minimal attribute significance'
p5321
I0
I0
I01
Ntp5322
a(S'bool'
p5323
S'returnExpectedProb'
p5324
S'return_expected_prob'
p5325
S'if true, evaluator returns expected class probability, if false, current class probability'
p5326
I0
I0
I01
Ntp5327
a(S'int'
p5328
S'optimismReduction'
p5329
S'optimism_reduction'
p5330
S'to select optimstic (0), pessimistic (1) or EVC (2) evaluation'
p5331
I0
I0
I01
Ntp5332
asg29
(dp5333
sbsS'TContingency'
p5334
(i__main__
ClassDefinition
p5335
(dp5336
g4
I1
sg5
I01
sg6
g5334
sg7
S'TOrange'
p5337
sg9
I00
sg10
(lp5338
sg12
(lp5339
g1610
ag1615
ag1621
ag1626
ag1631
ag1636
asg29
(dp5340
sbsS'TImputer_Python'
p5341
(i__main__
ClassDefinition
p5342
(dp5343
g4
I1
sg5
I01
sg6
g5341
sg7
S'TImputer'
p5344
sg9
I00
sg10
(lp5345
sg12
(lp5346
sg29
(dp5347
sbsS'TClassifierGenerator'
p5348
(i__main__
ClassDefinition
p5349
(dp5350
g4
I1
sg5
I01
sg6
g5348
sg7
S'TExampleGenerator'
p5351
sg9
I00
sg10
(lp5352
sg12
(lp5353
(S'TClassifier'
p5354
S'classify'
p5355
g5355
S'classifier'
p5356
I0
I0
I00
Ntp5357
ag299
ag303
asg29
(dp5358
sbsS'TRuleDataStoppingCriteria_Python'
p5359
(i__main__
ClassDefinition
p5360
(dp5361
g4
I1
sg5
I01
sg6
g5359
sg7
S'TRuleDataStoppingCriteria'
p5362
sg9
I00
sg10
(lp5363
sg12
(lp5364
sg29
(dp5365
sbsS'TTreeDescender_UnknownToCommonSelector'
p5366
(i__main__
ClassDefinition
p5367
(dp5368
g4
I1
sg5
I01
sg6
g5366
sg7
g1543
sg9
I0
sg10
(lp5369
sg12
(lp5370
sg29
(dp5371
sbsS'THierarchicalCluster'
p5372
(i__main__
ClassDefinition
p5373
(dp5374
g4
I1
sg5
I01
sg6
g5372
sg7
S'TOrange'
p5375
sg9
I00
sg10
(lp5376
sg12
(lp5377
(S'THierarchicalClusterList'
p5378
S'branches'
p5379
g5379
S'subclusters'
p5380
I0
I0
I00
Ntp5381
a(S'float'
p5382
S'height'
p5383
g5383
S'height'
p5384
I0
I0
I01
Ntp5385
a(S'TIntList'
p5386
S'mapping'
p5387
g5387
S'indices to the list of all elements in the clustering'
p5388
I0
I0
I00
Ntp5389
a(S'int'
p5390
S'first'
p5391
g5391
S"the index into 'elements' to the first element of the cluster"
p5392
I0
I0
I01
Ntp5393
a(S'int'
p5394
S'last'
p5395
g5395
S"the index into 'elements' to the one after the last element of the cluster"
p5396
I0
I0
I01
Ntp5397
asg29
(dp5398
sbsS'TPreprocessIM'
p5399
(i__main__
ClassDefinition
p5400
(dp5401
g4
I1
sg5
I01
sg6
g5399
sg7
S'TOrange'
p5402
sg9
I01
sg10
(lp5403
sg12
(lp5404
sg29
(dp5405
sbsS'TLongList'
p5406
(ipyprops
ClassDefinition
p5407
(dp5408
g4
I0
sg5
I01
sg6
g5406
sg7
g136
sg9
I0
sg10
(lp5409
sg12
(lp5410
sg29
(dp5411
sbsS'TBasketFeeder'
p5412
(i__main__
ClassDefinition
p5413
(dp5414
g4
I1
sg5
I01
sg6
g5412
sg7
S'TOrange'
p5415
sg9
I00
sg10
(lp5416
sg12
(lp5417
(S'bool'
p5418
S'dontStore'
p5419
S'dont_store'
p5420
S'disables items storing'
p5421
I0
I0
I01
Ntp5422
a(S'bool'
p5423
S'dontCheckStored'
p5424
S'dont_check_stored'
p5425
S'disables items lookup in the global cache'
p5426
I0
I0
I01
Ntp5427
a(S'TDomain'
p5428
S'domain'
p5429
g5429
S'domain where the meta attributes are stored'
p5430
I0
I0
I00
Ntp5431
a(S'TDomain'
p5432
S'sourceDomain'
p5433
S'source_domain'
p5434
S'domain with items that can be reused'
p5435
I0
I0
I00
Ntp5436
asg29
(dp5437
sbsS'TRuleEvaluator_Laplace'
p5438
(i__main__
ClassDefinition
p5439
(dp5440
g4
I1
sg5
I01
sg6
g5438
sg7
S'TRuleEvaluator'
p5441
sg9
I00
sg10
(lp5442
sg12
(lp5443
sg29
(dp5444
sbsS'TColumnAssessor_N'
p5445
(i__main__
ClassDefinition
p5446
(dp5447
g4
I1
sg5
I01
sg6
g5445
sg7
S'TColumnAssessor'
p5448
sg9
I00
sg10
(lp5449
sg12
(lp5450
sg29
(dp5451
sbsS'TSubsetsGenerator_minMaxSize_iterator'
p5452
(i__main__
ClassDefinition
p5453
(dp5454
g4
I1
sg5
I01
sg6
g5452
sg7
S'TSubsetsGenerator_iterator'
p5455
sg9
I00
sg10
(lp5456
sg12
(lp5457
(S'int'
p5458
g2493
g2493
g571
I01
I0
I01
Ntp5459
a(S'int'
p5460
S'max'
p5461
g5461
S'maximal subset size'
p5462
I0
I0
I01
Ntp5463
a(S'bool'
p5464
S'moreToCome'
p5465
S'more_to_come'
p5466
g571
I01
I0
I01
Ntp5467
ag503
asg29
(dp5468
sbsS'TExamplesDistanceConstructor_Lp'
p5469
(i__main__
ClassDefinition
p5470
(dp5471
g4
I1
sg5
I01
sg6
g5469
sg7
S'TExamplesDistanceConstructor_Normalized'
p5472
sg9
I00
sg10
(lp5473
sg12
(lp5474
(S'float'
p5475
g2203
g2203
g2203
I0
I0
I01
Ntp5476
ag2037
ag2042
ag1318
asg29
(dp5477
sbsS'TComputeDomainContingency'
p5478
(i__main__
ClassDefinition
p5479
(dp5480
g4
I1
sg5
I01
sg6
g5478
sg7
S'TOrange'
p5481
sg9
I00
sg10
(lp5482
sg12
(lp5483
g28
asg29
(dp5484
sbsS'TExample'
p5485
(i__main__
ClassDefinition
p5486
(dp5487
g4
I1
sg5
I01
sg6
g5485
sg7
S'TOrange'
p5488
sg9
I00
sg10
(lp5489
sg12
(lp5490
g2600
ag2603
asg29
(dp5491
sbsS'TFixedDiscretization'
p5492
(i__main__
ClassDefinition
p5493
(dp5494
g4
I1
sg5
I01
sg6
g5492
sg7
S'TDiscretization'
p5495
sg9
I00
sg10
(lp5496
sg12
(lp5497
(S'TFloatList'
p5498
S'points'
p5499
g5499
S'cut-off points'
p5500
I0
I0
I00
Ntp5501
asg29
(dp5502
sbsS'TDomainContingency'
p5503
(ipyprops
ClassDefinition
p5504
(dp5505
g4
I0
sg5
I01
sg6
S'TDomainContingency'
p5506
sg7
g136
sg9
I0
sg10
(lp5507
sg12
(lp5508
sg29
(dp5509
sbsS'TPreprocessor_addGaussianClassNoise'
p5510
(i__main__
ClassDefinition
p5511
(dp5512
g4
I1
sg5
I01
sg6
g5510
sg7
S'TPreprocessor'
p5513
sg9
I00
sg10
(lp5514
sg12
(lp5515
(S'float'
p5516
S'deviation'
p5517
g5517
S'class deviation'
p5518
I0
I0
I01
Ntp5519
a(S'TRandomGenerator'
p5520
S'randomGenerator'
p5521
S'random_generator'
p5522
S'random number generator'
p5523
I0
I0
I00
Ntp5524
asg29
(dp5525
sbsS'TRuleDataStoppingCriteria'
p5526
(i__main__
ClassDefinition
p5527
(dp5528
g4
I1
sg5
I01
sg6
g5526
sg7
S'TOrange'
p5529
sg9
I01
sg10
(lp5530
sg12
(lp5531
sg29
(dp5532
sbsS'TPreprocessor_filter'
p5533
(i__main__
ClassDefinition
p5534
(dp5535
g4
I1
sg5
I01
sg6
g5533
sg7
S'TPreprocessor'
p5536
sg9
I00
sg10
(lp5537
sg12
(lp5538
(S'TFilter'
p5539
S'filter'
p5540
g5540
S'filter'
p5541
I0
I0
I00
Ntp5542
asg29
(dp5543
sbsS'TSOMNodeList'
p5544
(ipyprops
ClassDefinition
p5545
(dp5546
g4
I0
sg5
I01
sg6
g5544
sg7
g136
sg9
I0
sg10
(lp5547
sg12
(lp5548
sg29
(dp5549
sbsS'TExampleDistBySorting'
p5550
(i__main__
ClassDefinition
p5551
(dp5552
g4
I1
sg5
I01
sg6
g5550
sg7
S'TExampleDistConstructor'
p5553
sg9
I00
sg10
(lp5554
sg12
(lp5555
sg29
(dp5556
sbsS'TGraphAsMatrix'
p5557
(i__main__
ClassDefinition
p5558
(dp5559
g4
I1
sg5
I01
sg6
g5557
sg7
S'TGraph'
p5560
sg9
I00
sg10
(lp5561
sg12
(lp5562
g1434
ag1439
ag1443
asg29
(dp5563
sbsS'TValueFilter_discrete'
p5564
(i__main__
ClassDefinition
p5565
(dp5566
g4
I1
sg5
I01
sg6
g5564
sg7
S'TValueFilter'
p5567
sg9
I00
sg10
(lp5568
sg12
(lp5569
(S'TValueList'
p5570
S'values'
p5571
g5571
S'accepted values'
p5572
I0
I0
I00
Ntp5573
a(S'bool'
p5574
S'negate'
p5575
g5575
S'negate'
p5576
I0
I0
I01
Ntp5577
ag1012
ag1017
asg29
(dp5578
sbsS'TAssociationRulesInducer'
p5579
(i__main__
ClassDefinition
p5580
(dp5581
g4
I1
sg5
I01
sg6
g5579
sg7
S'TOrange'
p5582
sg9
I00
sg10
(lp5583
sg12
(lp5584
(S'int'
p5585
S'maxItemSets'
p5586
S'max_item_sets'
p5587
S'maximal number of itemsets (increase if you want)'
p5588
I0
I0
I01
Ntp5589
a(S'float'
p5590
S'confidence'
p5591
g5591
S'required confidence'
p5592
I0
I0
I01
Ntp5593
a(S'float'
p5594
S'support'
p5595
g5595
S'required support'
p5596
I0
I0
I01
Ntp5597
a(S'bool'
p5598
S'classificationRules'
p5599
S'classification_rules'
p5600
S'if true, rules will have the class and only the class attribute on the right-hand side'
p5601
I0
I0
I01
Ntp5602
a(S'bool'
p5603
S'storeExamples'
p5604
S'store_examples'
p5605
S'if true, each rule is going to have tables with references to examples which match its left side or both sides'
p5606
I0
I0
I01
Ntp5607
asg29
(dp5608
sbsS'TMakeRandomIndices2'
p5609
(i__main__
ClassDefinition
p5610
(dp5611
g4
I1
sg5
I01
sg6
g5609
sg7
S'TMakeRandomIndices'
p5612
sg9
I00
sg10
(lp5613
sg12
(lp5614
(S'float'
p5615
S'p0'
p5616
g5616
S"a proportion or a number of 0's"
p5617
I0
I0
I01
Ntp5618
ag685
ag689
ag694
asg29
(dp5619
sbsS'TTreeStopCriteria'
p5620
(i__main__
ClassDefinition
p5621
(dp5622
g4
I1
sg5
I01
sg6
g5620
sg7
S'TOrange'
p5623
sg9
I00
sg10
(lp5624
sg12
(lp5625
sg29
(dp5626
sbsS'TPreprocessor_addMissingClasses'
p5627
(i__main__
ClassDefinition
p5628
(dp5629
g4
I1
sg5
I01
sg6
g5627
sg7
S'TPreprocessor'
p5630
sg9
I00
sg10
(lp5631
sg12
(lp5632
(S'float'
p5633
S'proportion'
p5634
g5634
S'proportion of removed class values'
p5635
I0
I0
I01
Ntp5636
a(S'int'
p5637
S'specialType'
p5638
S'special_type'
p5639
S'special value type (1=DC, 2=DK)'
p5640
I0
I0
I01
Ntp5641
a(S'TRandomGenerator'
p5642
S'randomGenerator'
p5643
S'random_generator'
p5644
S'random number generator'
p5645
I0
I0
I00
Ntp5646
asg29
(dp5647
sbsS'TLookupLearner'
p5648
(i__main__
ClassDefinition
p5649
(dp5650
g4
I1
sg5
I01
sg6
g5648
sg7
S'TLearner'
p5651
sg9
I00
sg10
(lp5652
sg12
(lp5653
(S'TLearner'
p5654
S'learnerForUnknown'
p5655
S'learner_for_unknown'
p5656
S'a learner for classifying cases not found in the table'
p5657
I0
I0
I00
Ntp5658
a(S'bool'
p5659
S'allowFastLookups'
p5660
S'allow_fast_lookups'
p5661
S'if true, it constructs LookupClassifiers for <=3 attributes'
p5662
I0
I0
I01
Ntp5663
a(S'int'
p5664
S'unknownsHandling'
p5665
S'unknowns_handling'
p5666
S'0 omit examples with unknowns, 1 distribute them, 2 keep them in table'
p5667
I0
I0
I01
Ntp5668
ag110
asg29
(dp5669
sbsS'TBasketExampleGenerator'
p5670
(i__main__
ClassDefinition
p5671
(dp5672
g4
I1
sg5
I01
sg6
g5670
sg7
S'TFileExampleGenerator'
p5673
sg9
I00
sg10
(lp5674
sg12
(lp5675
g1581
ag1586
ag1591
ag299
ag303
asg29
(dp5676
sbsS'TRuleEvaluator_Entropy'
p5677
(i__main__
ClassDefinition
p5678
(dp5679
g4
I1
sg5
I01
sg6
g5677
sg7
S'TRuleEvaluator'
p5680
sg9
I00
sg10
(lp5681
sg12
(lp5682
sg29
(dp5683
sbsS'TMeasureAttribute_chiSquare'
p5684
(i__main__
ClassDefinition
p5685
(dp5686
g4
I1
sg5
I01
sg6
g5684
sg7
S'TMeasureAttributeFromProbabilities'
p5687
sg9
I00
sg10
(lp5688
sg12
(lp5689
(S'bool'
p5690
S'computeProbabilities'
p5691
S'compute_probabilities'
p5692
g571
I0
I0
I01
Ntp5693
ag862
ag867
ag873
ag878
ag883
ag888
ag893
asg29
(dp5694
sbsS'TDistribution'
p5695
(i__main__
ClassDefinition
p5696
(dp5697
g4
I1
sg5
I01
sg6
g5695
sg7
S'TSomeValue'
p5698
sg9
I01
sg10
(lp5699
sg12
(lp5700
g1083
ag1087
ag1091
ag1095
ag1099
ag1104
ag1109
ag1114
asg29
(dp5701
sbsS'TExamplesDistance_DTW'
p5702
(i__main__
ClassDefinition
p5703
(dp5704
g4
I1
sg5
I01
sg6
g5702
sg7
S'TExamplesDistance_Normalized'
p5705
sg9
I00
sg10
(lp5706
sg12
(lp5707
(S'int'
p5708
S'dtwDistance'
p5709
S'dtw_distance'
p5710
S' distance measure between individual attributes (default: square of difference)'
p5711
I0
I0
I01
S'ExamplesDistance_DTW_DistanceType'
p5712
tp5713
ag447
ag451
ag455
ag459
ag464
ag468
ag473
asg29
(dp5714
S'DistanceType'
p5715
(lp5716
(S'Euclidean'
p5717
I0
tp5718
a(S'Derivative'
p5719
I1
tp5720
assbsS'TTreeExampleSplitter_UnknownsToRandom'
p5721
(i__main__
ClassDefinition
p5722
(dp5723
g4
I1
sg5
I01
sg6
g5721
sg7
S'TTreeExampleSplitter'
p5724
sg9
I00
sg10
(lp5725
sg12
(lp5726
sg29
(dp5727
sbsS'TTreePruner_m'
p5728
(i__main__
ClassDefinition
p5729
(dp5730
g4
I1
sg5
I01
sg6
g5728
sg7
S'TTreePruner'
p5731
sg9
I00
sg10
(lp5732
sg12
(lp5733
(S'float'
p5734
g1163
g1163
S'm for m-estimate'
p5735
I0
I0
I01
Ntp5736
asg29
(dp5737
sbsS'TImputer'
p5738
(i__main__
ClassDefinition
p5739
(dp5740
g4
I1
sg5
I01
sg6
g5738
sg7
S'TOrange'
p5741
sg9
I01
sg10
(lp5742
sg12
(lp5743
sg29
(dp5744
sbsS'TExamplesDistanceConstructor_DTW'
p5745
(i__main__
ClassDefinition
p5746
(dp5747
g4
I1
sg5
I01
sg6
g5745
sg7
S'TExamplesDistanceConstructor_Normalized'
p5748
sg9
I00
sg10
(lp5749
sg12
(lp5750
(S'int'
p5751
S'dtwDistance'
p5752
S'dtw_distance'
p5753
S'distance measure between individual attributes (default: square of difference)'
p5754
I0
I0
I01
Ntp5755
ag2037
ag2042
ag1318
asg29
(dp5756
sbsS'TStopIMClusteringByAssessor_n'
p5757
(i__main__
ClassDefinition
p5758
(dp5759
g4
I1
sg5
I01
sg6
g5757
sg7
S'TStopIMClusteringByAssessor'
p5760
sg9
I00
sg10
(lp5761
sg12
(lp5762
(S'int'
p5763
g2519
g2519
S'number of clusters'
p5764
I0
I0
I01
Ntp5765
asg29
(dp5766
sbsS'TVarListList'
p5767
(ipyprops
ClassDefinition
p5768
(dp5769
g4
I0
sg5
I01
sg6
g5767
sg7
g136
sg9
I0
sg10
(lp5770
sg12
(lp5771
sg29
(dp5772
sbsS'TRandomGenerator'
p5773
(i__main__
ClassDefinition
p5774
(dp5775
g4
I1
sg5
I01
sg6
g5773
sg7
S'TOrange'
p5776
sg9
I00
sg10
(lp5777
sg12
(lp5778
(S'int'
p5779
S'initseed'
p5780
g5780
S'initial random seed'
p5781
I0
I0
I01
Ntp5782
a(S'int'
p5783
S'uses'
p5784
g5784
S'#times a number was returned'
p5785
I0
I0
I01
Ntp5786
asg29
(dp5787
sbsS'TThresholdCA'
p5788
(i__main__
ClassDefinition
p5789
(dp5790
g4
I1
sg5
I01
sg6
g5788
sg7
S'TOrange'
p5791
sg9
I00
sg10
(lp5792
sg12
(lp5793
sg29
(dp5794
sbsS'TFloatListList'
p5795
(ipyprops
ClassDefinition
p5796
(dp5797
g4
I0
sg5
I01
sg6
g5795
sg7
g136
sg9
I0
sg10
(lp5798
sg12
(lp5799
sg29
(dp5800
sbsS'TPreprocessor_imputeByLearner'
p5801
(i__main__
ClassDefinition
p5802
(dp5803
g4
I1
sg5
I01
sg6
g5801
sg7
S'TPreprocessor'
p5804
sg9
I00
sg10
(lp5805
sg12
(lp5806
(S'TLearner'
p5807
S'learner'
p5808
g5808
S'learner used for inducing a model for imputation'
p5809
I0
I0
I00
Ntp5810
asg29
(dp5811
sbsS'TRuleBeamRefiner_Python'
p5812
(i__main__
ClassDefinition
p5813
(dp5814
g4
I1
sg5
I01
sg6
g5812
sg7
S'TRuleBeamRefiner'
p5815
sg9
I00
sg10
(lp5816
sg12
(lp5817
sg29
(dp5818
sbsS'TClassifierFromVarFD'
p5819
(i__main__
ClassDefinition
p5820
(dp5821
g4
I1
sg5
I01
sg6
g5819
sg7
S'TClassifierFD'
p5822
sg9
I00
sg10
(lp5823
sg12
(lp5824
(S'int'
p5825
S'position'
p5826
g5826
S'position of the attribute in domain'
p5827
I0
I0
I01
Ntp5828
a(S'TTransformValue'
p5829
S'transformer'
p5830
g5830
S'transformer'
p5831
I0
I0
I00
Ntp5832
a(S'TDistribution'
p5833
S'distributionForUnknown'
p5834
S'distribution_for_unknown'
p5835
S'distribution for unknown value'
p5836
I0
I0
I00
Ntp5837
a(S'bool'
p5838
S'transformUnknowns'
p5839
S'transform_unknowns'
p5840
S'if false (default is true), unknowns stay unknown or are changed into distribution if given'
p5841
I0
I0
I01
Ntp5842
ag284
ag94
ag99
asg29
(dp5843
sbsS'TSimpleTreeLearner'
p5844
(i__main__
ClassDefinition
p5845
(dp5846
g4
I1
sg5
I01
sg6
g5844
sg7
S'TLearner'
p5847
sg9
I00
sg10
(lp5848
sg12
(lp5849
(S'float'
p5850
S'maxMajority'
p5851
S'max_majority'
p5852
g571
I0
I0
I01
Ntp5853
a(S'int'
p5854
S'minInstances'
p5855
S'min_instances'
p5856
g571
I0
I0
I01
Ntp5857
a(S'int'
p5858
S'maxDepth'
p5859
S'max_depth'
p5860
g571
I0
I0
I01
Ntp5861
a(S'float'
p5862
S'skipProb'
p5863
S'skip_prob'
p5864
g571
I0
I0
I01
Ntp5865
a(S'TRandomGenerator'
p5866
S'randomGenerator'
p5867
S'random_generator'
p5868
g571
I0
I0
I00
Ntp5869
ag110
asg29
(dp5870
sbsS'TImputer_model'
p5871
(i__main__
ClassDefinition
p5872
(dp5873
g4
I1
sg5
I01
sg6
g5871
sg7
S'TImputer'
p5874
sg9
I00
sg10
(lp5875
sg12
(lp5876
(S'TClassifierList'
p5877
S'models'
p5878
g5878
S'classifiers'
p5879
I0
I0
I00
Ntp5880
asg29
(dp5881
sbsS'TLogRegLearner'
p5882
(i__main__
ClassDefinition
p5883
(dp5884
g4
I1
sg5
I01
sg6
g5882
sg7
S'TLearner'
p5885
sg9
I00
sg10
(lp5886
sg12
(lp5887
(S'TLogRegFitter'
p5888
S'fitter'
p5889
g5889
S'fits beta coefficients and calculates beta errors.'
p5890
I0
I0
I00
Ntp5891
a(S'TImputerConstructor'
p5892
S'imputerConstructor'
p5893
S'imputer_constructor'
p5894
S'if present, it constructs an imputer for unknown values'
p5895
I0
I0
I00
Ntp5896
a(S'TDomainContinuizer'
p5897
S'domainContinuizer'
p5898
S'domain_continuizer'
p5899
S'if present, it constructs continuous domain if needed; if absent, default is used'
p5900
I0
I0
I00
Ntp5901
ag110
asg29
(dp5902
sbsS'TPreprocessor_takeMissing'
p5903
(i__main__
ClassDefinition
p5904
(dp5905
g4
I1
sg5
I01
sg6
g5903
sg7
S'TPreprocessor'
p5906
sg9
I00
sg10
(lp5907
sg12
(lp5908
sg29
(dp5909
sbsS'TMeasureAttribute_IM'
p5910
(i__main__
ClassDefinition
p5911
(dp5912
g4
I1
sg5
I01
sg6
g5910
sg7
S'TMeasureAttribute'
p5913
sg9
I00
sg10
(lp5914
sg12
(lp5915
(S'TIMConstructor'
p5916
S'IMconstructor'
p5917
g5917
S'incompatibility matrix constructor'
p5918
I0
I0
I00
Ntp5919
a(S'TColumnAssessor'
p5920
S'columnAssessor'
p5921
S'column_assessor'
p5922
S'column quality assessor'
p5923
I0
I0
I00
Ntp5924
ag878
ag883
ag888
ag893
asg29
(dp5925
sbsS'TFeatureByDistributions'
p5926
(i__main__
ClassDefinition
p5927
(dp5928
g4
I1
sg5
I01
sg6
g5926
sg7
S'TFeatureInducer'
p5929
sg9
I00
sg10
(lp5930
sg12
(lp5931
(S'TClustersFromDistributions'
p5932
S'clustersFromDistributions'
p5933
S'clusters_from_distributions'
p5934
S'clustering algorithm'
p5935
I0
I0
I00
Ntp5936
a(S'int'
p5937
S'completion'
p5938
g5938
S' decides how to determine the class for points not covered by any cluster'
p5939
I0
I0
I01
S'FeatureByDistributions_Completion'
p5940
tp5941
asg29
(dp5942
S'Completion'
p5943
(lp5944
(S'NoCompletion'
p5945
S'completion_no'
p5946
tp5947
a(S'CompletionByDefault'
p5948
S'completion_default'
p5949
tp5950
a(S'CompletionByBayes'
p5951
S'completion_bayes'
p5952
tp5953
assbsS'TCostMatrix'
p5954
(i__main__
ClassDefinition
p5955
(dp5956
g4
I1
sg5
I01
sg6
g5954
sg7
S'TOrange'
p5957
sg9
I00
sg10
(lp5958
sg12
(lp5959
(S'TVariable'
p5960
S'classVar'
p5961
S'class_var'
p5962
S'attribute to which the matrix applies'
p5963
I0
I0
I00
Ntp5964
a(S'int'
p5965
S'dimension'
p5966
g5966
S'dimension (should equal classVar.noOfValues())'
p5967
I01
I0
I01
Ntp5968
asg29
(dp5969
sbsS'TStopIMClusteringByAssessor_noProfit'
p5970
(i__main__
ClassDefinition
p5971
(dp5972
g4
I1
sg5
I01
sg6
g5970
sg7
S'TStopIMClusteringByAssessor'
p5973
sg9
I00
sg10
(lp5974
sg12
(lp5975
(S'float'
p5976
S'minProfitProportion'
p5977
S'min_profit_proportion'
p5978
S'minimal allowable profit proportion'
p5979
I0
I0
I01
Ntp5980
asg29
(dp5981
sbsS'TRemoveUnusedValues'
p5982
(i__main__
ClassDefinition
p5983
(dp5984
g4
I1
sg5
I01
sg6
g5982
sg7
S'TOrange'
p5985
sg9
I00
sg10
(lp5986
sg12
(lp5987
(S'bool'
p5988
S'removeOneValued'
p5989
S'remove_one_valued'
p5990
S'if true (default is false), one valued attributes are also removed'
p5991
I0
I0
I01
Ntp5992
asg29
(dp5993
sbsS'TExamplesDistance_Normalized'
p5994
(i__main__
ClassDefinition
p5995
(dp5996
g4
I1
sg5
I01
sg6
g5994
sg7
S'TExamplesDistance'
p5997
sg9
I01
sg10
(lp5998
sg12
(lp5999
g447
ag451
ag455
ag459
ag464
ag468
ag473
asg29
(dp6000
sbsS'TExamplesDistance_Euclidean'
p6001
(i__main__
ClassDefinition
p6002
(dp6003
g4
I1
sg5
I01
sg6
g6001
sg7
S'TExamplesDistance_Normalized'
p6004
sg9
I00
sg10
(lp6005
sg12
(lp6006
(S'TDomainDistributions'
p6007
S'distributions'
p6008
g6008
S'distributions (of discrete attributes only)'
p6009
I0
I0
I00
Ntp6010
a(S'TAttributedFloatList'
p6011
S'bothSpecialDist'
p6012
S'both_special_dist'
p6013
S'distances between discrete attributes if both values are unknown'
p6014
I0
I0
I00
Ntp6015
ag447
ag451
ag455
ag459
ag464
ag468
ag473
asg29
(dp6016
sbsS'TPreprocessor_take'
p6017
(i__main__
ClassDefinition
p6018
(dp6019
g4
I1
sg5
I01
sg6
g6017
sg7
S'TPreprocessor'
p6020
sg9
I00
sg10
(lp6021
sg12
(lp6022
(S'TVariableFilterMap'
p6023
S'values'
p6024
g6024
S'variable-filter pairs'
p6025
I0
I0
I00
Ntp6026
a(S'bool'
p6027
S'conjunction'
p6028
g6028
S'decides whether to take conjunction or disjunction of values'
p6029
I0
I0
I01
Ntp6030
asg29
(dp6031
sbsS'TIMConstructor'
p6032
(i__main__
ClassDefinition
p6033
(dp6034
g4
I1
sg5
I01
sg6
g6032
sg7
S'TOrange'
p6035
sg9
I01
sg10
(lp6036
sg12
(lp6037
g1200
asg29
(dp6038
sbsS'TRuleFinder_Python'
p6039
(i__main__
ClassDefinition
p6040
(dp6041
g4
I1
sg5
I01
sg6
g6039
sg7
S'TRuleFinder'
p6042
sg9
I00
sg10
(lp6043
sg12
(lp6044
g3929
ag3932
asg29
(dp6045
sbsS'TTabDelimExampleGenerator'
p6046
(i__main__
ClassDefinition
p6047
(dp6048
g4
I1
sg5
I01
sg6
g6046
sg7
S'TFileExampleGenerator'
p6049
sg9
I00
sg10
(lp6050
sg12
(lp6051
(S'TIntList'
p6052
S'attributeTypes'
p6053
S'attribute_types'
p6054
S'types of attributes (-1 normal, 0 skip, <-1 = meta ID)'
p6055
I0
I0
I00
Ntp6056
a(S'int'
p6057
S'classPos'
p6058
S'class_pos'
p6059
S'position of the class attribute'
p6060
I0
I0
I01
Ntp6061
a(S'TIntList'
p6062
S'classPoses'
p6063
S'class_poses'
p6064
S'positions of class attributes if there are multiple; otherwise None'
p6065
I0
I0
I00
Ntp6066
a(S'int'
p6067
S'basketPos'
p6068
S'basket_pos'
p6069
S'position of the (virtual) basket attribute'
p6070
I0
I0
I01
Ntp6071
a(S'int'
p6072
S'headerLines'
p6073
S'header_lines'
p6074
S'number of header lines (3 for .tab, 1 for .txt)'
p6075
I0
I0
I01
Ntp6076
a(S'bool'
p6077
S'csv'
p6078
g6078
S"also allow ',' as a separator"
p6079
I0
I0
I01
Ntp6080
a(S'TBasketFeeder'
p6081
S'basketFeeder'
p6082
S'basket_feeder'
p6083
S'takes care of inserting the meta attributes from the basket if need be'
p6084
I0
I0
I00
Ntp6085
ag1581
ag1586
ag1591
ag299
ag303
asg29
(dp6086
sbsS'TRandomClassifier'
p6087
(i__main__
ClassDefinition
p6088
(dp6089
g4
I1
sg5
I01
sg6
g6087
sg7
S'TClassifier'
p6090
sg9
I00
sg10
(lp6091
sg12
(lp6092
(S'TDistribution'
p6093
S'probabilities'
p6094
g6094
S'probabilities of predictions'
p6095
I0
I0
I00
Ntp6096
ag94
ag99
asg29
(dp6097
sbsS'TkNNLearner'
p6098
(i__main__
ClassDefinition
p6099
(dp6100
g4
I1
sg5
I01
sg6
g6098
sg7
S'TLearner'
p6101
sg9
I00
sg10
(lp6102
sg12
(lp6103
(S'float'
p6104
g1159
g1159
S'number of neighbours (0 for sqrt of #examples)'
p6105
I0
I0
I01
Ntp6106
a(S'bool'
p6107
S'rankWeight'
p6108
S'rank_weight'
p6109
S'enable weighting by ranks'
p6110
I0
I0
I01
Ntp6111
a(S'TExamplesDistanceConstructor'
p6112
S'distanceConstructor'
p6113
S'distance_constructor'
p6114
S'metrics'
p6115
I0
I0
I00
Ntp6116
ag110
asg29
(dp6117
sbsS'TTreeDescender_UnknownToNode'
p6118
(i__main__
ClassDefinition
p6119
(dp6120
g4
I1
sg5
I01
sg6
g6118
sg7
g1543
sg9
I0
sg10
(lp6121
sg12
(lp6122
sg29
(dp6123
sbsS'TIntFloatList'
p6124
(ipyprops
ClassDefinition
p6125
(dp6126
g4
I0
sg5
I01
sg6
g6124
sg7
g136
sg9
I0
sg10
(lp6127
sg12
(lp6128
sg29
(dp6129
sbsS'TDistributionAssessor_mf'
p6130
(i__main__
ClassDefinition
p6131
(dp6132
g4
I1
sg5
I01
sg6
g6130
sg7
S'TDistributionAssessor'
p6133
sg9
I00
sg10
(lp6134
sg12
(lp6135
(S'float'
p6136
g1163
g1163
S'm for m-estimate'
p6137
I0
I0
I01
Ntp6138
asg29
(dp6139
sbsS'TExampleClusters'
p6140
(i__main__
ClassDefinition
p6141
(dp6142
g4
I1
sg5
I01
sg6
g6140
sg7
S'TGeneralExampleClustering'
p6143
sg9
I00
sg10
(lp6144
sg12
(lp6145
(S'TExampleCluster'
p6146
S'root'
p6147
g6147
S'root of cluster hierarchy'
p6148
I0
I0
I00
Ntp6149
a(S'float'
p6150
S'quality'
p6151
g6151
S"'quality' of clustering"
p6152
I0
I0
I01
Ntp6153
asg29
(dp6154
sbsS'TExamplesDistance_Python'
p6155
(i__main__
ClassDefinition
p6156
(dp6157
g4
I1
sg5
I01
sg6
g6155
sg7
S'TExamplesDistance'
p6158
sg9
I00
sg10
(lp6159
sg12
(lp6160
sg29
(dp6161
sbsS'TCostLearner'
p6162
(i__main__
ClassDefinition
p6163
(dp6164
g4
I1
sg5
I01
sg6
g6162
sg7
S'TMajorityLearner'
p6165
sg9
I00
sg10
(lp6166
sg12
(lp6167
(S'TCostMatrix'
p6168
S'cost'
p6169
g6169
S'cost matrix'
p6170
I0
I0
I00
Ntp6171
ag802
ag807
ag110
asg29
(dp6172
sbsS'TEFMDataDescription'
p6173
(i__main__
ClassDefinition
p6174
(dp6175
g4
I1
sg5
I01
sg6
g6173
sg7
S'TOrange'
p6176
sg9
I00
sg10
(lp6177
S'domainDistributions'
p6178
asg12
(lp6179
(S'TDomain'
p6180
S'domain'
p6181
g6181
S'domain'
p6182
I01
I0
I00
Ntp6183
asg29
(dp6184
sbsS'TClassifierFD'
p6185
(i__main__
ClassDefinition
p6186
(dp6187
g4
I1
sg5
I01
sg6
g6185
sg7
S'TClassifier'
p6188
sg9
I00
sg10
(lp6189
sg12
(lp6190
g284
ag94
ag99
asg29
(dp6191
sbsS'TPreprocessor_drop'
p6192
(i__main__
ClassDefinition
p6193
(dp6194
g4
I1
sg5
I01
sg6
g6192
sg7
S'TPreprocessor'
p6195
sg9
I00
sg10
(lp6196
sg12
(lp6197
(S'TVariableFilterMap'
p6198
S'values'
p6199
g6199
S'variable-filter pairs'
p6200
I0
I0
I00
Ntp6201
a(S'bool'
p6202
S'conjunction'
p6203
g6203
S'decides whether to take conjunction or disjunction of values'
p6204
I0
I0
I01
Ntp6205
asg29
(dp6206
sbsS'TTreeDescender_UnknownToCommonBranch'
p6207
(i__main__
ClassDefinition
p6208
(dp6209
g4
I1
sg5
I01
sg6
g6207
sg7
g1543
sg9
I0
sg10
(lp6210
sg12
(lp6211
sg29
(dp6212
sbsS'TPreprocessor_addNoise'
p6213
(i__main__
ClassDefinition
p6214
(dp6215
g4
I1
sg5
I01
sg6
g6213
sg7
S'TPreprocessor'
p6216
sg9
I00
sg10
(lp6217
sg12
(lp6218
(S'TVariableFloatMap'
p6219
S'proportions'
p6220
g6220
S'proportion of changed values for individual attributes'
p6221
I0
I0
I00
Ntp6222
a(S'float'
p6223
S'defaultProportion'
p6224
S'default_proportion'
p6225
S'default proportion of changed values (for attributes not specified above)'
p6226
I0
I0
I01
Ntp6227
a(S'TRandomGenerator'
p6228
S'randomGenerator'
p6229
S'random_generator'
p6230
S'random number generator'
p6231
I0
I0
I00
Ntp6232
asg29
(dp6233
sbsS'TStopIMClusteringByAssessor_binary'
p6234
(i__main__
ClassDefinition
p6235
(dp6236
g4
I1
sg5
I01
sg6
g6234
sg7
S'TStopIMClusteringByAssessor'
p6237
sg9
I00
sg10
(lp6238
sg12
(lp6239
sg29
(dp6240
sbsS'TColumnAssessor_mf'
p6241
(i__main__
ClassDefinition
p6242
(dp6243
g4
I1
sg5
I01
sg6
g6241
sg7
S'TColumnAssessor'
p6244
sg9
I00
sg10
(lp6245
sg12
(lp6246
(S'float'
p6247
g1163
g1163
S'm for m-estimate'
p6248
I0
I0
I01
Ntp6249
asg29
(dp6250
sbsS'TExamplesDistanceConstructor'
p6251
(i__main__
ClassDefinition
p6252
(dp6253
g4
I1
sg5
I01
sg6
g6251
sg7
S'TOrange'
p6254
sg9
I01
sg10
(lp6255
sg12
(lp6256
g1318
asg29
(dp6257
sbsS'TSubsetsGenerator'
p6258
(i__main__
ClassDefinition
p6259
(dp6260
g4
I1
sg5
I01
sg6
g6258
sg7
S'TOrange'
p6261
sg9
I01
sg10
(lp6262
sg12
(lp6263
g200
asg29
(dp6264
sbsS'TPreprocessor_addCensorWeight'
p6265
(i__main__
ClassDefinition
p6266
(dp6267
g4
I1
sg5
I01
sg6
g6265
sg7
S'TPreprocessor'
p6268
sg9
I00
sg10
(lp6269
sg12
(lp6270
(S'TVariable'
p6271
S'outcomeVar'
p6272
S'outcome_var'
p6273
S'outcome variable'
p6274
I0
I0
I00
Ntp6275
a(S'TVariable'
p6276
S'timeVar'
p6277
S'time_var'
p6278
S'time variable'
p6279
I0
I0
I00
Ntp6280
a(S'TValue'
p6281
S'eventValue'
p6282
S'event_value'
p6283
S'event (fail) value'
p6284
I0
I0
I01
Ntp6285
a(S'int'
p6286
S'method'
p6287
g6287
S' weighting method'
p6288
I0
I0
I01
S'Preprocessor_addCensorWeight_Method'
p6289
tp6290
a(S'float'
p6291
S'maxTime'
p6292
S'max_time'
p6293
S'maximal time'
p6294
I0
I0
I01
Ntp6295
a(S'bool'
p6296
S'addComplementary'
p6297
S'add_complementary'
p6298
S'if true (default is false), complementary examples are added for censored examples'
p6299
I0
I0
I01
Ntp6300
asg29
(dp6301
S'Method'
p6302
(lp6303
(S'Linear'
p6304
S'TPreprocessor_addCensorWeight::linear'
p6305
tp6306
a(S'KM'
p6307
S'TPreprocessor_addCensorWeight::km'
p6308
tp6309
a(S'Bayes'
p6310
S'TPreprocessor_addCensorWeight::bayes'
p6311
tp6312
assbsS'TRuleBeamCandidateSelector_Python'
p6313
(i__main__
ClassDefinition
p6314
(dp6315
g4
I1
sg5
I01
sg6
g6313
sg7
S'TRuleBeamCandidateSelector'
p6316
sg9
I00
sg10
(lp6317
sg12
(lp6318
sg29
(dp6319
sbsS'TIntList'
p6320
(ipyprops
ClassDefinition
p6321
(dp6322
g4
I0
sg5
I01
sg6
g6320
sg7
g136
sg9
I0
sg10
(lp6323
sg12
(lp6324
sg29
(dp6325
sbsS'TEntropyDiscretization'
p6326
(i__main__
ClassDefinition
p6327
(dp6328
g4
I1
sg5
I01
sg6
g6326
sg7
S'TDiscretization'
p6329
sg9
I00
sg10
(lp6330
sg12
(lp6331
(S'int'
p6332
S'maxNumberOfIntervals'
p6333
S'max_number_of_intervals'
p6334
S'maximal number of intervals; default = 0 (no limits)'
p6335
I0
I0
I01
Ntp6336
a(S'bool'
p6337
S'forceAttribute'
p6338
S'force_attribute'
p6339
S'minimal number of intervals; default = 0 (no limits)'
p6340
I0
I0
I01
Ntp6341
asg29
(dp6342
sbsS'TIMBySorting'
p6343
(i__main__
ClassDefinition
p6344
(dp6345
g4
I1
sg5
I01
sg6
g6343
sg7
S'TIMConstructor'
p6346
sg9
I00
sg10
(lp6347
sg12
(lp6348
g1200
asg29
(dp6349
sbsS'TTreeSplitConstructor_Threshold'
p6350
(i__main__
ClassDefinition
p6351
(dp6352
g4
I1
sg5
I01
sg6
g6350
sg7
S'TTreeSplitConstructor_Measure'
p6353
sg9
I00
sg10
(lp6354
sg12
(lp6355
g1253
ag1258
ag754
asg29
(dp6356
sbsS'TImputerConstructor_asValue'
p6357
(i__main__
ClassDefinition
p6358
(dp6359
g4
I1
sg5
I01
sg6
g6357
sg7
S'TImputerConstructor'
p6360
sg9
I00
sg10
(lp6361
sg12
(lp6362
g157
asg29
(dp6363
sbsS'TGaussianDistribution'
p6364
(i__main__
ClassDefinition
p6365
(dp6366
g4
I1
sg5
I01
sg6
g6364
sg7
S'TDistribution'
p6367
sg9
I00
sg10
(lp6368
sg12
(lp6369
(S'float'
p6370
S'mean'
p6371
g6371
S'mu'
p6372
I0
I0
I01
Ntp6373
a(S'float'
p6374
S'sigma'
p6375
g6375
S'sigma'
p6376
I0
I0
I01
Ntp6377
ag1083
ag1087
ag1091
ag1095
ag1099
ag1104
ag1109
ag1114
asg29
(dp6378
sbsS'TExampleDistVector'
p6379
(i__main__
ClassDefinition
p6380
(dp6381
g4
I1
sg5
I01
sg6
g6379
sg7
S'TOrange'
p6382
sg9
I00
sg10
(lp6383
sg12
(lp6384
sg29
(dp6385
sbsS'TConditionalProbabilityEstimatorList'
p6386
(ipyprops
ClassDefinition
p6387
(dp6388
g4
I0
sg5
I01
sg6
g6386
sg7
g136
sg9
I0
sg10
(lp6389
sg12
(lp6390
sg29
(dp6391
sbsS'TRuleBeamFilter_Width'
p6392
(i__main__
ClassDefinition
p6393
(dp6394
g4
I1
sg5
I01
sg6
g6392
sg7
S'TRuleBeamFilter'
p6395
sg9
I00
sg10
(lp6396
sg12
(lp6397
(S'int'
p6398
S'width'
p6399
g6399
g571
I0
I0
I01
Ntp6400
asg29
(dp6401
sbsS'TProbabilityEstimator'
p6402
(i__main__
ClassDefinition
p6403
(dp6404
g4
I1
sg5
I01
sg6
g6402
sg7
S'TOrange'
p6405
sg9
I01
sg10
(lp6406
sg12
(lp6407
g1466
ag1471
asg29
(dp6408
sbsS'TIMClustering'
p6409
(i__main__
ClassDefinition
p6410
(dp6411
g4
I1
sg5
I01
sg6
g6409
sg7
S'TOrange'
p6412
sg9
I00
sg10
(lp6413
sg12
(lp6414
(S'TIM'
p6415
S'im'
p6416
g6416
S'incompatibilty matrix'
p6417
I0
I0
I00
Ntp6418
a(S'TIntList'
p6419
S'clusters'
p6420
g6420
S'cluster index for each matrix column'
p6421
I0
I0
I00
Ntp6422
a(S'int'
p6423
S'maxCluster'
p6424
S'max_cluster'
p6425
S'the highest cluster index'
p6426
I0
I0
I01
Ntp6427
a(S'float'
p6428
S'quality'
p6429
g6429
S'cluster quality'
p6430
I0
I0
I01
Ntp6431
asg29
(dp6432
sbsS'TRuleStoppingCriteria'
p6433
(i__main__
ClassDefinition
p6434
(dp6435
g4
I1
sg5
I01
sg6
g6433
sg7
S'TOrange'
p6436
sg9
I01
sg10
(lp6437
sg12
(lp6438
sg29
(dp6439
sbsS'TImputerConstructor_model'
p6440
(i__main__
ClassDefinition
p6441
(dp6442
g4
I1
sg5
I01
sg6
g6440
sg7
S'TImputerConstructor'
p6443
sg9
I00
sg10
(lp6444
sg12
(lp6445
(S'TLearner'
p6446
S'learnerDiscrete'
p6447
S'learner_discrete'
p6448
S'learner for discrete attributes'
p6449
I0
I0
I00
Ntp6450
a(S'TLearner'
p6451
S'learnerContinuous'
p6452
S'learner_continuous'
p6453
S'learner for continuous attributes'
p6454
I0
I0
I00
Ntp6455
a(S'bool'
p6456
S'useClass'
p6457
S'use_class'
p6458
S'tells whether to use class value in imputation (default: false)'
p6459
I0
I0
I01
Ntp6460
ag157
asg29
(dp6461
sbsS'TFindNearestConstructor_BruteForce'
p6462
(i__main__
ClassDefinition
p6463
(dp6464
g4
I1
sg5
I01
sg6
g6462
sg7
S'TFindNearestConstructor'
p6465
sg9
I00
sg10
(lp6466
sg12
(lp6467
g1813
ag1818
asg29
(dp6468
sbsS'TImputerConstructor'
p6469
(i__main__
ClassDefinition
p6470
(dp6471
g4
I1
sg5
I01
sg6
g6469
sg7
S'TOrange'
p6472
sg9
I01
sg10
(lp6473
sg12
(lp6474
g157
asg29
(dp6475
sbsS'TPreprocessor'
p6476
(i__main__
ClassDefinition
p6477
(dp6478
g4
I1
sg5
I01
sg6
g6476
sg7
S'TOrange'
p6479
sg9
I01
sg10
(lp6480
sg12
(lp6481
sg29
(dp6482
sbsS'TDiscretizer'
p6483
(i__main__
ClassDefinition
p6484
(dp6485
g4
I1
sg5
I01
sg6
g6483
sg7
S'TTransformValue'
p6486
sg9
I01
sg10
(lp6487
sg12
(lp6488
g776
asg29
(dp6489
sbsS'TIMByRowsPreprocessor'
p6490
(i__main__
ClassDefinition
p6491
(dp6492
g4
I1
sg5
I01
sg6
g6490
sg7
S'TOrange'
p6493
sg9
I01
sg10
(lp6494
sg12
(lp6495
sg29
(dp6496
sbsS'TTreeStopCriteria_common'
p6497
(i__main__
ClassDefinition
p6498
(dp6499
g4
I1
sg5
I01
sg6
g6497
sg7
S'TTreeStopCriteria'
p6500
sg9
I00
sg10
(lp6501
sg12
(lp6502
(S'float'
p6503
S'maxMajority'
p6504
S'max_majority'
p6505
S'a maximal proportion of majority class for division to continue'
p6506
I0
I0
I01
Ntp6507
a(S'float'
p6508
S'minExamples'
p6509
S'min_examples'
p6510
S'a minimal number of examples for division to continue'
p6511
I0
I0
I01
Ntp6512
asg29
(dp6513
sbsS'TTreeStopCriteria_Python'
p6514
(i__main__
ClassDefinition
p6515
(dp6516
g4
I1
sg5
I01
sg6
g6514
sg7
S'TTreeStopCriteria'
p6517
sg9
I00
sg10
(lp6518
sg12
(lp6519
sg29
(dp6520
sbsS'TExamplesDistanceConstructor_Maximal'
p6521
(i__main__
ClassDefinition
p6522
(dp6523
g4
I1
sg5
I01
sg6
g6521
sg7
S'TExamplesDistanceConstructor_Normalized'
p6524
sg9
I00
sg10
(lp6525
sg12
(lp6526
g2037
ag2042
ag1318
asg29
(dp6527
sbsS'TIGByIM'
p6528
(i__main__
ClassDefinition
p6529
(dp6530
g4
I1
sg5
I01
sg6
g6528
sg7
S'TIGConstructor'
p6531
sg9
I00
sg10
(lp6532
sg12
(lp6533
(S'TIMConstructor'
p6534
S'IMconstructor'
p6535
g6535
S'IM constructor'
p6536
I0
I0
I00
Ntp6537
asg29
(dp6538
sbsS'TRuleEvaluator_LRS'
p6539
(i__main__
ClassDefinition
p6540
(dp6541
g4
I1
sg5
I01
sg6
g6539
sg7
S'TRuleEvaluator'
p6542
sg9
I00
sg10
(lp6543
sg12
(lp6544
(S'TRuleList'
p6545
S'rules'
p6546
g6546
g571
I0
I0
I00
Ntp6547
a(S'bool'
p6548
S'storeRules'
p6549
S'store_rules'
p6550
g571
I0
I0
I01
Ntp6551
asg29
(dp6552
sbs.