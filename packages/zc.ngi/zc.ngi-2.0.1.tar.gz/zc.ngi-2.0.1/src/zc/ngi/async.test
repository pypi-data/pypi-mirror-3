=================================
asyncore-based NGI implementation
=================================

The async module provides an NGI implementation based on the Python
standard asyncore framework.  It provides 2 objects to be invoked
directly by applications:

connector
   an implementation of the NGI IConnector interface

listener
   an implementation of the NGI IListener interface

The implementation creates a dedicated thread to run an asyncore main
loop on import.

There's nothing else to say about the implementation from a usage
point of view.  The remainder of this document provides a
demonstration (test) of using the implementation to create a simple
word-count server and client.

Demonstration: wordcount
========================

The wordcount module has a simple word-count server and client
implementation.  We'll run these using the async implementation.

Let's start the wordcount server:

    >>> import zc.ngi.wordcount
    >>> import zc.ngi.async
    >>> port = zc.ngi.wordcount.start_server_process()

We passed the listener to be used.

Now, we'll start a number of threads that connect to the server and
check word counts of some sample documents.  If all goes well, we
shouldn't get any output.

    >>> import threading
    >>> addr = 'localhost', port
    >>> threads = [threading.Thread(target=zc.ngi.wordcount.client_thread,
    ...                             args=(zc.ngi.async.connect, addr))
    ...            for i in range(200)]

    >>> _ = [thread.start() for thread in threads]
    >>> _ = [thread.join() for thread in threads]

Large input
===========

    >>> import zc.ngi.blocking
    >>> output, input = zc.ngi.blocking.open(addr, zc.ngi.async.connect,
    ...                                      timeout=1.0)

    >>> output.write('hello world\n' * 20000 + '\0')
    >>> input.readline(timeout=1.0)
    '20000 40000 240000\n'

Iterable input
==============

We can pass data to the server using an iterator.  To illustrate this,
we'll use the blocking interface:

    >>> def hello(name):
    ...     yield "hello\n"
    ...     yield name
    ...     yield "\0"

    >>> output.writelines(hello('world'), timeout=1.0)
    >>> input.readline(timeout=1.0)
    '1 2 11\n'

.. Error handling:

   If we pass a non-iterable to writelines, we'll get an immediate
   error.  To demonstrate this we'll violate our output file and
   access its _connection attribute so that we can bypass the check
   in the blocking writelines method:

    >>> output._connection.writelines(2) # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    TypeError: ...

    >>> output._connection.writelines('foo')
    Traceback (most recent call last):
    ...
    AssertionError: writelines does not accept strings

   If we pass an iterable that returns a non-string, we'll get a type
   error when we try to read because handle_exception is called in
   the input handler.

    >>> output.writelines([2], timeout=0.1)
    Traceback (most recent call last):
    ...
    Timeout

    >>> input.readline()
    Traceback (most recent call last):
    ...
    TypeError: ('writelines iterator must return strings', 2)

  If there is an error, then the connection is closed:

    >>> input.read()
    ''

    >>> output.write('hello')
    Traceback (most recent call last):
    ...
    IOError: I/O operation on closed file

  Handler errors cause connections to be closed.  To see this, we'll
  send the server an error message, which forces an error:

    >>> output, input = zc.ngi.blocking.open(addr, zc.ngi.async.connect,
    ...                                      timeout=1.0)
    >>> output.write('E\0')
    >>> input.read()
    ''

  Let's create some lame clients:

    >>> import zope.testing.loggingsupport, logging
    >>> loghandler = zope.testing.loggingsupport.InstalledHandler(
    ...                  None, level=logging.ERROR)

    >>> event = threading.Event()
    >>> class LameClientConnectionHandler:
    ...     def connected(self, connection):
    ...         connection.set_handler(self)
    ...         raise ValueError('Broken connector')
    ...     def handle_close(self, conection, reason):
    ...         self.closed = reason
    ...         event.set()

    >>> handler = LameClientConnectionHandler()
    >>> zc.ngi.async.connect(addr, handler)
    >>> _ = event.wait(1)

    >>> print loghandler
    zc.ngi.async.client ERROR
      connection handler failed

    >>> handler.closed
    'connection handler failed'


    >>> loghandler.clear()
    >>> event.clear()

    >>> class LameClientConnectionHandler:
    ...     def connected(self, connection):
    ...         connection.set_handler(self)
    ...         connection.write('foo\0')
    ...
    ...     def handle_input(self, data):
    ...         raise ValueError()
    ...
    ...     def handle_close(self, conection, reason):
    ...         self.closed = reason
    ...         event.set()

    >>> handler = LameClientConnectionHandler()
    >>> zc.ngi.async.connect(addr, handler)
    >>> _ = event.wait(1)

    >>> print loghandler
    zc.ngi.async.client ERROR
      handle_input failed
    zc.ngi.async.client ERROR
      handle_error

    >>> handler.closed
    TypeError('handle_input() takes exactly 2 arguments (3 given)',)

    >>> loghandler.uninstall()


.. stop the server

    >>> zc.ngi.wordcount.stop_server_process(zc.ngi.async.connect, addr)
    ... # doctest: +ELLIPSIS
    handle_input failed
    Traceback (most recent call last):
    ...
    ValueError: E

   The server log was printed. Note that we see the Error that we
   requested above.

Check logging
=============

    >>> import sys
    >>> import time

    >>> if sys.platform == 'win32':
    ...     addr = '127.0.0.1'
    ... else:
    ...     addr = ''
    >>> addrText = repr((addr, 9644))


    >>> def handler(addr, message):
    ...     print message

    >>> loghandler = zope.testing.loggingsupport.InstalledHandler(
    ...                  None, level=logging.INFO)

    >>> listener = zc.ngi.async.listener((addr, 9644), handler)
    >>> time.sleep(0.1)

    >>> logcontent = str(loghandler)
    >>> print logcontent # doctest: +ELLIPSIS
    zc.ngi.async.server INFO
      listening on ('...', 9644)

    >>> addrText in logcontent
    True

    >>> listener.close()
    >>> time.sleep(0.1)


Trying to rebind to a port in use:

    >>> loghandler.clear()

    >>> listener = zc.ngi.async.listener(('127.0.0.1', 9645), handler)
    >>> time.sleep(0.1)

    >>> listener2 = zc.ngi.async.listener(('127.0.0.1', 9645), handler)
    ... # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    error:...

    >>> time.sleep(0.1)

    >>> logcontent = str(loghandler)
    >>> print logcontent # doctest: +ELLIPSIS
    zc.ngi.async.server INFO
      listening on ('127.0.0.1', 9645)
    zc.ngi.async.server WARNING
      unable to listen on ('127.0.0.1', 9645)

    >>> listener.close()
    >>> zc.ngi.async.cleanup_map()
    >>> zc.ngi.async.wait(1)
    >>> loghandler.uninstall()

.. cleanup

