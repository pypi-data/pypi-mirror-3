<scxml xmlns="http://www.w3.org/2005/07/scxml" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.w3.org/2005/07/scxml http://www.w3.org/2011/04/SCXML/scxml.xsd"
    xmlns:spyderbrain="http://code.google.com/p/pyscxml"
    version="1.0"
    datamodel="python">
    
    <datamodel>
        <data id="session" />
        <data id="counter" expr="0" />
        <data id="headers" expr="{'Access-Control-Allow-Origin' : '*'}" />
    </datamodel>
    
        <state id="sandbox">
            <transition event="http.post">
<!--                 <if cond="session"> -->
<!--                     <send targetexpr="'#_scxml_' + session" event="quit" /> -->
<!--                 </if> -->
            <assign location="session" expr="'session_' + str(counter)" />
            <assign location="counter" expr="counter + 1" />
            <spyderbrain:start_session sessionidexpr="session" timeout="20s">
                <param name="doc" expr="_event.data['doc']" />
                <content>
                        <scxml version="1.0" xmlns="http://www.w3.org/2005/07/scxml" datamodel="python">
                            <script>
                                import logging
                                from louie import dispatcher
                                def log(event, data):
                                    _x["self"].send("log." + event, data=data )
                                    
                                import re
                                def filterDatamodel(doc):
                                    return re.sub(r" datamodel=['\"]python['\"]", " datamodel='safe_python'", doc)  
                            </script>
                            <datamodel>
                                <data id="doc" /> 
                                <data id="log_handler" /> 
                            </datamodel>
                            
                            <state id="waiting">
                                <onentry>
                                    <send target="#_scxml_server" eventexpr="'init.session.' + _sessionid" namelist="_sessionid" />
                                </onentry>
                                <transition event="websocket.connect" target="connected" />
                            </state>
                            
                            <state id="connected">
                                <onentry>
                                    <script>
                                        
                                        class EventHandler(logging.Handler):
                                            def __init__(self, level=logging.NOTSET):
                                                logging.Handler.__init__(self, level=level)
                                                
                                            def handle(self, record):
                                                log(record.levelname.lower(), record.getMessage()) 
                                            
                                        log_handler = EventHandler()
                                        logging.getLogger("pyscxml.%s.i" % _sessionid).addHandler(log_handler)
                                        
                                        def log_func(signal, sender, label, val):
                                            label = label + ":" if label else ""
                                            if sender is _x["self"].datamodel["i"]:
                                                log("elem", label + " " + str(val)) 
                                        
                                        dispatcher.connect(log_func, "invoke_log")
                                    </script>
                                
                                </onentry>
                                <invoke id="i">
                                    <content expr="filterDatamodel(doc)" />
                                </invoke>
                                
                                
                                
                                <transition event="log">
                                    <send target="#_websocket" eventexpr="_event.name">
                                        <param name="payload" expr="_event.data" />
                                    </send>
                                </transition>
                                <transition event="websocket.disconnect done.invoke quit" target="f">
                                    <script>
                                        logging.getLogger("pyscxml.i").removeHandler(log_handler)
                                    </script>
                                </transition>
                                
                                <transition event="error">
                                    <log label="error in sandbox_server" expr="_event.data" />
                                </transition>
                                
                                <transition event="*">
                                    <send target="#_i" eventexpr="_event.name" />
                                </transition>
                                <onexit>
                                    <send target="#_websocket" event="close" />
                                </onexit>
                            </state>
                            
                            <final id="f" />
                        </scxml>
                    </content>
                    
                </spyderbrain:start_session>
<!--                 <send target="#_response" namelist="session headers" /> -->
        </transition>
        
        <transition event="init.session">
            <send target="#_response" namelist="headers" event="success">
                <param name="session" expr="_event.data['_sessionid']" />
            </send>
            
        </transition>
        
        <transition event="error.communication">
            <log label="error.communication" />
        </transition>
        
        
        <transition event="error">
            <send target="#_response" namelist="headers" eventexpr="_event.name">
                <param name="exception" expr="str(_event.data['exception'])" /> 
            </send>
        </transition>
    </state>
</scxml>