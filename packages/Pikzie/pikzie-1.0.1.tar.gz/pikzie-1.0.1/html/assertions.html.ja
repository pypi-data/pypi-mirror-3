<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><title>Python: class Assertions</title>
<link rel="stylesheet" href="pikzie.css" type="text/css" />
</head><body bgcolor="#f0f0f8"><div class="main">

<p>
<table width="100%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="#ffc8d8">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="#000000" face="helvetica, arial"><strong>assertions</strong> = <a name="assertions">class Assertions</a>(<a href="__builtin__.html#object">__builtin__.object</a>)</font></td></tr>
    
<tr><td bgcolor="#ffc8d8"><tt>&nbsp;&nbsp;&nbsp;</tt></td><td>&nbsp;</td>
<td width="100%">Methods defined here:<br>
<dl><dt><a name="Assertions-assert_call_nothing_raised"><strong>assert_call_nothing_raised</strong></a>(self, *args, **kw_args)</dt><dd><tt>非推奨です。<a href="#assertions-assert_nothing_raised_call">assert_nothing_raised_call</a>()を使ってください。</tt></dd></dl>

<dl><dt><a name="Assertions-assert_call_raise"><strong>assert_call_raise</strong></a>(self, *args, **kw_args)</dt><dd><tt>非推奨です。<a href="#assertions-assert_raise_call">assert_raise_call</a>()を使ってください。</tt></dd></dl>

<dl><dt><a name="Assertions-assert_callable"><strong>assert_callable</strong></a>(self, object, message<font color="#909090">=None</font>)</dt><dd><tt>callable(object)がTrueを返すとパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_callable">assert_callable</a>(lambda:&nbsp;1)&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;<a href="#assertions-assert_callable">assert_callable</a>("string")&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;失敗</tt></dd></dl>

<dl><dt><a name="Assertions-assert_equal"><strong>assert_equal</strong></a>(self, expected, actual, message<font color="#909090">=None</font>)</dt><dd><tt>expected&nbsp;==&nbsp;actualのときパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_equal">assert_equal</a>(5,&nbsp;2&nbsp;+&nbsp;3)&nbsp;#&nbsp;=&gt;&nbsp;パス</tt></dd></dl>

<dl><dt><a name="Assertions-assert_exists"><strong>assert_exists</strong></a>(self, path)</dt><dd><tt>パスが存在したらパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_exists">assert_exists</a>("/tmp/exist")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;<a href="#assertions-assert_exists">assert_exists</a>("/tmp/nonexistence")&nbsp;#&nbsp;=&gt;&nbsp;失敗</tt></dd></dl>

<dl><dt><a name="Assertions-assert_false"><strong>assert_false</strong></a>(self, expression, message<font color="#909090">=None</font>)</dt><dd><tt>expressionが偽の値のときパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_false">assert_false</a>(False)&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;<a href="#assertions-assert_false">assert_false</a>("")&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;パス</tt></dd></dl>

<dl><dt><a name="Assertions-assert_hasattr"><strong>assert_hasattr</strong></a>(self, object, name, message<font color="#909090">=None</font>)</dt><dd><tt>hasattr(object,&nbsp;name)がTrueを返すとパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_hasattr">assert_hasattr</a>("string",&nbsp;"strip")&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;<a href="#assertions-assert_hasattr">assert_hasattr</a>("string",&nbsp;"unknown")&nbsp;#&nbsp;=&gt;&nbsp;失敗</tt></dd></dl>

<dl><dt><a name="Assertions-assert_in_delta"><strong>assert_in_delta</strong></a>(self, expected, actual, delta, message<font color="#909090">=None</font>)</dt><dd><tt>(expected&nbsp;-&nbsp;delta)&nbsp;&lt;=&nbsp;actual&nbsp;&lt;=&nbsp;(expected&nbsp;+&nbsp;delta)のときパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_in_delta">assert_in_delta</a>(3,&nbsp;3.01,&nbsp;0.001)&nbsp;#&nbsp;=&gt;&nbsp;パス</tt></dd></dl>

<dl><dt><a name="Assertions-assert_kernel_symbol"><strong>assert_kernel_symbol</strong></a>(self, name)</dt><dd><tt>/proc/kallsymsをオープンできて、読み込んだリストの中にnameがあればパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_kernel_symbol">assert_kernel_symbol</a>("printk")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;printkのアドレスを返す<br>
&nbsp;&nbsp;<a href="#assertions-assert_kernel_symbol">assert_kernel_symbol</a>("non_existent")&nbsp;#&nbsp;=&gt;&nbsp;失敗</tt></dd></dl>

<dl><dt><a name="Assertions-assert_match"><strong>assert_match</strong></a>(self, pattern, target, message<font color="#909090">=None</font>)</dt><dd><tt>re.match(pattern,&nbsp;target)がNoneを返さなければパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_match">assert_match</a>("abc",&nbsp;"abcde")&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;<a href="#assertions-assert_match">assert_match</a>("abc",&nbsp;"deabc")&nbsp;#&nbsp;=&gt;&nbsp;失敗</tt></dd></dl>

<dl><dt><a name="Assertions-assert_none"><strong>assert_none</strong></a>(self, expression, message<font color="#909090">=None</font>)</dt><dd><tt>expressionがNoneのときパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_none">assert_none</a>(None)&nbsp;#&nbsp;=&gt;&nbsp;パス</tt></dd></dl>

<dl><dt><a name="Assertions-assert_not_equal"><strong>assert_not_equal</strong></a>(self, not_expected, actual, message<font color="#909090">=None</font>)</dt><dd><tt>not_expected&nbsp;!=&nbsp;actualのときパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_not_equal">assert_not_equal</a>(-5,&nbsp;2&nbsp;+&nbsp;3)&nbsp;#&nbsp;=&gt;&nbsp;パス</tt></dd></dl>

<dl><dt><a name="Assertions-assert_not_exists"><strong>assert_not_exists</strong></a>(self, path)</dt><dd><tt>パスが存在しなかったらパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_not_exists">assert_not_exists</a>("/tmp/nonexistence")&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;<a href="#assertions-assert_not_exists">assert_not_exists</a>("/tmp/exist")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;失敗</tt></dd></dl>

<dl><dt><a name="Assertions-assert_not_found"><strong>assert_not_found</strong></a>(self, pattern, target, message<font color="#909090">=None</font>)</dt><dd><tt>re.search(pattern,&nbsp;target)がNoneを返すとパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_search">assert_search</a>("abc",&nbsp;"deABC")&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;<a href="#assertions-assert_search">assert_search</a>("abc",&nbsp;"deabc")&nbsp;#&nbsp;=&gt;&nbsp;失敗</tt></dd></dl>

<dl><dt><a name="Assertions-assert_not_match"><strong>assert_not_match</strong></a>(self, pattern, target, message<font color="#909090">=None</font>)</dt><dd><tt>re.match(pattern,&nbsp;target)がNoneを返すとパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_not_match">assert_not_match</a>("abc",&nbsp;"deabc")&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;<a href="#assertions-assert_not_match">assert_not_match</a>("abc",&nbsp;"abcde")&nbsp;#&nbsp;=&gt;&nbsp;失敗</tt></dd></dl>

<dl><dt><a name="Assertions-assert_not_none"><strong>assert_not_none</strong></a>(self, expression, message<font color="#909090">=None</font>)</dt><dd><tt>expressionがNoneではないときパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_not_none">assert_not_none</a>("not&nbsp;none")&nbsp;#&nbsp;=&gt;&nbsp;パス</tt></dd></dl>

<dl><dt><a name="Assertions-assert_nothing_raised_call"><strong>assert_nothing_raised_call</strong></a>(self, callable_object, *args, **kw_args)</dt><dd><tt>callable_object(*args,&nbsp;**kw_args)が例外exceptionを発生させるとパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_call_raise">assert_call_raise</a>(NameError,&nbsp;lambda:&nbsp;unknown_variable)&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;<a href="#assertions-assert_call_raise">assert_call_raise</a>(NameError,&nbsp;lambda:&nbsp;1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;失敗</tt></dd></dl>

<dl><dt><a name="Assertions-assert_open_file"><strong>assert_open_file</strong></a>(self, name, *args)</dt><dd><tt>open(name,&nbsp;*args)が成功するとパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;file&nbsp;=&nbsp;<a href="#assertions-assert_open_file">assert_open_file</a>("/tmp/exist",&nbsp;"w")&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;<a href="#assertions-assert_open_file">assert_open_file</a>("/tmp/nonexistence")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;失敗</tt></dd></dl>

<dl><dt><a name="Assertions-assert_raise_call"><strong>assert_raise_call</strong></a>(self, exception, callable_object, *args, **kw_args)</dt><dd><tt>callable_object(*args,&nbsp;**kw_args)が例外を発生させたらパスします。そして、発生した例外を返します。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_raise_call">assert_raise_call</a>(NameError,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lambda:&nbsp;unknown_variable)&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;NameErrorを返す<br>
&nbsp;&nbsp;<a href="#assertions-assert_raise_call">assert_raise_call</a>(NameError,&nbsp;lambda:&nbsp;1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;失敗<br>
&nbsp;<br>
もし、例外インスタンスが比較可能であれば、例外インスタンスを渡すこともできます。<br>
&nbsp;<br>
&nbsp;&nbsp;class&nbsp;ComparableError(Exception):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;<a href="#assertions-__init__">__init__</a>(self,&nbsp;message):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.<strong>message</strong>&nbsp;=&nbsp;message<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;<a href="#assertions-__repr__">__repr__</a>(self):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;"%s(%r,)"&nbsp;%&nbsp;(type(self).__name__,&nbsp;self.<strong>message</strong>)<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def&nbsp;__eq__(self,&nbsp;other):<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;isinstance(other,&nbsp;self.<strong>__class__</strong>)&nbsp;and&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.<strong>message</strong>&nbsp;==&nbsp;other.message<br>
&nbsp;<br>
&nbsp;&nbsp;def&nbsp;raise_error():<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise&nbsp;ComparableError("value")<br>
&nbsp;&nbsp;<a href="#assertions-assert_raise_call">assert_raise_call</a>(ComparableError("value"),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise_error)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;ComparableErrorを返す<br>
&nbsp;&nbsp;<a href="#assertions-assert_raise_call">assert_raise_call</a>(ComparableError("key"),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raise_error)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;失敗</tt></dd></dl>

<dl><dt><a name="Assertions-assert_run_command"><strong>assert_run_command</strong></a>(self, command, **kw_args)</dt><dd><tt>コマンドが正常終了するとパスします。subprocess.Popenオブジェクトを返します。<br>
&nbsp;<br>
&nbsp;&nbsp;process&nbsp;=&nbsp;<a href="#assertions-assert_run_command">assert_run_command</a>(["echo",&nbsp;"123"])&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;<a href="#assertions-assert_equal">assert_equal</a>("123\n",&nbsp;process.stdout.read())&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;<a href="#assertions-assert_run_command">assert_run_command</a>("false")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;失敗<br>
&nbsp;&nbsp;<a href="#assertions-assert_run_command">assert_run_command</a>("unknown-command")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;失敗</tt></dd></dl>

<dl><dt><a name="Assertions-assert_search"><strong>assert_search</strong></a>(self, pattern, target, message<font color="#909090">=None</font>)</dt><dd><tt>re.search(pattern,&nbsp;target)がNoneを返さなければパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_search">assert_search</a>("abc",&nbsp;"deabc")&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;<a href="#assertions-assert_search">assert_search</a>("abc",&nbsp;"deABC")&nbsp;#&nbsp;=&gt;&nbsp;失敗</tt></dd></dl>

<dl><dt><a name="Assertions-assert_search_syslog_call"><strong>assert_search_syslog_call</strong></a>(self, pattern, callable_object, *args, **kw_args)</dt><dd><tt>callable_object(*args,&nbsp;**kw_args)の後にre.search(pattern,&nbsp;SYSLOG_CONTENT)がNoneを返さなければパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_search_syslog_call">assert_search_syslog_call</a>("X",&nbsp;syslog.syslog,&nbsp;"XYZ")&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;<a href="#assertions-assert_search_syslog_call">assert_search_syslog_call</a>("X",&nbsp;syslog.syslog,&nbsp;"ABC")&nbsp;#&nbsp;=&gt;&nbsp;失敗</tt></dd></dl>

<dl><dt><a name="Assertions-assert_true"><strong>assert_true</strong></a>(self, expression, message<font color="#909090">=None</font>)</dt><dd><tt>expressionが真の値のときパスします。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-assert_true">assert_true</a>(True)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;=&gt;&nbsp;パス<br>
&nbsp;&nbsp;<a href="#assertions-assert_true">assert_true</a>("string")&nbsp;#&nbsp;=&gt;&nbsp;パス</tt></dd></dl>

<dl><dt><a name="Assertions-assert_try_call"><strong>assert_try_call</strong></a>(self, timeout, interval, callable_object, *args, **kw_args)</dt><dd><tt>callable_object(*args,&nbsp;**kw_args)が&lt;timeout&gt;秒の間に1つでもアサーションがパスすればパスします。（約&lt;timeout&nbsp;/&nbsp;interval&gt;回callable_object()が呼び出されます）<br>
&nbsp;<br>
&nbsp;&nbsp;def&nbsp;random_number():<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number&nbsp;=&nbsp;random.randint(0,&nbsp;9)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#assertions-assert_in_delta">assert_in_delta</a>(5,&nbsp;number,&nbsp;1)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;number<br>
&nbsp;&nbsp;<a href="#assertions-assert_try_call">assert_try_call</a>(1,&nbsp;0.1,&nbsp;random_number)&nbsp;#&nbsp;=&gt;&nbsp;たぶんパス<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;4か5か6を返す<br>
&nbsp;&nbsp;<a href="#assertions-assert_try_call">assert_try_call</a>(1,&nbsp;0.1,&nbsp;self.<strong>fail</strong>,&nbsp;"Never&nbsp;succeed")&nbsp;#&nbsp;=&gt;&nbsp;失敗</tt></dd></dl>

<dl><dt><a name="Assertions-fail"><strong>fail</strong></a>(self, message)</dt><dd><tt>Always&nbsp;fails&nbsp;with&nbsp;message.<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-fail">fail</a>("must&nbsp;not&nbsp;happen!")&nbsp;#&nbsp;=&gt;&nbsp;fail</tt></dd></dl>

<dl><dt><a name="Assertions-notify"><strong>notify</strong></a>(self, message)</dt><dd><tt>実行中のテスト用メッセージを通知します。<br>
&nbsp;<br>
&nbsp;&nbsp;if&nbsp;command_not_found:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#assertions-notify">notify</a>("コマンドがみつからないので省略します")&nbsp;#&nbsp;=&gt;&nbsp;メッセージを通知<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return</tt></dd></dl>

<dl><dt><a name="Assertions-omit"><strong>omit</strong></a>(self, message)</dt><dd><tt>実行中のテストを省略します。<br>
&nbsp;<br>
&nbsp;&nbsp;if&nbsp;module_not_found:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#assertions-omit">omit</a>("モジュールが見つからないので省略します")&nbsp;#&nbsp;=&gt;&nbsp;テストを省略</tt></dd></dl>

<dl><dt><a name="Assertions-pend"><strong>pend</strong></a>(self, message)</dt><dd><tt>実行中のテストを保留します。<br>
&nbsp;<br>
&nbsp;&nbsp;<a href="#assertions-pend">pend</a>("モジュールXXXが見つかりません")&nbsp;#&nbsp;=&gt;&nbsp;テストを保留</tt></dd></dl>

<hr>
Data descriptors defined here:<br>
<dl><dt><strong>__dict__</strong></dt>
<dd><tt>dictionary&nbsp;for&nbsp;instance&nbsp;variables&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
<dl><dt><strong>__weakref__</strong></dt>
<dd><tt>list&nbsp;of&nbsp;weak&nbsp;references&nbsp;to&nbsp;the&nbsp;object&nbsp;(if&nbsp;defined)</tt></dd>
</dl>
</td></tr></table>
</div>
<div class="menu">
  <ul>
    <li><a href="index.html.ja">トップ</a></li>
    <li><a href="news.html.ja">ニュース</a></li>
    <li><a href="readme.html.ja">はじめに</a></li>
    <li><a href="assertions.html.ja">アサーション一覧</a></li>
  </ul>
</div>

<div class="footer">
  <p>
    <a href="http://sourceforge.net/projects/pikzie">
      <img src="http://sflogo.sourceforge.net/sflogo.php?group_id=215708&amp;type=12" width="120" height="30" border="0" alt="SourceForge.netからPikzieをダウンロード。高速で安全なフリーオープンソースソフトウェアダウンロード。" />
    </a>
<!-- Piwik -->
<script type="text/javascript">
var pkBaseURL = (("https:" == document.location.protocol) ? "https://apps.sourceforge.net/piwik/pikzie/" : "http://apps.sourceforge.net/piwik/pikzie/");
document.write(unescape("%3Cscript src='" + pkBaseURL + "piwik.js' type='text/javascript'%3E%3C/script%3E"));
</script><script type="text/javascript">
piwik_action_name = '';
piwik_idsite = 1;
piwik_url = pkBaseURL + "piwik.php";
piwik_log(piwik_action_name, piwik_idsite, piwik_url);
</script>
<object><noscript><p><img src="http://apps.sourceforge.net/piwik/pikzie/piwik.php?idsite=1" alt="piwik"/></p></noscript></object>
<!-- End Piwik Tag -->
  </p>
</div>

</body></html>