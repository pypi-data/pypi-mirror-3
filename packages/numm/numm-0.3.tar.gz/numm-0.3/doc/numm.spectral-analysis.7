.TH spectral-analysis 7 "February 2012" "numm" "Numm Tutorials"
.SH NAME
spectral analysis \- perform realtime spectral analysis
.SH SYNOPSIS
numm-run \fIFILE\fR
.SH DESCRIPTION
Frequency makes for a meaningful description of many audio signals.
We can use numpy's fourier analysis to compute spectra
from the microphone and display the results visually.
We will break down the process into smaller parts: baby steps...
.PP
First, create and save a skeletal file
that moves a line across the screen:
.IP
.EX
idx = 0
def video_out(a):
    global idx
    a[:,idx] = 255
    idx = (idx + 1) % a.shape[1]
def audio_in(a):
    pass
.EE
.PP
Save this snippet and run it with \fBnumm-run\fR.
.PP
We will use the \fBnumpy.fft\fR module for our analysis.
First we define a function to get a particular frequency
from the fourier transform:
.IP
.EX
import numpy as np
def get_freq(fourier, frequency):
    freqs = np.fft.fftfreq(len(fourier), 1/44100.0)
    nearest = (abs(freqs - frequency)).argmin()
    return abs(fourier[nearest])
.EE
.PP
Next, we hook up this function to audio input from the microphone.
A frequency bin is chosen on a log scale
for each row on the screen to display a spectogram.
In total:
.IP
.EX
import numpy as np
idx = 0
recent_audio = np.zeros(4096, np.int16)
recent_video = np.zeros((240,320,3), np.uint8)
freq_bins = np.exp2(np.linspace(np.log2(27000),np.log2(27),240))

def get_freq(fourier, frequency):
    freqs = np.fft.fftfreq(len(fourier), 1/44100.0)
    nearest = (abs(freqs - frequency)).argmin()
    return abs(fourier[nearest])

def video_out(a):
    global idx
    fourier=np.fft.fft(recent_audio)
    values =np.array([get_freq(fourier,X) for X in freq_bins])
    recent_video[:,idx,1] = (values/10000).clip(0,255)
    idx = (idx + 1) % a.shape[1]
    a[:] = np.roll(recent_video, -idx, axis=1)

def audio_in(a):
    recent_audio[:] = np.roll(recent_audio, len(a))
    recent_audio[:len(a)] = a.mean(axis=1)
.EE
.SH SEE ALSO
.BR numm-run (1),
.BR numm.getting-started (7),
.BR numm.one-bit-instrument (7)
