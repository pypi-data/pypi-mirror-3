[transcodedaemon]
recipe = collective.transcode.recipe
listen_host = ${site:transcode-host}
listen_port = ${site:transcode-port}
videofolder = ${site:videofolder}
profiles = ${site:transcode-profiles}
secret = ${site:secret}
eggs = 
    collective.transcode.recipe
    collective.transcode.daemon

[zeoserver]
recipe = plone.recipe.zeoserver
zeo-address = ${site:zeo-address}
zeo-var = ${buildout:directory}/var
blob-storage = ${zeoserver:zeo-var}/blobstorage
eggs = ZODB3
       plone.app.blob

# Generate instances from macros

[instance1]
<= instance-settings
recipe = plone.recipe.zope2instance
http-address = ${site:instance1-address}
zope-conf-additional =
    <ftp-server>
    address ${site:instance-ftp}
    </ftp-server>
    <icp-server>
        address ${site:instance1-icp}
    </icp-server>

[instance2]
<= instance-settings
recipe = plone.recipe.zope2instance
http-address = ${site:instance2-address}
zope-conf-additional =
    <icp-server>
        address ${site:instance2-icp}
    </icp-server>

[instance3]
<= instance-settings
recipe = plone.recipe.zope2instance
http-address = ${site:instance3-address}
zope-conf-additional =
    <icp-server>
        address ${site:instance3-icp}
    </icp-server>

[instance4]
<= instance-settings
recipe = plone.recipe.zope2instance
http-address = ${site:instance4-address}
zope-conf-additional =
    <icp-server>
        address ${site:instance4-icp}
    </icp-server>

[instance5]
<= instance-settings
recipe = plone.recipe.zope2instance
http-address = ${site:instance5-address}
zope-conf-additional =
    <icp-server>
        address ${site:instance5-icp}
    </icp-server>

[instance6]
<= instance-settings
recipe = plone.recipe.zope2instance
http-address = ${site:instance6-address}
zope-conf-additional =
    <icp-server>
        address ${site:instance6-icp}
    </icp-server>

[instance7]
<= instance-settings
recipe = plone.recipe.zope2instance
http-address = ${site:instance7-address}
zope-conf-additional =
    <icp-server>
        address ${site:instance7-icp}
    </icp-server>

[instance8]
<= instance-settings
recipe = plone.recipe.zope2instance
http-address = ${site:instance8-address}
zope-conf-additional =
    <icp-server>
        address ${site:instance8-icp}
    </icp-server>

[instance-debug]
<= instance-settings
recipe = plone.recipe.zope2instance
http-address = ${site:instance-debug-address}
debug-mode = on
verbose-security = on

[ploneftp]
recipe = unweb.recipe.ploneftp
zope_ftp_address = ${site:instance-ftp}
address = ${site:plumiftp-address}
path = /${site:portal-id}/Members/%s/videos
tmp_dir = ${buildout:directory}/var/ploneftp

############################################################################## 
# Build ffmpeg, nginx, varnish and haxproxy for later configuration
##############################################################################

[yasm-build]
recipe = hexagonit.recipe.cmmi 
url = ${downloads:yasm}

[x264-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:x264}
configure-options =
    --enable-shared
environment-section =
    asmenv
    
[asmenv]
PATH = %(PATH)s:${buildout:directory}/parts/yasm-build/bin

[ogg-build]
recipe = hexagonit.recipe.cmmi
keep-compile-dir = true
url = ${downloads:libogg}

[vorbis-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:libvorbis}
keep-compile-dir = true
configure-options =
    LD_LIBRARY_PATH=${buildout:directory}/parts/ogg-build/lib
    --with-ogg=${buildout:directory}/parts/ogg-build/

[theora-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:libtheora}
keep-compile-dir = true
configure-options =
    LD_LIBRARY_PATH=${buildout:directory}/parts/ogg-build/lib
    --with-ogg=${buildout:directory}/parts/ogg-build/

[mp4v2-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:mp4v2}

[faac-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:libfaac}
configure-options =
    --without-mp4v2

[faad-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:libfaad}

[vpx-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:libvpx}
configure-options =
    --enable-pic
environment-section =
    asmenv
    
[lame-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:liblame}

[ffmpeg-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:ffmpeg}
keep-compile-dir = true
make-targets = 
    tools/qt-faststart
    install

configure-options =
    --extra-cflags=${build:extra-cflags}
    --extra-ldflags=${build:extra-ldflags}
    --enable-shared --enable-gpl --enable-version3 --enable-nonfree --enable-postproc --enable-libx264
    --enable-libfaac --enable-libmp3lame --enable-libtheora --enable-libvorbis --enable-filters --enable-avfilter 
    --enable-libvpx
#   --enable-libxvid --enable-x11grab --enable-libopencore-amrwb --enable-libopencore-amrnb

environment-section =
    asmenv
    
[ffmpeg]
recipe = collective.recipe.scriptgen
cmd = ${buildout:directory}/parts/ffmpeg-build/bin/ffmpeg
environment = 
    LD_LIBRARY_PATH=${buildout:directory}/parts/vorbis-build/lib:${buildout:directory}/parts/theora-build/lib:${buildout:directory}/parts/ffmpeg-build/lib:${buildout:directory}/parts/x264-build/lib:${buildout:directory}/parts/faac-build/lib:${buildout:directory}/parts/faad-build/lib:${buildout:directory}/parts/lame-build/lib:${buildout:directory}/parts/vpx-build/lib:${buildout:directory}/parts/ogg-build/lib
    --extra-ldflags=-I${buildout:directory}/parts/mp4v2-build/lib

[qt-faststart]
recipe = collective.recipe.cmd
cmds = cp ${ffmpeg-build:compile-directory}/ffmpeg*/tools/qt-faststart ${buildout:directory}/bin/qt-faststart
on_install = true
on_update = true

[pcre-source]
recipe = hexagonit.recipe.cmmi
url = http://ftp.exim.llorien.org/pcre/pcre-8.00.tar.gz
keep-compile-dir = true

[ngx_cache_purge]
recipe = hexagonit.recipe.download
url = http://labs.frickle.com/files/ngx_cache_purge-1.1.tar.gz
strip-top-level-dir = true

[nginx-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:nginx}
patches =
    ${buildout:directory}/patches/nginx-xslt.patch
    ${buildout:directory}/patches/nginx-xslt-options.patch
    ${buildout:directory}/patches/nginx-xslt-conf.patch
configure-options =
    --with-http_xslt_module
    --with-http_stub_status_module
    --with-libxml2=${buildout:directory}/parts/lxml/libxml2
    --with-libxslt=${buildout:directory}/parts/lxml/libxslt
    --with-pcre=${pcre-source:compile-directory}/pcre-8.00
    --conf-path=${buildout:directory}/production/nginx/default.conf
    --error-log-path=${buildout:directory}/var/log/main-error.log
    --pid-path=${buildout:directory}/var/main.pid
    --lock-path=${buildout:directory}/var/main.lock
    --add-module=${ngx_cache_purge:location}
environment =
    CFLAGS=-w

[varnish-build]
recipe = hexagonit.recipe.cmmi
url = ${downloads:varnish}
configure-options =
    PCRE_CFLAGS=-I${buildout:directory}/parts/pcre-source/include
    PCRE_LIBS="-L${buildout:directory}/parts/pcre-source/lib -lpcre"

[haproxy-build]
recipe = plone.recipe.haproxy
url = ${downloads:haproxy}
cpu = generic
target = generic

############################################################################## 
# Configure front-end web server
##############################################################################

[main-config]
recipe = collective.recipe.template
input = ${buildout:directory}/production/main.conf.template
output = ${buildout:directory}/production/main.conf

##############################################################################
# Configure Varnish cache
##############################################################################

[cache-config]
recipe = collective.recipe.template
input = ${buildout:directory}/production/cache.conf.template
output = ${buildout:directory}/production/cache.conf

[cache]
recipe = plone.recipe.varnish
daemon = ${buildout:directory}/parts/varnish-build/sbin/varnishd
mode = foreground
bind = ${site:cache-address}
cache-size = 1G
user = ${site:cache-user}
config = ${buildout:directory}/production/cache.conf

############################################################################## 
# Configure load balancer
##############################################################################

[balancer-config]
recipe = collective.recipe.template
input = ${buildout:directory}/production/balancer.conf.template
output = ${buildout:directory}/production/balancer.conf
    
############################################################################## 
# Set up supervisor to run it all
##############################################################################

[supervisor]
recipe = collective.recipe.supervisor
port = ${site:supervisor-host}:${site:supervisor-port}
user = ${site:supervisor-user}
password = ${site:supervisor-pass}
serverurl = http://${site:supervisor-host}:${site:supervisor-port}
programs =
    10   zeo             ${zeoserver:location}/bin/runzeo                                                            true ${site:zeo-user}
    20   transcodedaemon ${buildout:directory}/bin/transcodedaemon [fg]                                              true ${site:transcode-user}
    30   ploneftp        ${buildout:directory}/bin/ploneftp  [fg]                                                    true ${site:ftp-user}
    ${site:active-instances}
    80   balancer        ${buildout:directory}/bin/haproxy   [-f ${buildout:directory}/production/balancer.conf -db] true ${site:balancer-user}
    90   cache           ${buildout:directory}/bin/cache                                                             true ${site:cache-user}
    100  main            ${nginx-build:location}/sbin/nginx  [-c ${buildout:directory}/production/main.conf]         
############################################################################## 
# Log rotation
##############################################################################

[logrotate.conf]
recipe = collective.recipe.template
input = ${buildout:directory}/production/logrotate.conf.template
output = ${buildout:directory}/production/logrotate.conf
    
############################################################################## 
# Debugging tools - preconfigured python interpreter, omelette, xdv server
##############################################################################

[zopepy]
recipe = zc.recipe.egg
eggs = 
    ${instance-settings:eggs}

interpreter = zopepy
scripts = zopepy

[omelette]
recipe = collective.recipe.omelette
eggs = ${instance-settings:eggs}

[lxml]
recipe = z3c.recipe.staticlxml
egg = lxml
libxml2-url = http://xmlsoft.org/sources/libxml2-2.7.7.tar.gz
libxslt-url = http://xmlsoft.org/sources/libxslt-1.1.26.tar.gz
build-libxslt = true
build-libxml2 = true
#static-build = true
force = false
    
############################################################################## 
# Backups
##############################################################################

[backup]
recipe = collective.recipe.backup

[chown]
# This recipe is used to set permissions for root mode installs
# For options see http://pypi.python.org/pypi/plone.recipe.command
recipe = plone.recipe.command
command =
    echo Setting file permissions - root access required - you may be asked to enter your password
    touch ${buildout:directory}/var/log/instance1.log ${buildout:directory}/var/log/instance2.log ${buildout:directory}/var/log/instance3.log ${buildout:directory}/var/log/instance4.log ${buildout:directory}/var/log/instance5.log ${buildout:directory}/var/log/instance6.log ${buildout:directory}/var/log/instance7.log ${buildout:directory}/var/log/instance8.log ${buildout:directory}/var/log/instance1-Z2.log ${buildout:directory}/var/log/instance2-Z2.log ${buildout:directory}/var/log/instance3-Z2.log ${buildout:directory}/var/log/instance4-Z2.log ${buildout:directory}/var/log/instance5-Z2.log ${buildout:directory}/var/log/instance6-Z2.log ${buildout:directory}/var/log/instance7-Z2.log ${buildout:directory}/var/log/instance8-Z2.log ${buildout:directory}/var/zeoserver.pid ${buildout:directory}/var/log/zeoserver.log ${buildout:directory}/parts/transcodedaemon/transcodedaemon.log ${buildout:directory}/var/log/instance-debug.log ${buildout:directory}/var/log/instance-debug-Z2.log
    chown ${site:zeo-user} ${buildout:directory}/var/log/zeoserver.log ${buildout:directory}/var/zeoserver.pid 
    chgrp -R ${site:zeo-user} ${buildout:directory}/var
    chown ${site:transcode-user} ${buildout:directory}/transcoded
    chmod 770 ${buildout:directory}/var
    mkdir ${buildout:directory}/var/filestorage ${buildout:directory}/var/blobstorage
    mkdir ${buildout:directory}/torrents ${buildout:directory}/torrents_safe
    mkdir ~/.python-eggs 
    chmod o+rwx ~/.python-eggs 
    chown -R ${site:zope-user} ${buildout:directory}/eggs
    chown -R ${site:zope-user} ${buildout:directory}/torrents
    chown -R ${site:zope-user} ${buildout:directory}/torrents_safe
    chown -R ${site:zeo-user} ${buildout:directory}/var/filestorage 
    chown -R ${site:zeo-user} ${buildout:directory}/var/blobstorage
    chown -R ${site:zope-user} ${buildout:directory}/var/instance* ${buildout:directory}/parts/instance* ${buildout:directory}/var/log/instance?.log ${buildout:directory}/var/log/instance?-Z2.log ${buildout:directory}/var/log/instance-debug.log ${buildout:directory}/var/log/instance-debug-Z2.log
    chown ${site:transcode-user} ${buildout:directory}/parts/transcodedaemon/transcodedaemon.log ${buildout:directory}/parts/transcodedaemon
update-command = ${chown:command}
stop-on-error = false
