h4. Syntax for HTML (and html5) elements

* Nested tags of the form
    ``{----} xx-small size ``{+} larger size`` ``
  must be supported. While detecting the closing markup check for the presence 
  of style shortcut. If it is present then consider it as opening markup.
* Syntax to generate the <wbr> element.
* Explore the possible addition of `indentation` feature, like,<br>
  [<PRE
    :some text          < one level indentation >
    ::some text         < two level indentation >
  >] while the indentation offset is configurable in the wiki style.
  NOTE : indentation is not a feature of html. But can/should be achieved via CSS
* Markup syntax for <aside> tag,
    \<< ... << for left aside
    \>> ... >> for right aside
* Markup syntax to generate <details> <summary> tags.
* Use figure and figure-caption for images, code etc ...
* Macro for <audio> element.
* Extension for <header> element.
* Syntax for grouping headers via <hgroup> element.
* Syntax to generate <mark> element
* Syntax to attach value to <li> element for ordered list.
* Support nested link markup for <nav> element, like,
    \[[ \[[ /pref.html | pref ]] \[[ /pref.html | pref ]] ]]
* Enclose TOC generated output links within <nav> element.

* Syntax to generate <small> element for small-print text and legal text
* nested blockquotes must be identified using class attributes.
  like `level-1`, `level-2` etc ...
* Markup syntax for <q> tag. There is a templated-tag presently available for
  this.

h4. Proposed functions and features

* Optionally enable ${ expression evaluation } feature.
* Printable pages.
* From html text to eazytext markup.
* Implement `stripscript` 
* Find a way to pass the body arguments programmatically via Translator()
* Once the core parser grammar become stable, move the entire lexer and parser
  to C, with plugin-framework available for multiple languages (python, ruby
  ...).

h4. Administrative features

* eztext.py automatic script generation via easy_install.
* Fix the command-line arguments to eztext.py
* Editor plugins for emacs, eclipse, and more.
* When used in the context of web-applications, how to pass plugin-specific
  configuration to plugin-instances. Right now, etxconfig is made available,
  ''node.parser.etparser.etxconfig''

-----

{{{ Nested 
# { 'font-size' : 'small', 'color' : 'gray' }
Document edited using Vim <br>
/* vim: set filetype=etx : */
}}}
