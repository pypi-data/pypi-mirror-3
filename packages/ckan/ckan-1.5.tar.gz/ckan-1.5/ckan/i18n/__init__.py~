##from pylons.i18n import _, add_fallback, get_lang, set_lang, gettext, LanguageError
##from babel import Locale


### TODO: Figure out a nicer way to get this. From the .ini? 
### Order these by number of people speaking it in Europe:
### http://en.wikipedia.org/wiki/Languages_of_the_European_Union#Knowledge
### (or there abouts)
##_KNOWN_LOCALES = ['en',    # English
##                  'de',    # German
###                  'fr',    # French
##                  'it',    # Italian
##                  'es',    # Spanish
##                  'pl',    # Polish
##                  'ru',    # Russian
##                  'nl',    # Dutch
##                  'sv',    # Swedish
##                  'no',    # Norwegian
###                  'el',    # Greek
##                  'cs_CZ', # Czech (Czech republic)
##                  'hu',    # Hungarian
##                  'pt_BR', # Portuguese (Brazilian)
##                  'fi',    # Finnish
##                  'bg',    # Bulgarian
##                  'ca',    # Catalan
##                  'sq',    # Albanian
##                  ]

##_known_locale_objects = None # cache
##def get_available_locales():
##    '''Returns a list of the locale objects for which translations are
##    available. The default locale is first in the list and otherwise
##    is ordered as per _KNOWN_LOCALES.'''
##    if not _known_locale_objects:
##        global _known_locale_objects
##        _known_locale_objects = map(Locale.parse, _KNOWN_LOCALES)
##        default_locale = get_default_locale()

##        # move the default locale to the start of the list
##        assert default_locale in _known_locale_objects
##        _known_locale_objects.pop(_known_locale_objects.index(default_locale))
##        _known_locale_objects.insert(0, default_locale)
##    return _known_locale_objects

##_default_locale = None # used just for caching
##def get_default_locale():
##    '''Returns the default locale/language as specified in the CKAN
##    config. It is a locale object.'''
##    global _default_locale
##    if not _default_locale:
##        from pylons import config
##        _default_locale = Locale.parse(config.get('ckan.locale')) or \
##                          Locale.parse('en')
##    return _default_locale

##def set_session_locale(locale):
##    if locale not in _KNOWN_LOCALES:
##        raise ValueError
##    from pylons import session
##    session['locale'] = locale
##    session.save()

##def handle_request(request, tmpl_context):
##    from pylons import session
##    import ckan.lib.helpers as h

##    tmpl_context.language = locale = None
##    if 'locale' in session:
##        # First look for locale saved in the session (by home controller)
##        locale = Locale.parse(session.get('locale'))
##    else:
##        # Next try languages in the HTTP_ACCEPT_LANGAUGE header
##        requested = [l.replace('-', '_') for l in request.languages]
##        locale = Locale.parse(Locale.negotiate(_KNOWN_LOCALES, requested))

##    if locale is None:
##        # Next try the default locale in the CKAN config file
##        locale = get_default_locale()
    
##    options = [str(locale), locale.language, str(get_default_locale()),
##        get_default_locale().language]

##    failed_options = set()
##    for language in options:
##        try:
##            if language == 'en':
##                # no language file for english so no need to set_lang
##                # (but this doesn't work if there is a lang option in config)
##                break
##            set_lang(language) 
##            tmpl_context.language = language
##            break
##        except LanguageError, e:
##            if language not in failed_options:
##                h.flash_error('Could not change language to %r: %s' % \
##                              (language, e))
##                failed_options.add(language)
            


