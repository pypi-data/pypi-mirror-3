Metadata-Version: 1.1
Name: pycom
Version: 0.3.0
Summary: Distributed component model for Python.
Home-page: http://pypi.python.org/pypi/pycom
Author: Dmitry 'Divius' Tantsur
Author-email: divius.inside@gmail.com
License: BSD
Description: Introduction
        =============
        
        PyCOM is simple and easy-to-use distributed component model written in Python.
        PyCOM makes different parts of your network application isolated and
        independent, while allowing easy and straightforward interaction between them.
        
        With PyCOM you build your application as a number of *services*,
        each running in it's own process (or even on it's own computer)
        and talking to each other via 0MQ.
        You maintain a PyCOM *nameserver* for finding services by their names
        (by the way, nameserver itself is a service).
        
        Services provide *interfaces*, i.e. a named way of interacting with service.
        They are somewhat similar to interfaces in e.g. Java, but note that
        PyCOM does not perform any checks on interfaces. Interface usually has
        some amount of *methods*.
        
        Services are identified by path with parts separated by slashes,
        e.g. ``/com/foo/group/service``.
        
        Interfaces are identified by name with parts separated by dots,
        e.g. ``com.foo.my-interface``.
        
        Highlights:
        
        - Python 2 and Python 3 support out-of-box
        - Free software (new BSD license)
        - Low level enough to build your own frameworks
        - ... and still simple enough be used as is!
        - Doesn't teach you how to do your job - just does it's own
        - Without black magic and lots of autogenerated code
        - Easy and portable protocol
        
        There is ongoing effort to create a C++ client library for PyCOM:
        https://bitbucket.org/divius/libpycom
        
        Examples
        ---------
        
        Service example::
        
            import pycom
        
            @pycom.interface("com.foo.example")
            class Query(object):
        
                @pycom.method("create")
                def method_create(self, request):
                    return {"field1" : request.args}
        
            pycom.main()
        
        Example service configuration::
        
            {
                "service": "/com/foo/example",
                "nameserver": "tcp://127.0.0.1:2012",
                "address": "tcp://127.0.0.1:2013"
            }
        
        Example client code for this service::
        
            import pycom
        
            pycom.configure(nameserver="tcp://127.0.0.1:2012")
        
            query = pycom.locate("com.foo.example")
            print query.invoke("create", 42)
            # Prints {"field1" : 42}
        
        Quick start
        ------------
        
        To test (logs will be saved in `test.log`)::
        
            $ python test.py
        
        To build HTML documentation (requires `Sphinx <http://sphinx.pocoo.org>`_)::
        
            $ python setup.py build_sphinx
            $ <your-browser> build/sphinx/html/index.html
        
        To install::
        
            $ python setup.py install
        
        or via `pip`::
        
            $ pip install pycom
        
        Do not forget to read about known issues in the current version:
        http://packages.python.org/pycom/status.html#known-issues
        
        Support
        --------
        
        PyCOM repository and issue tracker are hosted on BitBucket.
        
            Latest source code: https://bitbucket.org/divius/pycom/overview
        
            Report bugs: https://bitbucket.org/divius/pycom/issues
        
            Read documentation: http://packages.python.org/pycom
        
        Enjoy =)
        
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.2
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Object Brokering
Classifier: Topic :: System :: Distributed Computing
Classifier: Topic :: System :: Networking
Classifier: License :: OSI Approved :: BSD License
Requires: pyzmq (>=2.1.11)
Requires: six
