Metadata-Version: 1.0
Name: uwosh.meeting
Version: 0.5
Summary: a folderish Event that centralizes meeting information
Home-page: https://svn.it.uwosh.edu/svn/plone/Projects/uwosh.meeting/
Author: T. Kim Nguyen
Author-email: nguyen@uwosh.edu
License: GPL
Description: This product helps you better manage all information related to meetings.
        
        
        Before:
        -------
        
        Normally, meetings seem to happen like this:
        
        - someone sends around an email on a topic, asking for a good date and time
          that works for everyone
        
        - you get an email with the date and time that was agreed to; a location is
          still to be determined
        
        - you get an email with the meeting location
        
        - eventually an agenda gets emailed to all prospective attendees; documents to
          be discussed at the meeting are attached to this email
        
        - the minutes of the meeting are sent around by email a day (or several) later
        
        - possibly buried in the minutes: your action items, the date and time of the
          next meeting
        
        When you try to piece together what happened at the last meeting, which
        documents you reviewed at that meeting, and what you are on the hook for doing
        by the next meeting... good luck finding it all in your inbox.
        
        
        After:
        ------
        
        Instead of having meeting-related information scattered across multiple email
        messages and attachments, the Meeting content type puts everything in one
        place:
        
        - standard Plone Event content type attributes (date, time, location,
          attendees, iCal export, etc.)
        
        - folderish so can contain attachments (documents)
        
        - separate fields for agenda, minutes, action items, next meeting date/time
        
        - ATBackRef-enabled links to previous and next Meeting objects so you can jump
          forward and backward in time to see what happened at previous meetings of
          your same working group
        
        - optional email notification (one-time only or on every edit) to all
          attendees; email message contains all information (except attachments),
          including direct links to edit the Meeting object and add an attachment
        
        - optional edit permission granted to all attendees
        
        - integration with Solgema.fullcalendar view
        
        
        Calendar Portlets
        -----------------
        
        To get Meeting objects to show on your calendar portlet: in the ZMI
        of the site, go to portal_calendar -> Configure tab, then in the
        "Portal Types to show in the calendar" list, Control-click or
        Command-click the Meeting type so that both Event and Meeting types
        are selected.  Then press Submit at the bottom of the page.
        
        Remember: the calendar portlet will show only PUBLISHED items, as
        per that Configure tab's default settings, so if you want a Meeting
        (or an Event) to show up in the portlet, the Meeting or Event must
        be published too.
        
        
        Dependencies
        ------------
        
        This product also depends on Products.ATBackRef to support
        bidirectional relations between connected Meeting objects
        (next/previous).  Add the following to your buildout.cfg eggs:
        
        	Products.ATBackRef
        
        and rerun bin/buildout.
        
        If you'd like to view Meeting objects on a nice calendar view, install the
        Solgema.fullcalendar product from
        
        http://plone.org/products/solgema.fullcalendar
        
        The uwosh.meeting product includes a view template that will be used by
        Solgema.fullcalendar.
        
        
        Credits
        -------
        
        I wish I could remember who it was at University of Wisconsin Oshkosh who
        suggested this "killer app" for our Intranet project to me in person... Thank
        you!
        
        
        Miscellany
        ----------
        
        - Code repository: https://github.com/collective/uwosh.meeting
        - Questions and comments to nguyen@uwosh.edu
        - Report bugs at https://github.com/collective/uwosh.meeting/issues
        
        Change history
        **************
        
        Changelog
        =========
        
        [tkimnguyen] unreleased
        -----------------------
        
        - TODO: autocomplete for adding attendees
        
        - TODO: automatically link preceding and upcoming Meeting objects via
          Related Items field
        
        - TODO: for Solgema.fullcalendar, prevent "Add Meeting" from showing
          up when clicking on the Events calendar / or allow listing and
          adding Meeting objects in Events folder (probably easier)
        
        - TODO: implement one-time email notification as an action
        
        - TODO: (re) expose the "add comment" text field and button in
          meeting_view.pt that are normally there for non-Folderish content types
        
        - TODO: use BackReferenceBrowserWidget instead of BackReferenceWidget
          once it's not buggy!
        
        - TODO: add a "clone" action that makes the next meeting object and sets its
          previous meeting to be the current one
          
        
        0.5 (2011-11-24) [tkimnguyen]
        -----------------------------
        
        - added tests
        
        - fixed problem with removal of attendee that had only Editor role
        
        - Owner role now gets "uwosh.meeting: Add Meeting" permission by default
        
        
        0.4.3 (2011-11-23) [tkimnguyen]
        -------------------------------
        
        - automatically installs Products.ATBackRef 
        
        
        0.4.2 (2011-11-18) [tkimnguyen]
        -------------------------------
        
        - notification email message includes attendees email address; 
          wording change from "has invited you to" to "has shared the following 
          meeting" 
        
        
        0.4.1 (2011-11-18) [tkimnguyen]
        -------------------------------
        
        - fix bug when removing an attendee that had Editor role
        
        - improved handling of members without email addresses or full names
        
        - notification email message includes next and previous meeting URLs 
          and lists attendees' full name as well as ID
        
        
        0.4 (2011-09-30) [tkimnguyen] 
        -----------------------------
        
        - update product description
        
        - add "add attachment" link to the meeting_view.pt
        
        - add "view" link to calendar view
        
        - move the "allow discussion" setting to the default schemata
        
        - added instructions on how to get published Meeting objects to
          show up on the calendar portlet
        
        - added previousMeeting and nextMeeting attributes that use ATBackRef
          to show bidirectional relations between Meeting objects; requires
          separate installation of Products.ATBackRef
        
        
        0.3.1 (2011-09-13) [tkimnguyen]
        -------------------------------
        
        - version bump
        
        
        0.3 (2011-09-12) [tkimnguyen]
        -----------------------------
        
        - add Action Items and Next Meeting Date Time attributes
        
        - prevent unicode errors on sending email notification
        
        - email notification message includes text/plain version of rich text
          field values
        
        - fixed incorrect default skin choice on install
        
        
        0.2.2 (2011-08-29) [tkimnguyen]
        -------------------------------
        
        - add uwosh.meeting layer to all skins
        
        - add uninstall profile
        
        
        0.2.1 (2011-08-28) [tkimnguyen]
        -------------------------------
        
        - restore missing Related Items 
        
        - update content type description
        
        - in Solgema.fullcalendar view, added Edit and "Add attachment" links
          if user has Modify portal content permission
        
        
        0.2 (2011-08-27) [tkimnguyen]
        -----------------------------
        
        - Can send invitation email to all attendees ('None', 'One-time only',
          'On every edit')
        
        - Checkbox to allow attendees to edit the Meeting object
        
        - meeting_view and email notification includes listing of contained objects
        
        
        0.1 (2011-08-24) [tkimnguyen]
        -----------------------------
        
        - Basic functionality and attributes
        
        Detailed Documentation
        **********************
        
        Introduction
        ============
        
        This is a full-blown functional test. The emphasis here is on testing what
        the user may input and see, and the system is largely tested as a black box.
        We use PloneTestCase to set up this test as well, so we have a full Plone site
        to play with. We *can* inspect the state of the portal, e.g. using 
        self.portal and self.folder, but it is often frowned upon since you are not
        treating the system as a black box. Also, if you, for example, log in or set
        roles using calls like self.setRoles(), these are not reflected in the test
        browser, which runs as a separate session.
        
        Being a doctest, we can tell a story here.
        
        First, we must perform some setup. We use the testbrowser that is shipped
        with Five, as this provides proper Zope 2 integration. Most of the 
        documentation, though, is in the underlying zope.testbrower package.
        
            >>> from Products.Five.testbrowser import Browser
            >>> browser = Browser()
            >>> portal_url = self.portal.absolute_url()
        
        The following is useful when writing and debugging testbrowser tests. It lets
        us see all error messages in the error_log.
        
            >>> self.portal.error_log._ignored_exceptions = ()
        
        With that in place, we can go to the portal front page and log in. We will
        do this using the default user from PloneTestCase:
        
            >>> from Products.PloneTestCase.setup import portal_owner, default_password
        
        Because add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.  
        
            >>> browser.open(portal_url + '/login_form')
            >>> browser.getControl(name='__ac_name').value = portal_owner
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
        
        Here, we set the value of the fields on the login form and then simulate a
        submit click.  We then ensure that we get the friendly logged-in message:
        
            >>> "You are now logged in" in browser.contents
            True
        
        Finally, let's return to the front page of our site before continuing
        
            >>> browser.open(portal_url)
        
        -*- extra stuff goes here -*-
        The Meeting content type
        ===============================
        
        In this section we are tesing the Meeting content type by performing
        basic operations like adding, updadating and deleting Meeting content
        items.
        
        Adding a new Meeting content item
        --------------------------------
        
        We use the 'Add new' menu to add a new content item.
        
            >>> browser.getLink('Add new').click()
        
        Then we select the type of item we want to add. In this case we select
        'Meeting' and click the 'Add' button to get to the add form.
        
            >>> browser.getControl('Meeting').click()
            >>> browser.getControl(name='form.button.Add').click()
            >>> 'Meeting' in browser.contents
            True
        
        Now we fill the form and submit it.
        
            >>> browser.getControl(name='title').value = 'Meeting Sample'
            >>> browser.getControl('Save').click()
            >>> 'Changes saved' in browser.contents
            True
        
        And we are done! We added a new 'Meeting' content item to the portal.
        
        Updating an existing Meeting content item
        ---------------------------------------
        
        Let's click on the 'edit' tab and update the object attribute values.
        
            >>> browser.getLink('Edit').click()
            >>> browser.getControl(name='title').value = 'New Meeting Sample'
            >>> browser.getControl('Save').click()
        
        We check that the changes were applied.
        
            >>> 'Changes saved' in browser.contents
            True
            >>> 'New Meeting Sample' in browser.contents
            True
        
        Removing a/an Meeting content item
        --------------------------------
        
        If we go to the home page, we can see a tab with the 'New Meeting
        Sample' title in the global navigation tabs.
        
            >>> browser.open(portal_url)
            >>> 'New Meeting Sample' in browser.contents
            True
        
        Now we are going to delete the 'New Meeting Sample' object. First we
        go to the contents tab and select the 'New Meeting Sample' for
        deletion.
        
            >>> browser.getLink('Contents').click()
            >>> browser.getControl('New Meeting Sample').click()
        
        We click on the 'Delete' button.
        
            >>> browser.getControl('Delete').click()
            >>> 'Item(s) deleted' in browser.contents
            True
        
        So, if we go back to the home page, there is no longer a 'New Meeting
        Sample' tab.
        
            >>> browser.open(portal_url)
            >>> 'New Meeting Sample' in browser.contents
            False
        
        Adding a new Meeting content item as contributor
        ------------------------------------------------
        
        Not only site managers are allowed to add Meeting content items, but
        also site contributors.
        
        Let's logout and then login as 'contributor', a portal member that has the
        contributor role assigned.
        
            >>> browser.getLink('Log out').click()
            >>> browser.open(portal_url + '/login_form')
            >>> browser.getControl(name='__ac_name').value = 'contributor'
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
            >>> browser.open(portal_url)
        
        We use the 'Add new' menu to add a new content item.
        
            >>> browser.getLink('Add new').click()
        
        We select 'Meeting' and click the 'Add' button to get to the add form.
        
            >>> browser.getControl('Meeting').click()
            >>> browser.getControl(name='form.button.Add').click()
            >>> 'Meeting' in browser.contents
            True
        
        Now we fill the form and submit it.
        
            >>> browser.getControl(name='title').value = 'Meeting Sample'
            >>> browser.getControl('Save').click()
            >>> 'Changes saved' in browser.contents
            True
        
        Done! We added a new Meeting content item logged in as contributor.
        
        Finally, let's login back as manager.
        
            >>> browser.getLink('Log out').click()
            >>> browser.open(portal_url + '/login_form')
            >>> browser.getControl(name='__ac_name').value = portal_owner
            >>> browser.getControl(name='__ac_password').value = default_password
            >>> browser.getControl(name='submit').click()
            >>> browser.open(portal_url)
        
        
        
        
        Contributors
        ************
        
        T. Kim Nguyen <nguyen@uwosh.edu>
        
        
        Download
        ********
        
Keywords: meeting,event,folder,attachment,minutes,agenda,action items
Platform: UNKNOWN
Classifier: Framework :: Plone
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
