ABOUT
=====

The minihallib project is a simple library to access to devices class via
HAL/DBus subsystem.


CLASS DESCRIPTIONS
===== ============

HALDevice:
	Abstract layer to the representation of the HAL device object as a
	dict.

HALPlugin:
	Container of the HALDevice objects with given capability.

HALEventerThread:
	Basic threaded class to handle HAL events. It is contained 3 virtual
	functions: device_init, device_add, and device_remove. These functions
	called when program is started, device is plugged in, and device was
	removed respectively.

HALHandler:
	The real object successor of the HALEventerThread. The class is
	contained the message queue of the HAL events.

HALManager:
	The main dbus inclusion class. Also it provides HAL manager object with
	its interface.

MsgSender:
	Internal class to resend messages to the registered receivers.

HALWrapper:
	The global class of the all miniHalLib's code. It is contained
	singleton HALHandler and MsgSender objects. Also it provides common
	interface to initialization and registration internal objects and
	queues. Refer to the hvm example.

ListBus:
	Provides container of the devices connected to the given bus. Refer to
	the lspci example.

Log:
	Internal logger class. The logger may be customized via set_logger()
	call.


EXAMPLES
========

lspci:
	The lspci tool implementation. Just start it when you have installed
	miniHalLib.

hvm:
	HAL Volume Manager is used for automatical mount hotpluggable devices.


LICENSE
=======

Project is licensed under GPLv2+ or Academic Free License.


FEEDBACK
========

Please, send your any feedback to the my email: andy@smile.org.ua. Thank you.
