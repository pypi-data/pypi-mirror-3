@prefix map: <file:/d2r/mapping.ttl#> .
@prefix db: <> .
@prefix vocab: <{{d2r_niceURI}}/vocab/resource/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix d2rq: <http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#> .
@prefix jdbc: <http://d2rq.org/terms/jdbc/> .
@prefix d2r: <http://sites.wiwiss.fu-berlin.de/suhl/bizer/d2r-server/config.rdf#> .
{% for prefix,uri in namespaces.items %}@prefix {{prefix}}: <{{uri}}> .
{% endfor %}

<> a d2r:Server;
    rdfs:label "{{d2r_site_name}}";
    d2r:port {{d2r_port}};
    d2r:baseURI <{{d2r_baseURI}}>;
    d2r:autoReloadMapping true;
    d2r:limitPerClassMap false;   # to display everything within the interfac, default is 50
    .

map:database a d2rq:Database;
    d2rq:jdbcDriver "org.postgresql.Driver";
    d2rq:jdbcDSN "jdbc:postgresql://{{d2rq_db_host}}:{{d2rq_db_port}}/{{d2rq_db_name}}";
    d2rq:username "{{d2rq_username}}";
    d2rq:password "{{d2rq_password}}";
   .

# Table coop_cms_navtree
map:scheme a d2rq:ClassMap; # classe = modele Django
    d2rq:dataStorage map:database;
    d2rq:uriPattern "scheme/@@coop_cms_navtree.id@@/";
    d2rq:class skos:Scheme; # classe RDF correspondante
    d2rq:condition "coop_cms_navtree.name <> 'default'"
    .
    
map:scheme_name a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:scheme;
    d2rq:property rdfs:label;
    d2rq:column "coop_cms_navtree.name";
    d2rq:lang "fr"  
    .
    
# Table coop_tag_ctag
map:xlabel a d2rq:ClassMap;
    d2rq:dataStorage map:database;
    d2rq:uriPattern "label/@@coop_tag_ctag.slug@@/";
    d2rq:class skosxl:Label;
    .
map:xlabel_name a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:xlabel;
    d2rq:property skosxl:literalForm;
    d2rq:property rdfs:label;
    d2rq:column "coop_tag_ctag.name";
    d2rq:lang "fr"
    .
# map:tag_author_uri a d2rq:PropertyBridge;
#   d2rq:belongsToClassMap map:tag;
#   d2rq:property foaf:made;
#   d2rq:column "coop_tag_ctag.author_uri";
#   .
map:xlabel_created a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:xlabel;
    d2rq:property dct:created;
    d2rq:column "coop_tag_ctag.created";
    d2rq:datatype xsd:dateTime;
    .
map:xlabel_modified a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:xlabel;
    d2rq:property dct:modified;
    d2rq:column "coop_tag_ctag.modified";
    d2rq:datatype xsd:dateTime;
    .
map:xlabel_inscheme a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:xlabel;
    d2rq:refersToClassMap map:scheme;
    d2rq:property skos:inScheme;
    d2rq:join "coop_tag_ctag.id <= coop_cms_navnode.object_id";
    d2rq:join "django_content_type.id <= coop_cms_navnode.content_type_id";
    d2rq:condition "django_content_type.model = 'ctag'";
    d2rq:join "coop_cms_navtree.id <= coop_cms_navnode.tree_id";
    .
map:xlabel_broader a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:xlabel;
    d2rq:refersToClassMap map:xlabel;
    d2rq:property ess:broaderLabel;
    d2rq:alias "coop_tag_ctag AS subject_tag";
    d2rq:alias "coop_cms_navnode AS subject_node";
    d2rq:join "coop_tag_ctag.id <= coop_cms_navnode.object_id";
    d2rq:join "django_content_type.id <= coop_cms_navnode.content_type_id";
    d2rq:condition "django_content_type.model = 'ctag'";
    d2rq:join "subject_node.id <= coop_cms_navnode.parent_id";
    d2rq:join "subject_node.object_id => subject_tag.id"; 
    # they are on the same scheme
    d2rq:join "subject_node.tree_id = coop_cms_navnode.tree_id"; 
    .

# Table coop_tag_ctag
map:tag a d2rq:ClassMap; # classe = modèle Django
    d2rq:dataStorage map:database;
    {% if mode == 'view' %}
    d2rq:uriPattern "ctag/@@coop_tag_ctag.slug@@/";
    {% else %}
    d2rq:uriColumn "coop_tag_ctag.uri";
    {% endif %}
    d2rq:class ctag:Tag; # classe RDF correspondante
    .
map:tag__label a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:tag;
    d2rq:property rdfs:label; # propriété
    d2rq:pattern "Tag: @@coop_tag_ctag.name@@";
    .
map:tag_name a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:tag;
    d2rq:property ctag:label;
    d2rq:column "coop_tag_ctag.name";
    .
map:tag_author_uri a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:tag;
    d2rq:property foaf:made;
    d2rq:column "coop_tag_ctag.person_uri";
    .
map:tag_created a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:tag;
    d2rq:property ctag:taggingDate;
    d2rq:column "coop_tag_ctag.created";
    d2rq:datatype xsd:dateTime;
    .
map:tag_modified a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:tag;
    d2rq:property dct:modified;
    d2rq:column "coop_tag_ctag.modified";
    d2rq:datatype xsd:dateTime;
    .




# Table coop_local_organization
map:organization a d2rq:ClassMap;
    d2rq:dataStorage map:database;
{% if mode == 'view' %}
    d2rq:uriPattern "organization/@@coop_local_organization.id@@/";
{% else %}
    d2rq:uriColumn "coop_local_organization.uri";
{% endif %}
    d2rq:class ess:Organization;
#   d2rq:condition "coop_local_organization.active = 't'"
    .
map:organization__label a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:organization;
    d2rq:property rdfs:label;
    d2rq:pattern "@@coop_local_organization.title@@";
    .
map:organization_title a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:organization;
    d2rq:property dct:title;
    d2rq:property legal:legalName;
    d2rq:column "coop_local_organization.title";
    d2rq:condition "coop_local_organization.title <> ''";
    .
map:organization_legalName a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:organization;
    d2rq:property legal:legalName;
    d2rq:column "coop_local_organization.title";
    d2rq:condition "coop_local_organization.title <> ''";
    .
map:organization_subtitle a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:organization;
    d2rq:property skos:note;                # shoulf be dct:abstract, but incompatible with rdfalchemy
    d2rq:column "coop_local_organization.subtitle";
    d2rq:condition "coop_local_organization.subtitle <> ''";
    .
map:organization_description a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:organization;
    d2rq:property dct:description;
    d2rq:column "coop_local_organization.description";
    .
map:organization_mbox_sha1 a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:organization;
    d2rq:property foaf:mbox_sha1sum;
    d2rq:column "coop_local_organization.email_sha1";
    .
map:organization_web a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:organization;
    d2rq:property foaf:homepage;
    d2rq:uriColumn "coop_local_organization.web";
    d2rq:condition "coop_local_organization.web <> ''";
    .
map:organization_created a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:organization;
    d2rq:property dct:created;
    d2rq:column "coop_local_organization.created";
    d2rq:datatype xsd:dateTime;
    .
map:organization_modified a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:organization;
    d2rq:property dct:modified;
    d2rq:column "coop_local_organization.modified";
    d2rq:datatype xsd:dateTime;
    .
map:organization_birth a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:organization;
    d2rq:property foaf:birthday;
    d2rq:column "coop_local_organization.birth";
    d2rq:datatype xsd:date;
    .
map:organization_logo a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:organization;
    d2rq:property foaf:logo;
    d2rq:uriSqlExpression "('http://localhost:8000/media/'||coop_local_organization.logo)";
    .
    
# map:organization_siret a d2rq:PropertyBridge;
#   d2rq:belongsToClassMap map:organization;
#   d2rq:property vocab:coop_local_organization_siret;
#   d2rq:propertyDefinitionLabel "coop_local_organization siret";
#   d2rq:column "coop_local_organization.siret";
#   .
# map:organization_naf a d2rq:PropertyBridge;
#   d2rq:belongsToClassMap map:organization;
#   d2rq:property vocab:coop_local_organization_naf;
#   d2rq:propertyDefinitionLabel "coop_local_organization naf";
#   d2rq:column "coop_local_organization.naf";
#   .
# map:organization_statut a d2rq:PropertyBridge;
#   d2rq:belongsToClassMap map:organization;
#   d2rq:property vocab:coop_local_organization_statut;
#   d2rq:propertyDefinitionLabel "coop_local_organization statut";
#   d2rq:column "coop_local_organization.statut";
#   d2rq:datatype xsd:short;
#   .
# map:organization_secteur_fse a d2rq:PropertyBridge;
#   d2rq:belongsToClassMap map:organization;
#   d2rq:property vocab:coop_local_organization_secteur_fse;
#   d2rq:propertyDefinitionLabel "coop_local_organization secteur_fse";
#   d2rq:column "coop_local_organization.secteur_fse";
#   d2rq:datatype xsd:short;
#   .

map:organization_contacts a d2rq:PropertyBridge;  # EXAMPLE Direct generic relation
    d2rq:belongsToClassMap map:organization;
    d2rq:property ess:contact;
    d2rq:refersToClassMap map:contact;
    d2rq:join "coop_local_organization.id <= coop_local_contact.object_id";  # il existe un contact lié
    d2rq:join "django_content_type.id <= coop_local_contact.content_type_id";
    d2rq:condition "django_content_type.model = 'organization'";
    .   
map:organization_phone a d2rq:PropertyBridge;  # EXAMPLE Direct generic relation
    d2rq:belongsToClassMap map:organization;
    d2rq:property v:tel;
    d2rq:refersToClassMap map:tel;
    # d2rq:join "coop_local_organization.id = coop_local_contact.object_id";  # il existe un contact lié
    d2rq:join "coop_local_organization.pref_phone_id = coop_local_contact.id ";
    d2rq:condition "coop_local_contact.category = 1";
   .   
map:organization_email a d2rq:PropertyBridge;  # EXAMPLE Direct generic relation
    d2rq:belongsToClassMap map:organization;
    d2rq:property v:email;
    d2rq:refersToClassMap map:email;
    # d2rq:join "coop_local_organization.id = coop_local_contact.object_id";  # il existe un contact lié
    d2rq:join "coop_local_organization.pref_email_id = coop_local_contact.id ";
    d2rq:condition "coop_local_contact.category = 8";
   .  
  map:organization_addr a d2rq:PropertyBridge;  # EXAMPLE Direct generic relation
    d2rq:belongsToClassMap map:organization;
    d2rq:property legal:registeredAddress;
    d2rq:refersToClassMap map:location;
    d2rq:join "coop_local_organization.pref_address_id = coop_geo_location.id ";
    .  
map:organization_tags a d2rq:PropertyBridge; # EXAMPLE M2M generic relation
    d2rq:belongsToClassMap map:organization;
    d2rq:refersToClassMap map:tag;
    d2rq:property ctag:tagged;
    d2rq:join "coop_tag_ctag.id <= coop_tag_ctaggeditem.tag_id";
    d2rq:join "coop_local_organization.id <= coop_tag_ctaggeditem.object_id";
    d2rq:join "django_content_type.id <= coop_tag_ctaggeditem.content_type_id";
    d2rq:condition "django_content_type.model = 'organization'";
    .
map:organization_members a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:organization;
    d2rq:refersToClassMap map:person;
    d2rq:property org:hasMember;
    d2rq:join "coop_local_organization.id => coop_local_engagement.organization_id";
    d2rq:join "coop_local_engagement.person_id => coop_local_person.id";
    .
map:organization_locations a d2rq:PropertyBridge; # EXAMPLE M2M generic relation
    d2rq:belongsToClassMap map:organization;
    d2rq:property locn:location;
    d2rq:refersToClassMap map:location;
    d2rq:join "coop_local_organization.id <= coop_geo_located.object_id";
    d2rq:join "django_content_type.id <= coop_geo_located.content_type_id";
    d2rq:condition "django_content_type.model = 'organization'";
    d2rq:join "coop_geo_location.id <= coop_geo_located.location_id";
    .



# As for Area, the Table has to be split
# COMM_MEANS = Choices(
#     ('LAND',    1,  _(u'Landline phone')),
#     ('GSM',     2,  _(u'Mobile phone')),
#     ('FAX',     3,  _(u'Fax')),
#     ('SKYPE',   4,  _(u'Skype')),
#     ('TWITTER', 5,  _(u'Twitter')),
#     ('RSS',     6,  _(u'RSS Feed')),
#     ('VCAL',    7,  _(u'vCalendar')),
#     ('MAIL',    8,  _(u'E-mail')),
#     ('WEB',     9,  _(u'Secondary web site')),
# )



# Table coop_local_contact

map:tel a d2rq:ClassMap;                    # Intermediary table, to be able to discard upon
    d2rq:dataStorage map:database;          # type. I have found no way to do it cleaner....
    #d2rq:class v:Tel;                      # And we have to do it, even if it seems useless
    {% if mode == 'view' %}
    d2rq:uriPattern "contact/@@coop_local_contact.id@@/";
    {% else %}
    d2rq:uriColumn "coop_local_contact.uri";
    {% endif %}
    d2rq:condition "coop_local_contact.category = '1'";
    .
map:tel_type a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:tel;
    d2rq:property rdf:type;
    d2rq:constantValue v:Tel;
    d2rq:alias "coop_local_contact AS contactTel";
    d2rq:condition "contactTel.category = 1";
    .
map:gsm a d2rq:ClassMap;
    d2rq:dataStorage map:database;
    {% if mode == 'view' %}
    d2rq:uriPattern "contact/@@coop_local_contact.id@@/";
    {% else %}
    d2rq:uriColumn "coop_local_contact.uri";
    {% endif %}
    d2rq:condition "coop_local_contact.category = '2'";
    .
map:gsm_type a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:gsm;
    d2rq:property rdf:type;
    d2rq:constantValue v:Cell;
    d2rq:alias "coop_local_contact AS contactCell";
    d2rq:condition "contactCell.category = 2";
    .
map:fax a d2rq:ClassMap;
    d2rq:dataStorage map:database;
    {% if mode == 'view' %}
    d2rq:uriPattern "contact/@@coop_local_contact.id@@/";
    {% else %}
    d2rq:uriColumn "coop_local_contact.uri";
    {% endif %}
    d2rq:condition "coop_local_contact.category = '3'";
    .
map:fax_type a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:fax;
    d2rq:property rdf:type;
    d2rq:constantValue v:Fax;
    d2rq:alias "coop_local_contact AS contactFax";
    d2rq:condition "contactFax.category = 3";
    .
map:skype a d2rq:ClassMap;
    d2rq:dataStorage map:database;
    {% if mode == 'view' %}
    d2rq:uriPattern "contact/@@coop_local_contact.id@@/";
    {% else %}
    d2rq:uriColumn "coop_local_contact.uri";
    {% endif %}
    d2rq:condition "coop_local_contact.category = '4'";
    .
map:skype_type a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:skype;
    d2rq:property rdf:type;
    d2rq:constantValue ess:Skype;
    d2rq:alias "coop_local_contact AS contactSkype";
    d2rq:condition "contactSkype.category = 4";
    .
map:twitter a d2rq:ClassMap;
    d2rq:dataStorage map:database;
    {% if mode == 'view' %}
    d2rq:uriPattern "contact/@@coop_local_contact.id@@/";
    {% else %}
    d2rq:uriColumn "coop_local_contact.uri";
    {% endif %}
    d2rq:condition "coop_local_contact.category = '5'";
    .
map:twitter_type a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:twitter;
    d2rq:property rdf:type;
    d2rq:constantValue sioc:Post;
    d2rq:alias "coop_local_contact AS contactTwitter";
    d2rq:condition "contactTwitter.category = 5";
    .
map:rss a d2rq:ClassMap;
    d2rq:dataStorage map:database;
    {% if mode == 'view' %}
    d2rq:uriPattern "contact/@@coop_local_contact.id@@/";
    {% else %}
    d2rq:uriColumn "coop_local_contact.uri";
    {% endif %}
    d2rq:condition "coop_local_contact.category = '6'";
    .
map:rss_type a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:rss;
    d2rq:property rdf:type;
    d2rq:constantValue rss:Channel;              # TOBE discuss, see also dcat:Feed
    d2rq:alias "coop_local_contact AS contactRss";
    d2rq:condition "contactRss.category = 6";
    .
map:cal a d2rq:ClassMap;
    d2rq:dataStorage map:database;
    {% if mode == 'view' %}
    d2rq:uriPattern "contact/@@coop_local_contact.id@@/";
    {% else %}
    d2rq:uriColumn "coop_local_contact.uri";
    {% endif %}
    d2rq:condition "coop_local_contact.category = '7'";
    .
map:cal_type a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:cal;
    d2rq:property rdf:type;
    d2rq:constantValue event:Event;              
    d2rq:alias "coop_local_contact AS contactCal";
    d2rq:condition "contactCal.category = 7";
    .
map:email a d2rq:ClassMap;
    d2rq:dataStorage map:database;
    {% if mode == 'view' %}
    d2rq:uriPattern "contact/@@coop_local_contact.id@@/";
    {% else %}
    d2rq:uriColumn "coop_local_contact.uri";
    {% endif %}
    d2rq:condition "coop_local_contact.category = '8'";
    .
map:email_type a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:email;
    d2rq:property rdf:type;
    d2rq:constantValue v:Email;
    d2rq:alias "coop_local_contact AS contactEmail";
    d2rq:condition "contactEmail.category = 8";
    .
map:web a d2rq:ClassMap;
    d2rq:dataStorage map:database;
    {% if mode == 'view' %}
    d2rq:uriPattern "contact/@@coop_local_contact.id@@/";
    {% else %}
    d2rq:uriColumn "coop_local_contact.uri";
    {% endif %}
    d2rq:condition "coop_local_contact.category = '9'";
    .
map:web_type a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:web;
    d2rq:property rdf:type;
    d2rq:constantValue sioc:Site;
    d2rq:alias "coop_local_contact AS contactWeb";
    d2rq:condition "contactWeb.category = 9";
    .

map:contact a d2rq:ClassMap;
    d2rq:dataStorage map:database;
    {% if mode == 'view' %}
    d2rq:uriPattern "contact/@@coop_local_contact.id@@/";
    {% else %}
    d2rq:uriColumn "coop_local_contact.uri";
    {% endif %}
    .
map:contact__label a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:contact;
    d2rq:property rdfs:label;
    d2rq:pattern "coop_local_contact #@@coop_local_contact.id@@";
    .
map:contact_content a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:contact;
    d2rq:property rdf:value;
    d2rq:propertyDefinitionLabel "coop_local_contact content";
    d2rq:column "coop_local_contact.content";
    .
map:contact_details a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:contact;
    d2rq:property dct:description;
    d2rq:propertyDefinitionLabel "coop_local_contact details";
    d2rq:column "coop_local_contact.details";
    .
map:contact_created a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:contact;
    d2rq:property dct:created;
    d2rq:column "coop_local_contact.created";
    d2rq:datatype xsd:dateTime;
    .
map:contact_modified a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:contact;
    d2rq:property dct:modified;
    d2rq:column "coop_local_contact.modified";
    d2rq:datatype xsd:dateTime;
    .


# Table coop_local_role
map:role a d2rq:ClassMap;
    d2rq:dataStorage map:database;
    {% if mode == 'view' %}
    d2rq:uriPattern "role/@@coop_local_role.slug@@";
    {% else %}
    d2rq:uriColumn "coop_local_role.uri";
    {% endif %}
    d2rq:class org:Role;
    d2rq:classDefinitionLabel "coop_local_role";
    .
map:role_label a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:role;
    d2rq:property skos:label;
    d2rq:column "coop_local_role.label";
    .


# Définition basée sur la table Person
map:person a d2rq:ClassMap;
    d2rq:dataStorage map:database;
{% if mode == 'view' %}
    d2rq:uriPattern "person/@@coop_local_person.id@@/"; # URI == ID
{% else %}
    d2rq:uriColumn "coop_local_person.uri";
{% endif %}
    #d2rq:class foaf:Person;    # redundancy person:Person subclass of foaf:Person and schema:Person
    d2rq:class person:Person;
    .
map:person_last_name a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:person;
    d2rq:property foaf:familyName;      
    # d2rq:property schema:familyName;       # useless for our purpose
    d2rq:column "coop_local_person.last_name"; # la valeur est là
    .
map:person_first_name a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:person;
    d2rq:property foaf:givenName;          
    # d2rq:property schema:givenName;         # useless for our purpose
   d2rq:column "coop_local_person.first_name";
    .
map:person__label a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:person;
    d2rq:property rdfs:label;
    d2rq:property foaf:name;            
    # d2rq:property schema:name;             # useless for our purpos
    d2rq:pattern "@@coop_local_person.first_name@@ @@coop_local_person.last_name@@";
    .
# map:person_email a d2rq:PropertyBridge;
#   d2rq:belongsToClassMap map:person;
#   d2rq:property foaf:mbox;
#   d2rq:column "coop_local_person.email";
#   .
map:person_email a d2rq:PropertyBridge;
  d2rq:belongsToClassMap map:person;
  d2rq:property foaf:mbox_sha1sum;
  d2rq:column "coop_local_person.email_sha1";
  .
map:person_created a d2rq:PropertyBridge;
  d2rq:belongsToClassMap map:person;
  d2rq:property dct:created;
  d2rq:column "coop_local_person.created";
  d2rq:datatype xsd:dateTime;
  .
map:person_modified a d2rq:PropertyBridge;
  d2rq:belongsToClassMap map:person;
  d2rq:property dct:modified;
  d2rq:column "coop_local_person.modified";
  d2rq:datatype xsd:dateTime;
  .


# Table coop_local_engagement
map:engagement a d2rq:ClassMap;
    d2rq:dataStorage map:database;
{% if mode == 'view' %}
    d2rq:uriPattern "engagement/@@coop_local_engagement.id@@/"; # URI == ID
{% else %}
    d2rq:uriColumn "coop_local_engagement.uri";
{% endif %}
    d2rq:class org:Membership;
    .   
map:engagement__label a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:engagement;
    d2rq:property rdfs:label;
    d2rq:pattern "Engagement n°@@coop_local_engagement.id@@";
    .
map:engagement_created a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:engagement;
    d2rq:property dct:created;
    d2rq:column "coop_local_engagement.created";
    d2rq:datatype xsd:dateTime;
    .
map:engagement_modified a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:engagement;
    d2rq:property dct:modified;
    d2rq:column "coop_local_engagement.modified";
    d2rq:datatype xsd:dateTime;
    .
map:engagement_membre a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:engagement;
    d2rq:property org:member;
    d2rq:refersToClassMap map:person;
    d2rq:join "coop_local_engagement.person_id => coop_local_person.id";
    .
map:engagement_organization a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:engagement;
    d2rq:property org:organization;
    d2rq:refersToClassMap map:organization;
    d2rq:join "coop_local_engagement.organization_id => coop_local_organization.id";
    .
map:engagement_role a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:engagement;
    d2rq:property org:role;
    d2rq:refersToClassMap map:role;
    d2rq:join "coop_local_engagement.role_id => coop_local_role.id";
    .


# Table django_comments    To be finished
map:comment a d2rq:ClassMap;
    d2rq:dataStorage map:database;
    d2rq:uriPattern "comment/@@django_comments.id@@";
    d2rq:class sioc:Item;
    d2rq:classDefinitionLabel "django_comments";
    .

map:comment__label a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:comment;
    d2rq:property rdfs:label;
    d2rq:pattern "Commentaire n°@@django_comments.id@@";
    .

map:comment_author a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:comment;
    d2rq:property dct:author;
    d2rq:column "django_comments.user_name";
    .
    
    

# Table coop_geo_area
map:area a d2rq:ClassMap;
    d2rq:dataStorage map:database;
    {% if mode == 'view' %}
    d2rq:uriPattern "area/@@coop_geo_area.reference@@";
    {% else %}
    d2rq:uriColumn "coop_geo_area.uri";
    {% endif %}
    d2rq:class dct:Location;
    .
map:area_departement a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:area;
    d2rq:property rdf:type;
    d2rq:constantValue insee:Departement;
    d2rq:alias "coop_geo_areatype AS areatype_dep";
    d2rq:condition "areatype_dep.txt_idx = 'DEP'";
    d2rq:join "coop_geo_area.area_type_id => areatype_dep.id";
    .
map:area_commune a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:area;
    d2rq:property rdf:type;
    d2rq:constantValue insee:Commune;
    d2rq:condition "coop_geo_areatype.txt_idx = 'COM'";
    d2rq:join "coop_geo_area.area_type_id => coop_geo_areatype.id";
    .    
map:area_label a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:area;
    d2rq:property rdfs:label;
    d2rq:column "coop_geo_area.label";
    .
map:area_reference a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:area;
    d2rq:property skos:notation;
    d2rq:column "coop_geo_area.reference";
    .
 map:area_polygon a d2rq:PropertyBridge;
   d2rq:belongsToClassMap map:area;
   d2rq:property locn:geometry;
   d2rq:sqlExpression "ST_AsText(coop_geo_area.polygon)";
   d2rq:datatype opens:wkt;
   .
   


# Table coop_geo_location
map:location a d2rq:ClassMap;
    d2rq:dataStorage map:database;
    {% if mode == 'view' %}
    d2rq:uriPattern "location/@@coop_geo_location.geohash@@";
    {% else %}
    d2rq:uriSqlExpression "'http://data.economie-solidaire.fr/id/location/' || coop_geo_location.geohash";
    # d2rq:uriPattern "location/@@coop_geo_location.geohash@@";   # Wainting for an anwers
    {% endif %}   
    d2rq:class dct:Location;
    .
map:location_label a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:location;
    d2rq:property rdfs:label;
    d2rq:propertyDefinitionLabel "coop_geo_location label";
    d2rq:column "coop_geo_location.label";
    .
 map:location_point a d2rq:PropertyBridge;
   d2rq:belongsToClassMap map:location;
   d2rq:property locn:geometry;
   d2rq:sqlExpression "ST_AsText(coop_geo_location.point)";
   d2rq:datatype opens:wkt;
   .
 map:location_addr a d2rq:PropertyBridge;
   d2rq:belongsToClassMap map:location;
   d2rq:property locn:address;
   d2rq:refersToClassMap  map:addr;
   .   
map:location_created a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:location;
    d2rq:property dct:created;
    d2rq:column "coop_geo_location.created";
    d2rq:datatype xsd:dateTime;
    .
map:location_modified a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:location;
    d2rq:property dct:modified;
    d2rq:column "coop_geo_location.modified";
    d2rq:datatype xsd:dateTime;
    .

# map:location_owner_id a d2rq:PropertyBridge;
#   d2rq:belongsToClassMap map:location;
#   d2rq:property vocab:coop_geo_location_owner_id;
#   d2rq:refersToClassMap map:auth_user;
#   d2rq:join "coop_geo_location.owner_id => auth_user.id";
#   .
# map:location_area_id a d2rq:PropertyBridge;
#   d2rq:belongsToClassMap map:location;
#   d2rq:property vocab:coop_geo_location_area_id;
#   d2rq:refersToClassMap map:coop_geo_area;
#   d2rq:join "coop_geo_location.area_id => coop_geo_area.id";
#   .



# Table coop_geo_location is used to build addresses
map:addr a d2rq:ClassMap;
    d2rq:dataStorage map:database;
    {% if mode == 'view' %}
    d2rq:uriPattern "coop_geo_addr/@@coop_geo_location.uuid@@";
    {% else %}
    d2rq:uriColumn "coop_geo_location.uri";
    {% endif %}
    d2rq:class locn:Address;
    .

map:addr_fulladdr a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:addr;
    d2rq:property locn:fullAddress;
    d2rq:property rdfs:label;
    d2rq:pattern "@@coop_geo_location.adr1@@ @@coop_geo_location.adr2@@  @@coop_geo_location.zipcode@@ @@coop_geo_location.city@@";
    .
map:addr_adr1 a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:addr;
    d2rq:property locn:thoroughfare;
    d2rq:column "coop_geo_location.adr1";
    d2rq:condition "coop_geo_location.adr1 <> ''";
    .
map:addr_adr2 a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:addr;
    d2rq:property locn:locatorName;
    d2rq:column "coop_geo_location.adr2";
    d2rq:condition "coop_geo_location.adr2 <> ''";
    .
map:addr_zipcode a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:addr;
    d2rq:property locn:postCode;
    d2rq:column "coop_geo_location.zipcode";
    .
map:addr_city a d2rq:PropertyBridge;
    d2rq:belongsToClassMap map:addr;
    d2rq:property locn:postName;
    d2rq:column "coop_geo_location.city";
    .
{% block mappings %}
{% endblock %}
