status: 200
x-ratelimit-remaining: 59
content-location: https://github.com/api/v2/json/issues/search/ask/python-github2/closed/timezone
-content-encoding: gzip
connection: keep-alive
content-length: 3425
server: nginx/1.0.4
x-runtime: 115ms
x-ratelimit-limit: 60
etag: "bfda19659b7735d883284fd23fd703ea"
cache-control: private, max-age=0, must-revalidate
date: Thu, 25 Aug 2011 06:53:44 GMT
content-type: application/json; charset=utf-8

{"issues":[{"gravatar_id":"c5a7f21b46df698f3db31c37ed0cf55a","position":21.0,"number":21,"votes":0,"created_at":"2010/12/06 13:10:09 -0800","comments":1,"body":"Hi Ask,\r\n\r\nToday, I commited several patches. First of all, I added support for authenticating using `Github(access_token=\"...\")` GET requests instead of `Github(username=\"foo\", api_token=\"...\")` POST requests.  This is the way Github API v2 URLs need to be called when using their (experimental) OAuth model.\r\n\r\nFurthermore, while I was testing this, the Github API seems to have changed the format of all dates to be nice UTC dates with timezone info. This makes the special conversion hoops and tricks unnecessary, so I removed them.  For safety, I kept the \"flexible date conversion function lookup\" construct around, but maybe this could be removed as a whole. I'll leave this judgement up to you.\r\n\r\nHave a blast!\r\n\r\nCheers,\r\nVincent\r\n","title":"Add support for OAuth URLs, and a fix for date format","updated_at":"2010/12/06 21:28:42 -0800","diff_url":"https://github.com/ask/python-github2/pull/21.diff","patch_url":"https://github.com/ask/python-github2/pull/21.patch","pull_request_url":"https://github.com/ask/python-github2/pull/21","closed_at":"2010/12/06 21:28:42 -0800","html_url":"https://github.com/ask/python-github2/issues/21","user":"nvie","labels":[],"state":"closed"},{"gravatar_id":"e40de1eb6e8a74cb96b3f07f3994f155","position":39.0,"number":39,"votes":0,"created_at":"2011/04/18 08:25:47 -0700","comments":4,"body":"\nFeeble brainstorming session...\n\nI've just been bitten quite badly by the lack of timezone handling, the cause is the use of naive datetime objects in the 'GitHub' timezone(`America/Los_Angeles`).  While processing some tasks that span the PST/PDT changeover the ordering of events is broken.\n\nOptions are:\n\n1. Leave alone and try to process the datetime objects externally, somewhat easy but not a good solution as it requires duplication in each project that requires accurate date handling\n2. Start producing non-naive datetime objects, breaks any caller who is not prepared for it.\n3. Introduce a setting to toggle naive object availability, defaulting to naive objects to maintain backwards compatibility\n\n[python-dateutil](http://labix.org/python-dateutil) makes handling option 1 quite easy, and also simplifies the handling of option 3 at the cost of another external dependency.  Option 2 is just pure evil, or pure stupidity depending on point of view.\n\nOption 3 results in a parsing using something like the following entirely untested code:\n\n    datetime_ = parser.parse(github_date)\n    if NAIVE:\n        datetime_.replace(tzinfo=None)\n    return datetime_\n\nAnd similarly producing GitHub compatible date strings would require handling of naive formats with equally untested code such as:\n\n    if NAIVE:\n        datetime_ = datetime_.replace(tz.gettz(\"America/Los_Angeles\"))\n    return datetime_.strftime(\"%Y/%m/%d %H:%M:%S %z\")","title":"Datetime timezone handling.","updated_at":"2011/06/23 02:33:57 -0700","diff_url":"https://github.com/ask/python-github2/pull/39.diff","patch_url":"https://github.com/ask/python-github2/pull/39.patch","pull_request_url":"https://github.com/ask/python-github2/pull/39","closed_at":"2011/06/23 02:33:57 -0700","html_url":"https://github.com/ask/python-github2/issues/39","user":"JNRowe","labels":[],"state":"closed"}]}