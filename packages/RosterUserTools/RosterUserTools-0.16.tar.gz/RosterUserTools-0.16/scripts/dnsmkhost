#!/usr/bin/env python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Make host tool for dnsmanagement"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.16'


import sys

from roster_user_tools import cli_record_lib
from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib
from roster_user_tools.action_flags import Make
from roster_user_tools.data_flags import Host


class Args(Make, Host):
  pass


def main(args):
  """Collects command line arguments, checks ip addresses and adds records.

  Inputs:
    args: list of arguments from the command line
  """
  command = None
  if( args and not args[0].startswith('-') ):
    command = args.pop(0)
  usage = ('\n'
           '\n'
           'To make a host:\n'
           '\t%s add --ip-address <ip-address> -t <target>\n'
           '\t-z <zone-name> [--ttl <ttl>] [-v <view-name>]\n'
           '\n'
           'To make a host with an automatically assigned ip address:\n'
           '\t%s findfirst --cidr-block <cidr-block> -t <target>\n'
           '\t-z <zone-name> [--ttl <ttl>] [-v <view-name>]\n' % tuple(
               [sys.argv[0] for _ in range(2)]))
  args_instance = Args(command, ['findfirst', 'add'], args, usage)
  options = args_instance.options

  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, error:
    print 'ERROR: %s' % error
    sys.exit(1)
  cli_record_lib_instance = cli_record_lib.CliRecordLib(cli_common_lib_instance)

  if( command == 'findfirst' ):
    options.ip_address = roster_client_lib.RunFunction(
        "ListAvailableIpsInCIDR", options.username, credfile=options.credfile,
        server_name=options.server, args=[options.cidr_block])['core_return'][0]

  if( options.ip_address.find('.') != -1 ):
    version = 4
  elif( options.ip_address.find(':') != -1 ):
    version = 6
  else:
    cli_common_lib.DnsError('Incorrectly formatted IP address.', 1)

  record_type = u'a'
  if( version == 6 ):
    record_type = u'aaaa'
  reverse_ip = roster_client_lib.RunFunction('ReverseIP',
                                             options.username,
                                             credfile=options.credfile,
                                             server_name=options.server,
                                             args=[options.ip_address])[
                                                 'core_return']
  zone_info = roster_client_lib.RunFunction(
      'ListZones', options.username, credfile=options.credfile,
      server_name=options.server,
      kwargs={'zone_name': options.zone_name})['core_return']
  if( options.zone_name is None ):
    cli_common_lib.DnsError(
        'A zone must be specified with -z/--zone-name.', 1)
  if( options.zone_name not in zone_info ):
    cli_common_lib.DnsError(
        'Zone "%s" does not exist.' % options.zone_name, 1)
  if( options.view_name not in zone_info[options.zone_name] ):
    cli_common_lib.DnsError('Zone "%s" not found in "%s" view.' % (
        options.zone_name, options.view_name), 1)
  zone_origin = zone_info[options.zone_name][options.view_name][
      'zone_origin'].rstrip('.')
  if( options.target.rstrip('.').endswith(zone_origin) ):
    cli_common_lib.DnsError('Hostname cannot end with domain name.', 1)
  if( zone_origin.endswith('.in-addr.arpa') or
      zone_origin.endswith('.ip6.arpa') ):
    cli_common_lib.DnsError(
        'This tool requres a forward zone as an argument. '
        'Reverse zones are handled automatically.', 1)

  reverse_zone_name = roster_client_lib.RunFunction(
      'ListZoneByIPAddress', options.username, credfile=options.credfile,
      server_name=options.server, args=[options.ip_address])['core_return']

  if( not reverse_zone_name ):
    cli_common_lib.DnsError('No reverse zone found for "%s"' % (
        options.ip_address), 1)

  cli_record_lib_instance.MakeRecord(record_type, options,
                            {u'assignment_ip': options.ip_address},
                            quiet=options.quiet)
  hostname = options.target
  options.target = reverse_ip
  options.zone_name = reverse_zone_name
  cli_record_lib_instance.MakeRecord(u'ptr', options,
                            {u'assignment_host': '%s.%s.' % (
                                hostname, zone_origin)},
                            quiet=options.quiet)


if __name__ == "__main__":
  main(sys.argv[1:])
