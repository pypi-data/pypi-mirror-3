VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: HFa9sqnKTHliHvIv246d9Nj5KTM=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T04%3A28%3A22ZazbOKl
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T04:28:22ZazbOKl
openid.response_nonce: 2011-04-13T04:27:33ZY395BC
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: jQ+lKaEocvXR0ImCdfDhcKr4iUg=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T04%3A28%3A22ZazbOKl
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T04:28:22ZazbOKl
openid.response_nonce: 2011-04-13T04:37:38ZhCKVbi
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: No pre-discovered information supplied.
OPENID LIB: Performing discovery on http://lorien.name/
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing openid.yandex.ru OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: DdU+wY+PVEMjocQ8gRDtQrd2REY=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T04%3A38%3A34ZzPjBT9
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T04:38:34ZzPjBT9
openid.response_nonce: 2011-04-13T04:37:45ZucMYgL
openid.claimed_id: http://lorien-name.ya.ru/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://lorien-name.ya.ru/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/extensions/sreg/1.1', 'http://openid.net/srv/ax/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='http://openid.yandex.ru/server/' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on http://lorien-name.ya.ru/
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing openid.yandex.ru OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: lZDV2MHSIjkCUrdWMibl5Ns97Bg=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T04%3A40%3A35ZJtLvbo
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T04:40:35ZJtLvbo
openid.response_nonce: 2011-04-13T04:39:46Z3ysXge
openid.claimed_id: http://lorien-name.ya.ru/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://lorien-name.ya.ru/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/extensions/sreg/1.1', 'http://openid.net/srv/ax/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='http://openid.yandex.ru/server/' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on http://lorien-name.ya.ru/
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing openid.yandex.ru OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: M5NtxO6+uVYSjEFZLSqFhPsJ5Ug=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T04%3A41%3A25ZIHjy4w
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T04:41:25ZIHjy4w
openid.response_nonce: 2011-04-13T04:40:36ZfmFmCy
openid.claimed_id: http://lorien-name.ya.ru/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://lorien-name.ya.ru/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/extensions/sreg/1.1', 'http://openid.net/srv/ax/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='http://openid.yandex.ru/server/' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on http://lorien-name.ya.ru/
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: tDQDtVfYk3DQvAEqlqKDsJJ5Hp8=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T05%3A39%3A01ZkiNkr5
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T05:39:01ZkiNkr5
openid.response_nonce: 2011-04-13T05:38:12ZK7w7TC
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: VqhByjCU29t9XznDZIeUe1VFc3g=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T05%3A39%3A36ZiF0zLE
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T05:39:36ZiF0zLE
openid.response_nonce: 2011-04-13T05:38:46ZD1PrUI
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: metDRLccsyNLMqs57tehXUeqFd0=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T05%3A39%3A57Z7GFK1b
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T05:39:57Z7GFK1b
openid.response_nonce: 2011-04-13T05:39:07Z7659Pa
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: 05OCfak7yTbJFpiFBNzJ2Ua3z8I=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T05%3A39%3A57Z7GFK1b
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T05:39:57Z7GFK1b
openid.response_nonce: 2011-04-13T05:41:12ZjDhNrK
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: No pre-discovered information supplied.
OPENID LIB: Performing discovery on http://lorien.name/
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
Could not import service authentication backend
Traceback (most recent call last):
  File "/home/lorien/web/django-xauth/xauth/backends.py", line 15, in authenticate
    backend = getattr(module, 'authenticate')
AttributeError: 'module' object has no attribute 'authenticate'
Authenticating user with openid xauth service
Could not import service authentication backend
Traceback (most recent call last):
  File "/home/lorien/web/django-xauth/xauth/backends.py", line 15, in authenticate
    auth_func = getattr(module, 'authenticate')
AttributeError: 'module' object has no attribute 'authenticate'
Authenticating user with openid xauth service
Could not import service authentication backend
Traceback (most recent call last):
  File "/home/lorien/web/django-xauth/xauth/backends.py", line 15, in authenticate
    auth_func = getattr(module, 'authenticate')
AttributeError: 'module' object has no attribute 'authenticate'
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: VVJL5DGtPBg2KJqtVkFW0J7cNqE=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T05%3A52%3A02ZPdmx3S&openid1_claimed_id=http%3A%2F%2Florien.name%2F
janrain_nonce: 2011-04-13T05:52:02ZPdmx3S
openid.response_nonce: 2011-04-13T05:51:13ZFFmwOc
openid.mode: id_res
openid1_claimed_id: http://lorien.name/
openid.signed: assoc_handle,identity,mode,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: d7Mw/pPe9eIMaJDkoRUdE9T6RRk=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T05%3A52%3A28ZaYsCNt
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T05:52:28ZaYsCNt
openid.response_nonce: 2011-04-13T05:51:39ZUuIesm
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: XZRCvdyt3tYFrKtAdf6m6Yys5Bc=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T05%3A52%3A43ZDglj2o
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T05:52:43ZDglj2o
openid.response_nonce: 2011-04-13T05:51:54ZOZ6u9B
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: 4bhPRQC2HtbHkmtCUJ4Rv6ZQEIk=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T05%3A57%3A32ZTqolHA
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T05:57:32ZTqolHA
openid.response_nonce: 2011-04-13T05:56:42ZXvteu5
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: +mHk9HLx7ACs/hGMilQm8fkudoA=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T05%3A58%3A02Z4GjJsU
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T05:58:02Z4GjJsU
openid.response_nonce: 2011-04-13T05:57:13ZsdgFY9
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: b1lws462iwmZtTjXr3G1e1nbaMg=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A00%3A11Za2pdPH
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:00:11Za2pdPH
openid.response_nonce: 2011-04-13T05:59:21ZHvvTlJ
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: 2BDvpdcWg9H5WZXU03rzpuiaFAU=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A00%3A38Zf0ybTg
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:00:38Zf0ybTg
openid.response_nonce: 2011-04-13T05:59:48ZNQTA7j
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: GruIBO7cMKIQlfx9ZFXbKVNtsoQ=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A01%3A38Zx8DOVM
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:01:38Zx8DOVM
openid.response_nonce: 2011-04-13T06:00:48ZnmXr4E
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: f55pu4NNU5TAo/FA13IoimQzGEk=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A05%3A53ZG0kM9d
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:05:53ZG0kM9d
openid.response_nonce: 2011-04-13T06:05:03ZC2d1Np
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: 5rfVXqBoU3vxblfvGwViXd1RX6A=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A10%3A02ZB9Z7Wh
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:10:02ZB9Z7Wh
openid.response_nonce: 2011-04-13T06:09:12ZV8jMH6
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: J91zN1FItORdihBgZO6zyTHNKGQ=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A10%3A18Z70k6w6
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:10:18Z70k6w6
openid.response_nonce: 2011-04-13T06:09:28Zfjq390
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing google.com OpenID URL
Setting up the consumer
Setting up the store
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing google.com OpenID URL
Setting up the consumer
Setting up the store
DiscoveryFailure
Traceback (most recent call last):
  File "/home/lorien/web/django-xauth/xauth/service/openid/views.py", line 51, in prepare
    auth_request = con.begin(openid_url)
  File "/home/lorien/web/django-xauth/demo/.env/lib/python2.6/site-packages/openid/consumer/consumer.py", line 351, in begin
    'No usable OpenID services found for %s' % (user_url,), None)
DiscoveryFailure: No usable OpenID services found for google.com
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing google.com OpenID URL
Setting up the consumer
Setting up the store
DiscoveryFailure
Traceback (most recent call last):
  File "/home/lorien/web/django-xauth/xauth/service/openid/views.py", line 51, in prepare
    auth_request = con.begin(openid_url)
  File "/home/lorien/web/django-xauth/demo/.env/lib/python2.6/site-packages/openid/consumer/consumer.py", line 351, in begin
    'No usable OpenID services found for %s' % (user_url,), None)
DiscoveryFailure: No usable OpenID services found for google.com
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing https://www.google.com/accounts/o8/id OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to https://www.google.com/accounts/o8/ud with assocication AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: https://www.google.com/accounts/o8/ud
openid.sig: Sm7FDT+4EHsYxZfXn04jBp4ji7M=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A14%3A52Z0ycJj0
janrain_nonce: 2011-04-13T06:14:52Z0ycJj0
openid.response_nonce: 2011-04-13T06:14:08Zur1ofGTg5U6tQQ
openid.claimed_id: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
openid.mode: id_res
openid.signed: op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle
openid.assoc_handle: AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
openid.ns: http://specs.openid.net/auth/2.0
openid.identity: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/srv/ax/1.0', 'http://specs.openid.net/extensions/ui/1.0/mode/popup', 'http://specs.openid.net/extensions/ui/1.0/icon', 'http://specs.openid.net/extensions/pape/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='https://www.google.com/accounts/o8/ud' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
OPENID LIB: Received id_res response from https://www.google.com/accounts/o8/ud using association AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: https://www.google.com/accounts/o8/ud
openid.sig: LjD86VVuMbBFW+MUt5pxiMSqP5c=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A14%3A52Z0ycJj0
janrain_nonce: 2011-04-13T06:14:52Z0ycJj0
openid.response_nonce: 2011-04-13T06:15:11ZvEWX3bx6koSdeA
openid.claimed_id: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
openid.mode: id_res
openid.signed: op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle
openid.assoc_handle: AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
openid.ns: http://specs.openid.net/auth/2.0
openid.identity: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: No pre-discovered information supplied.
OPENID LIB: Performing discovery on https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
OPENID LIB: Received id_res response from https://www.google.com/accounts/o8/ud using association AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing https://www.google.com/accounts/o8/id OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to https://www.google.com/accounts/o8/ud with assocication AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: https://www.google.com/accounts/o8/ud
openid.sig: WI4J0npFBsZpDAG7DdsAQRTzaVk=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A16%3A21Z691TLF
janrain_nonce: 2011-04-13T06:16:21Z691TLF
openid.response_nonce: 2011-04-13T06:15:32ZJHkWwIhNRtuLSA
openid.claimed_id: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
openid.mode: id_res
openid.signed: op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle
openid.assoc_handle: AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
openid.ns: http://specs.openid.net/auth/2.0
openid.identity: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/srv/ax/1.0', 'http://specs.openid.net/extensions/ui/1.0/mode/popup', 'http://specs.openid.net/extensions/ui/1.0/icon', 'http://specs.openid.net/extensions/pape/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='https://www.google.com/accounts/o8/ud' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
OPENID LIB: Received id_res response from https://www.google.com/accounts/o8/ud using association AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
Authenticating user with openid xauth service
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing https://www.google.com/accounts/o8/id OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to https://www.google.com/accounts/o8/ud with assocication AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: https://www.google.com/accounts/o8/ud
openid.sig: v6nWxrHOLdxyAIqQTweaatdUNME=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A17%3A04ZgJ1aaR
janrain_nonce: 2011-04-13T06:17:04ZgJ1aaR
openid.response_nonce: 2011-04-13T06:16:15Z_RWLmQ6jrKu_hw
openid.claimed_id: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
openid.mode: id_res
openid.signed: op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle
openid.assoc_handle: AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
openid.ns: http://specs.openid.net/auth/2.0
openid.identity: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/srv/ax/1.0', 'http://specs.openid.net/extensions/ui/1.0/mode/popup', 'http://specs.openid.net/extensions/ui/1.0/icon', 'http://specs.openid.net/extensions/pape/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='https://www.google.com/accounts/o8/ud' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
OPENID LIB: Received id_res response from https://www.google.com/accounts/o8/ud using association AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
Authenticating user with openid xauth service
VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: iCHKxEtDkei9G+7ooYKQRiOAPlY=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A17%3A18ZG4yJ0R
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:17:18ZG4yJ0R
openid.response_nonce: 2011-04-13T06:16:29ZKrmx4X
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing https://www.google.com/accounts/o8/id OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to https://www.google.com/accounts/o8/ud with assocication AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: https://www.google.com/accounts/o8/ud
openid.sig: Aoz95ttWp2k5cp5HK70AdSJH3is=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A18%3A47ZLahnUu
janrain_nonce: 2011-04-13T06:18:47ZLahnUu
openid.response_nonce: 2011-04-13T06:17:57ZC0-SMlFuIGfckg
openid.claimed_id: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
openid.mode: id_res
openid.signed: op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle
openid.assoc_handle: AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
openid.ns: http://specs.openid.net/auth/2.0
openid.identity: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/srv/ax/1.0', 'http://specs.openid.net/extensions/ui/1.0/mode/popup', 'http://specs.openid.net/extensions/ui/1.0/icon', 'http://specs.openid.net/extensions/pape/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='https://www.google.com/accounts/o8/ud' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
OPENID LIB: Received id_res response from https://www.google.com/accounts/o8/ud using association AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
Authenticating user with openid xauth service
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: zcXli1dNk8M3lk2V7fLONPoeaiY=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A24%3A36ZsoXi3G
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:24:36ZsoXi3G
openid.response_nonce: 2011-04-13T06:23:46ZNYLH1V
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START service_list
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: D+kDkyofoTQqI/gtWRsAitPSM+M=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A24%3A36ZsoXi3G
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:24:36ZsoXi3G
openid.response_nonce: 2011-04-13T06:23:54ZvzZQSs
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: No pre-discovered information supplied.
OPENID LIB: Performing discovery on http://lorien.name/
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: cSEFvBM9E8WWOaAxzPjieyEZe4M=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A24%3A46ZP2tifJ
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:24:46ZP2tifJ
openid.response_nonce: 2011-04-13T06:23:57ZfxZv4N
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing https://www.google.com/accounts/o8/id OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to https://www.google.com/accounts/o8/ud with assocication AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: https://www.google.com/accounts/o8/ud
openid.sig: JyY2WG/kY1xijAIEgow6INQSq9k=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A24%3A51ZMl8v7f
janrain_nonce: 2011-04-13T06:24:51ZMl8v7f
openid.response_nonce: 2011-04-13T06:24:02ZITfcGntZkVNW-Q
openid.claimed_id: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
openid.mode: id_res
openid.signed: op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle
openid.assoc_handle: AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
openid.ns: http://specs.openid.net/auth/2.0
openid.identity: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/srv/ax/1.0', 'http://specs.openid.net/extensions/ui/1.0/mode/popup', 'http://specs.openid.net/extensions/ui/1.0/icon', 'http://specs.openid.net/extensions/pape/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='https://www.google.com/accounts/o8/ud' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
OPENID LIB: Received id_res response from https://www.google.com/accounts/o8/ud using association AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
Authenticating user with openid xauth service
VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing https://www.google.com/accounts/o8/id OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to https://www.google.com/accounts/o8/ud with assocication AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: https://www.google.com/accounts/o8/ud
openid.sig: UYVC45gNrp35A3YHl/uH6qLFGto=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A25%3A00ZhDWI7g
janrain_nonce: 2011-04-13T06:25:00ZhDWI7g
openid.response_nonce: 2011-04-13T06:24:10ZXWlp_ZE43LnxiQ
openid.claimed_id: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
openid.mode: id_res
openid.signed: op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle
openid.assoc_handle: AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
openid.ns: http://specs.openid.net/auth/2.0
openid.identity: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/srv/ax/1.0', 'http://specs.openid.net/extensions/ui/1.0/mode/popup', 'http://specs.openid.net/extensions/ui/1.0/icon', 'http://specs.openid.net/extensions/pape/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='https://www.google.com/accounts/o8/ud' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
OPENID LIB: Received id_res response from https://www.google.com/accounts/o8/ud using association AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
Authenticating user with openid xauth service
VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: 3W5/cMJJrbHEdXMwbhWTQhgkpvM=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A30%3A47Zc1cBYh
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:30:47Zc1cBYh
openid.response_nonce: 2011-04-13T06:29:58ZpkmpWX
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: r6aMWfUAw1IiLST4qGjJLNX8f1Y=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A31%3A05ZcoC3BV
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:31:05ZcoC3BV
openid.response_nonce: 2011-04-13T06:30:16Z5E7q1M
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing https://www.google.com/accounts/o8/id OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to https://www.google.com/accounts/o8/ud with assocication AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: https://www.google.com/accounts/o8/ud
openid.sig: okGaMME5ATbcx76hbSjPGGf0cTo=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A31%3A21ZhkLM99
janrain_nonce: 2011-04-13T06:31:21ZhkLM99
openid.response_nonce: 2011-04-13T06:30:32Zsd7kE3TAux6eyw
openid.claimed_id: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
openid.mode: id_res
openid.signed: op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle
openid.assoc_handle: AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
openid.ns: http://specs.openid.net/auth/2.0
openid.identity: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/srv/ax/1.0', 'http://specs.openid.net/extensions/ui/1.0/mode/popup', 'http://specs.openid.net/extensions/ui/1.0/icon', 'http://specs.openid.net/extensions/pape/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='https://www.google.com/accounts/o8/ud' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
OPENID LIB: Received id_res response from https://www.google.com/accounts/o8/ud using association AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
Authenticating user with openid xauth service
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: G1avLyLq24Wh8jQ/FLOzUqyaYUs=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A31%3A30Zse5i8S
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:31:30Zse5i8S
openid.response_nonce: 2011-04-13T06:30:40Zo7FSLt
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: 6epmIrpWVcYZwFEE+l1b9Ds6QZ4=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A34%3A32Zva9Zlh
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:34:32Zva9Zlh
openid.response_nonce: 2011-04-13T06:33:43ZzRYKoH
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: hJNm2BsrtsfZPqlUznVcLKVOQrk=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A34%3A49ZmKv9pU
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:34:49ZmKv9pU
openid.response_nonce: 2011-04-13T06:34:00ZePgD51
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing https://www.google.com/accounts/o8/id OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to https://www.google.com/accounts/o8/ud with assocication AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: https://www.google.com/accounts/o8/ud
openid.sig: GqGQWb5Rcngi2QbESSAQ00PZHuQ=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A34%3A55Zg2G8Jn
janrain_nonce: 2011-04-13T06:34:55Zg2G8Jn
openid.response_nonce: 2011-04-13T06:34:05Z6dSLcf9VtXDQAQ
openid.claimed_id: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
openid.mode: id_res
openid.signed: op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle
openid.assoc_handle: AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
openid.ns: http://specs.openid.net/auth/2.0
openid.identity: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/srv/ax/1.0', 'http://specs.openid.net/extensions/ui/1.0/mode/popup', 'http://specs.openid.net/extensions/ui/1.0/icon', 'http://specs.openid.net/extensions/pape/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='https://www.google.com/accounts/o8/ud' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
OPENID LIB: Received id_res response from https://www.google.com/accounts/o8/ud using association AOQobUcC1dOX3lultR1MxFJtsa3_vgAgYD2iID3r_ZP8lnsX8Fal4ky1
Authenticating user with openid xauth service
VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
Setting up the store
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ with assocication {HMAC-SHA1}{4da49cb2}{EVoDAw==}
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: iMMsmHYJomc8cy52ahdxTen0WEY=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T06%3A35%3A11ZGdfl08
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T06:35:11ZGdfl08
openid.response_nonce: 2011-04-13T06:34:21ZH46zw4
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da49cb2}{EVoDAw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the store
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da49cb2}{EVoDAw==}
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: YtkrPeBKkGhoLS44qo/n/Tyd2mg=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T07%3A00%3A00ZLUazWm
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T07:00:00ZLUazWm
openid.response_nonce: 2011-04-13T06:59:11Zr9ED0t
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da549bf}{0s+mdQ==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da549bf}{0s+mdQ==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing https://www.google.com/accounts/o8/id OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to https://www.google.com/accounts/o8/ud using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: https://www.google.com/accounts/o8/ud
openid.sig: HTsLl1WW+6yRfmfz4RuPnfxdPrg=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T07%3A00%3A13ZPpOO6Q
janrain_nonce: 2011-04-13T07:00:13ZPpOO6Q
openid.response_nonce: 2011-04-13T06:59:24ZYTlXNAKq4Bq3vg
openid.claimed_id: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
openid.mode: id_res
openid.signed: op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle
openid.assoc_handle: AOQobUeGZNSbA_ExRckuee8snkk933djhLEb-iyIy531Inv0xbS4BHxt
openid.ns: http://specs.openid.net/auth/2.0
openid.identity: https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/srv/ax/1.0', 'http://specs.openid.net/extensions/ui/1.0/mode/popup', 'http://specs.openid.net/extensions/ui/1.0/icon', 'http://specs.openid.net/extensions/pape/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='https://www.google.com/accounts/o8/ud' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on https://www.google.com/accounts/o8/id?id=AItOawnryUlf19v-13IC4sEmG_QEKxjx03pCQw0
OPENID LIB: Received id_res response from https://www.google.com/accounts/o8/ud using association AOQobUeGZNSbA_ExRckuee8snkk933djhLEb-iyIy531Inv0xbS4BHxt
OPENID LIB: Using OpenID check_authentication
OPENID LIB: op_endpoint
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: return_to
OPENID LIB: response_nonce
OPENID LIB: assoc_handle
Authenticating user with openid xauth service
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: uQmE00pJxCSS2OLOuv/T377H5DM=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T07%3A03%3A03ZZ4IMJI
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T07:03:03ZZ4IMJI
openid.response_nonce: 2011-04-13T07:02:13ZmY6rzY
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da54a75}{UKJ6NA==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da54a75}{UKJ6NA==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START service_list
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: 83sHzmMdHUrnaYPcrrkuLKELjhY=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T07%3A27%3A58Z2PyyDf
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T07:27:58Z2PyyDf
openid.response_nonce: 2011-04-13T07:27:08ZQ8JChw
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da5504c}{eSFINw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da5504c}{eSFINw==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: pgDOEirseKVvborjTzFz/dxA8do=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T07%3A28%3A20ZmXeLsB
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T07:28:20ZmXeLsB
openid.response_nonce: 2011-04-13T07:27:30ZjvOIjp
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da55062}{rHSg3g==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da55062}{rHSg3g==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: qa/NztmSI2qt4ybzQITFDJiqMzo=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T07%3A29%3A31Zj7jqwh
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T07:29:31Zj7jqwh
openid.response_nonce: 2011-04-13T07:28:41ZkQB4s0
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da550a9}{DYWXfQ==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da550a9}{DYWXfQ==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: l77R5MVeJdfXAm8Ma7T7ZUby48I=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T07%3A33%3A26ZJGApdI
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T07:33:26ZJGApdI
openid.response_nonce: 2011-04-13T07:32:36Zot95cn
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da55194}{dHa5Iw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da55194}{dHa5Iw==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: aZXDSuv+4tGW0cBFGSS8SjKkeTs=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T07%3A33%3A47Zo1PV6b
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T07:33:47Zo1PV6b
openid.response_nonce: 2011-04-13T07:32:57ZSncN9k
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da551a9}{NuHH6Q==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da551a9}{NuHH6Q==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: NdUvpWoAumF9/4F5sjr9HbtZCRc=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T09%3A59%3A26Zq2LZra
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T09:59:26Zq2LZra
openid.response_nonce: 2011-04-13T09:58:35ZrvucHF
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da573cb}{GU08hQ==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da573cb}{GU08hQ==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: fPEkYz3fu44Tu0fMMJ2XIxGwAaM=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T10%3A00%3A20ZNAUOUT
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T10:00:20ZNAUOUT
openid.response_nonce: 2011-04-13T09:59:30ZbZfgtX
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da57402}{mc0SrQ==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da57402}{mc0SrQ==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: zSLHExB5x/GNbAcxPtyxWGth8HU=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T10%3A00%3A47ZMtF6p0
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T10:00:47ZMtF6p0
openid.response_nonce: 2011-04-13T09:59:57Zbkk5GQ
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da5741d}{tEePHA==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da5741d}{tEePHA==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing https://www.google.com/accounts/o8/id OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to https://www.google.com/accounts/o8/ud using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: https://www.google.com/accounts/o8/ud
openid.sig: 6xVF4bPZFqQn1NYdS7CnRIuNVRA=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T10%3A01%3A10ZShGvoH
janrain_nonce: 2011-04-13T10:01:10ZShGvoH
openid.response_nonce: 2011-04-13T10:00:21ZNPlsj4H467ByKw
openid.claimed_id: https://www.google.com/accounts/o8/id?id=AItOawkfrqRNij4O8Nes9EpaQYn2Mkgy2UAzJyg
openid.mode: id_res
openid.signed: op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle
openid.assoc_handle: AOQobUcEdR3i9EyQvvLj9BhOFPf9coPOaprMHTeERpQM_JsOKpS57ZUs
openid.ns: http://specs.openid.net/auth/2.0
openid.identity: https://www.google.com/accounts/o8/id?id=AItOawkfrqRNij4O8Nes9EpaQYn2Mkgy2UAzJyg
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/srv/ax/1.0', 'http://specs.openid.net/extensions/ui/1.0/mode/popup', 'http://specs.openid.net/extensions/ui/1.0/icon', 'http://specs.openid.net/extensions/pape/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='https://www.google.com/accounts/o8/ud' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on https://www.google.com/accounts/o8/id?id=AItOawkfrqRNij4O8Nes9EpaQYn2Mkgy2UAzJyg
OPENID LIB: Received id_res response from https://www.google.com/accounts/o8/ud using association AOQobUcEdR3i9EyQvvLj9BhOFPf9coPOaprMHTeERpQM_JsOKpS57ZUs
OPENID LIB: Using OpenID check_authentication
OPENID LIB: op_endpoint
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: return_to
OPENID LIB: response_nonce
OPENID LIB: assoc_handle
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: I5PlcliwI02ac4LYMES824njU34=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T10%3A13%3A25ZmLXfh3
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T10:13:25ZmLXfh3
openid.response_nonce: 2011-04-13T10:12:35ZT3M77s
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da57713}{9VXe5Q==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da57713}{9VXe5Q==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: GEe/ukGT+l7afdLimKZuLowXxM0=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T10%3A13%3A37ZBBR6UZ
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T10:13:37ZBBR6UZ
openid.response_nonce: 2011-04-13T10:12:47Z2K3x23
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da5771f}{HnGgVQ==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da5771f}{HnGgVQ==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: aevBVvK8iXmmGBvmkevqeFJqo1k=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T10%3A14%3A12Z9AR7CJ
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T10:14:12Z9AR7CJ
openid.response_nonce: 2011-04-13T10:13:22ZOAoonq
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da57742}{f6+R8w==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da57742}{f6+R8w==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: HgxnmMNdwHN6b5N0v5aWR5Bi5+s=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T10%3A15%3A12ZbA84ZA
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T10:15:12ZbA84ZA
openid.response_nonce: 2011-04-13T10:14:21Z3aLB47
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da5777d}{Njf5OA==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da5777d}{Njf5OA==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: stDbE15hYFQFU6y4L9eDqXzq8xY=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T10%3A32%3A14Z44yaVF
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T10:32:14Z44yaVF
openid.response_nonce: 2011-04-13T10:31:23ZHHMdfk
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da57b7b}{r9moWQ==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da57b7b}{r9moWQ==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: XXty8FEesFhJQr26qmFvGr/7P70=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T10%3A32%3A31Zk2wppd
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T10:32:31Zk2wppd
openid.response_nonce: 2011-04-13T10:31:41ZsB4saI
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da57b8d}{xUUbYw==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da57b8d}{xUUbYw==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: /kb1VWARFPMGD1ZwIqc6ZFgx85s=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T10%3A41%3A55Z7YTRnA
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T10:41:55Z7YTRnA
openid.response_nonce: 2011-04-13T10:41:05Zo73DB0
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da57dc1}{zW+S/A==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da57dc1}{zW+S/A==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: http://openid.yandex.ru/server/
openid.sig: aa/UJqfatiLT6YwdLTy/9uiHAX8=
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T11%3A10%3A56ZRS9aoE
openid.ns: http://specs.openid.net/auth/2.0
janrain_nonce: 2011-04-13T11:10:56ZRS9aoE
openid.response_nonce: 2011-04-13T11:10:06ZDZ5KxX
openid.claimed_id: http://lorien.name/
openid.mode: id_res
openid.signed: assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed
openid.assoc_handle: {HMAC-SHA1}{4da5848e}{0d7FJQ==}
openid.identity: http://openid.yandex.ru/lorien-name/
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da5848e}{0d7FJQ==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.response_nonce: 2011-04-13T18:56:35Zyqey63
openid.mode: id_res
openid.signed: assoc_handle,ax.count.ext0,ax.count.ext1,ax.mode,ax.type.ext0,ax.type.ext1,ax.value.ext0.1,ax.value.ext1.1,claimed_id,identity,mode,ns,ns.ax,ns.sreg,op_endpoint,response_nonce,return_to,signed,sreg.email,sreg.nickname
openid.sreg.email: lorien@lorien.name
openid.op_endpoint: http://openid.yandex.ru/server/
openid.identity: http://openid.yandex.ru/lorien-name/
openid.ax.type.ext0: http://axschema.org/namePerson/friendly
openid.ax.type.ext1: http://axschema.org/contact/email
openid.ax.count.ext0: 1
openid.ax.value.ext1.1: lorien@lorien.name
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T18%3A57%3A26Zf6U7SK
janrain_nonce: 2011-04-13T18:57:26Zf6U7SK
openid.ax.mode: fetch_response
openid.ax.value.ext0.1: lorien
openid.sreg.nickname: lorien
openid.ns.ax: http://openid.net/srv/ax/1.0
openid.claimed_id: http://lorien.name/
openid.sig: eW7Hv8A8EZoGX2pyPlbvHq4ztlQ=
openid.ax.count.ext1: 1
openid.ns.sreg: http://openid.net/extensions/sreg/1.1
openid.ns: http://specs.openid.net/auth/2.0
openid.assoc_handle: {HMAC-SHA1}{4da5f1e3}{oOBhSA==}
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da5f1e3}{oOBhSA==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: ax.count.ext0
OPENID LIB: ax.count.ext1
OPENID LIB: ax.mode
OPENID LIB: ax.type.ext0
OPENID LIB: ax.type.ext1
OPENID LIB: ax.value.ext0.1
OPENID LIB: ax.value.ext1.1
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: ns.ax
OPENID LIB: ns.sreg
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
OPENID LIB: sreg.email
OPENID LIB: sreg.nickname
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.response_nonce: 2011-04-13T18:56:53ZKVWNs9
openid.mode: id_res
openid.signed: assoc_handle,ax.count.ext0,ax.count.ext1,ax.mode,ax.type.ext0,ax.type.ext1,ax.value.ext0.1,ax.value.ext1.1,claimed_id,identity,mode,ns,ns.ax,ns.sreg,op_endpoint,response_nonce,return_to,signed,sreg.email,sreg.nickname
openid.sreg.email: lorien@lorien.name
openid.op_endpoint: http://openid.yandex.ru/server/
openid.identity: http://openid.yandex.ru/lorien-name/
openid.ax.type.ext0: http://axschema.org/namePerson/friendly
openid.ax.type.ext1: http://axschema.org/contact/email
openid.ax.count.ext0: 1
openid.ax.value.ext1.1: lorien@lorien.name
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T18%3A57%3A44ZEN99uq
janrain_nonce: 2011-04-13T18:57:44ZEN99uq
openid.ax.mode: fetch_response
openid.ax.value.ext0.1: lorien
openid.sreg.nickname: lorien
openid.ns.ax: http://openid.net/srv/ax/1.0
openid.claimed_id: http://lorien.name/
openid.sig: BeFf3IXTMKM9DB5EiRXQwsqMgIQ=
openid.ax.count.ext1: 1
openid.ns.sreg: http://openid.net/extensions/sreg/1.1
openid.ns: http://specs.openid.net/auth/2.0
openid.assoc_handle: {HMAC-SHA1}{4da5f1f5}{Tz8fPA==}
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da5f1f5}{Tz8fPA==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: ax.count.ext0
OPENID LIB: ax.count.ext1
OPENID LIB: ax.mode
OPENID LIB: ax.type.ext0
OPENID LIB: ax.type.ext1
OPENID LIB: ax.value.ext0.1
OPENID LIB: ax.value.ext1.1
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: ns.ax
OPENID LIB: ns.sreg
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
OPENID LIB: sreg.email
OPENID LIB: sreg.nickname
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.response_nonce: 2011-04-13T18:57:10Z9UlF1N
openid.mode: id_res
openid.signed: assoc_handle,ax.count.ext0,ax.count.ext1,ax.mode,ax.type.ext0,ax.type.ext1,ax.value.ext0.1,ax.value.ext1.1,claimed_id,identity,mode,ns,ns.ax,ns.sreg,op_endpoint,response_nonce,return_to,signed,sreg.email,sreg.nickname
openid.sreg.email: lorien@lorien.name
openid.op_endpoint: http://openid.yandex.ru/server/
openid.identity: http://openid.yandex.ru/lorien-name/
openid.ax.type.ext0: http://axschema.org/namePerson/friendly
openid.ax.type.ext1: http://axschema.org/contact/email
openid.ax.count.ext0: 1
openid.ax.value.ext1.1: lorien@lorien.name
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T18%3A58%3A01ZOsf75y
janrain_nonce: 2011-04-13T18:58:01ZOsf75y
openid.ax.mode: fetch_response
openid.ax.value.ext0.1: lorien
openid.sreg.nickname: lorien
openid.ns.ax: http://openid.net/srv/ax/1.0
openid.claimed_id: http://lorien.name/
openid.sig: Nop6blFPg5hlbDmb1agyjGo0GhY=
openid.ax.count.ext1: 1
openid.ns.sreg: http://openid.net/extensions/sreg/1.1
openid.ns: http://specs.openid.net/auth/2.0
openid.assoc_handle: {HMAC-SHA1}{4da5f206}{MW9D0A==}
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da5f206}{MW9D0A==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: ax.count.ext0
OPENID LIB: ax.count.ext1
OPENID LIB: ax.mode
OPENID LIB: ax.type.ext0
OPENID LIB: ax.type.ext1
OPENID LIB: ax.value.ext0.1
OPENID LIB: ax.value.ext1.1
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: ns.ax
OPENID LIB: ns.sreg
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
OPENID LIB: sreg.email
OPENID LIB: sreg.nickname
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.response_nonce: 2011-04-13T18:57:10Z9UlF1N
openid.mode: id_res
openid.signed: assoc_handle,ax.count.ext0,ax.count.ext1,ax.mode,ax.type.ext0,ax.type.ext1,ax.value.ext0.1,ax.value.ext1.1,claimed_id,identity,mode,ns,ns.ax,ns.sreg,op_endpoint,response_nonce,return_to,signed,sreg.email,sreg.nickname
openid.sreg.email: lorien@lorien.name
openid.op_endpoint: http://openid.yandex.ru/server/
openid.identity: http://openid.yandex.ru/lorien-name/
openid.ax.type.ext0: http://axschema.org/namePerson/friendly
openid.ax.type.ext1: http://axschema.org/contact/email
openid.ax.count.ext0: 1
openid.ax.value.ext1.1: lorien@lorien.name
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T18%3A58%3A01ZOsf75y
janrain_nonce: 2011-04-13T18:58:01ZOsf75y
openid.ax.mode: fetch_response
openid.ax.value.ext0.1: lorien
openid.sreg.nickname: lorien
openid.ns.ax: http://openid.net/srv/ax/1.0
openid.claimed_id: http://lorien.name/
openid.sig: Nop6blFPg5hlbDmb1agyjGo0GhY=
openid.ax.count.ext1: 1
openid.ns.sreg: http://openid.net/extensions/sreg/1.1
openid.ns: http://specs.openid.net/auth/2.0
openid.assoc_handle: {HMAC-SHA1}{4da5f206}{MW9D0A==}
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: No pre-discovered information supplied.
OPENID LIB: Performing discovery on http://lorien.name/
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da5f206}{MW9D0A==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: ax.count.ext0
OPENID LIB: ax.count.ext1
OPENID LIB: ax.mode
OPENID LIB: ax.type.ext0
OPENID LIB: ax.type.ext1
OPENID LIB: ax.value.ext0.1
OPENID LIB: ax.value.ext1.1
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: ns.ax
OPENID LIB: ns.sreg
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
OPENID LIB: sreg.email
OPENID LIB: sreg.nickname
OPENID LIB: Server responds that checkAuth call is not valid
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.response_nonce: 2011-04-13T18:58:52Z4C0tgd
openid.mode: id_res
openid.signed: assoc_handle,ax.count.ext0,ax.count.ext1,ax.mode,ax.type.ext0,ax.type.ext1,ax.value.ext0.1,ax.value.ext1.1,claimed_id,identity,mode,ns,ns.ax,ns.sreg,op_endpoint,response_nonce,return_to,signed,sreg.email,sreg.nickname
openid.sreg.email: lorien@lorien.name
openid.op_endpoint: http://openid.yandex.ru/server/
openid.identity: http://openid.yandex.ru/lorien-name/
openid.ax.type.ext0: http://axschema.org/namePerson/friendly
openid.ax.type.ext1: http://axschema.org/contact/email
openid.ax.count.ext0: 1
openid.ax.value.ext1.1: lorien@lorien.name
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T18%3A59%3A43ZUF1BEQ
janrain_nonce: 2011-04-13T18:59:43ZUF1BEQ
openid.ax.mode: fetch_response
openid.ax.value.ext0.1: lorien
openid.sreg.nickname: lorien
openid.ns.ax: http://openid.net/srv/ax/1.0
openid.claimed_id: http://lorien.name/
openid.sig: FfLHmy4HTSriyYHa5XKqXvVX9Tc=
openid.ax.count.ext1: 1
openid.ns.sreg: http://openid.net/extensions/sreg/1.1
openid.ns: http://specs.openid.net/auth/2.0
openid.assoc_handle: {HMAC-SHA1}{4da5f26c}{+a9bjQ==}
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da5f26c}{+a9bjQ==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: ax.count.ext0
OPENID LIB: ax.count.ext1
OPENID LIB: ax.mode
OPENID LIB: ax.type.ext0
OPENID LIB: ax.type.ext1
OPENID LIB: ax.value.ext0.1
OPENID LIB: ax.value.ext1.1
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: ns.ax
OPENID LIB: ns.sreg
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
OPENID LIB: sreg.email
OPENID LIB: sreg.nickname
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.response_nonce: 2011-04-13T18:59:35ZOYghwm
openid.mode: id_res
openid.signed: assoc_handle,ax.count.ext0,ax.count.ext1,ax.mode,ax.type.ext0,ax.type.ext1,ax.value.ext0.1,ax.value.ext1.1,claimed_id,identity,mode,ns,ns.ax,ns.sreg,op_endpoint,response_nonce,return_to,signed,sreg.email,sreg.nickname
openid.sreg.email: lorien@lorien.name
openid.op_endpoint: http://openid.yandex.ru/server/
openid.identity: http://openid.yandex.ru/lorien-name/
openid.ax.type.ext0: http://axschema.org/namePerson/friendly
openid.ax.type.ext1: http://axschema.org/contact/email
openid.ax.count.ext0: 1
openid.ax.value.ext1.1: lorien@lorien.name
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T19%3A00%3A26ZBKkZVl
janrain_nonce: 2011-04-13T19:00:26ZBKkZVl
openid.ax.mode: fetch_response
openid.ax.value.ext0.1: lorien
openid.sreg.nickname: lorien
openid.ns.ax: http://openid.net/srv/ax/1.0
openid.claimed_id: http://lorien.name/
openid.sig: OGP+OISHqg/5JTDdpEuGvgcnGdQ=
openid.ax.count.ext1: 1
openid.ns.sreg: http://openid.net/extensions/sreg/1.1
openid.ns: http://specs.openid.net/auth/2.0
openid.assoc_handle: {HMAC-SHA1}{4da5f297}{d9dXXg==}
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da5f297}{d9dXXg==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: ax.count.ext0
OPENID LIB: ax.count.ext1
OPENID LIB: ax.mode
OPENID LIB: ax.type.ext0
OPENID LIB: ax.type.ext1
OPENID LIB: ax.value.ext0.1
OPENID LIB: ax.value.ext1.1
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: ns.ax
OPENID LIB: ns.sreg
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
OPENID LIB: sreg.email
OPENID LIB: sreg.nickname
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.response_nonce: 2011-04-13T19:02:13ZwP5ndg
openid.mode: id_res
openid.signed: assoc_handle,ax.count.ext0,ax.count.ext1,ax.mode,ax.type.ext0,ax.type.ext1,ax.value.ext0.1,ax.value.ext1.1,claimed_id,identity,mode,ns,ns.ax,ns.sreg,op_endpoint,response_nonce,return_to,signed,sreg.email,sreg.nickname
openid.sreg.email: lorien@lorien.name
openid.op_endpoint: http://openid.yandex.ru/server/
openid.identity: http://openid.yandex.ru/lorien-name/
openid.ax.type.ext0: http://axschema.org/namePerson/friendly
openid.ax.type.ext1: http://axschema.org/contact/email
openid.ax.count.ext0: 1
openid.ax.value.ext1.1: lorien@lorien.name
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T19%3A03%3A04ZeZWoDo
janrain_nonce: 2011-04-13T19:03:04ZeZWoDo
openid.ax.mode: fetch_response
openid.ax.value.ext0.1: lorien
openid.sreg.nickname: lorien
openid.ns.ax: http://openid.net/srv/ax/1.0
openid.claimed_id: http://lorien.name/
openid.sig: s7zG3+0IeFgwnJJti4X4WK8VIqw=
openid.ax.count.ext1: 1
openid.ns.sreg: http://openid.net/extensions/sreg/1.1
openid.ns: http://specs.openid.net/auth/2.0
openid.assoc_handle: {HMAC-SHA1}{4da5f335}{C64QGg==}
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da5f335}{C64QGg==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: ax.count.ext0
OPENID LIB: ax.count.ext1
OPENID LIB: ax.mode
OPENID LIB: ax.type.ext0
OPENID LIB: ax.type.ext1
OPENID LIB: ax.value.ext0.1
OPENID LIB: ax.value.ext1.1
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: ns.ax
OPENID LIB: ns.sreg
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
OPENID LIB: sreg.email
OPENID LIB: sreg.nickname
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.response_nonce: 2011-04-13T19:03:40ZzjaK6O
openid.mode: id_res
openid.signed: assoc_handle,ax.count.ext0,ax.count.ext1,ax.mode,ax.type.ext0,ax.type.ext1,ax.value.ext0.1,ax.value.ext1.1,claimed_id,identity,mode,ns,ns.ax,ns.sreg,op_endpoint,response_nonce,return_to,signed,sreg.email,sreg.nickname
openid.sreg.email: lorien@lorien.name
openid.op_endpoint: http://openid.yandex.ru/server/
openid.identity: http://openid.yandex.ru/lorien-name/
openid.ax.type.ext0: http://axschema.org/namePerson/friendly
openid.ax.type.ext1: http://axschema.org/contact/email
openid.ax.count.ext0: 1
openid.ax.value.ext1.1: lorien@lorien.name
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T19%3A04%3A31ZxRzMdC
janrain_nonce: 2011-04-13T19:04:31ZxRzMdC
openid.ax.mode: fetch_response
openid.ax.value.ext0.1: lorien
openid.sreg.nickname: lorien
openid.ns.ax: http://openid.net/srv/ax/1.0
openid.claimed_id: http://lorien.name/
openid.sig: UdSy9Gn/x8oIeYhlpdzPZeyuY4c=
openid.ax.count.ext1: 1
openid.ns.sreg: http://openid.net/extensions/sreg/1.1
openid.ns: http://specs.openid.net/auth/2.0
openid.assoc_handle: {HMAC-SHA1}{4da5f38c}{tbKG+g==}
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da5f38c}{tbKG+g==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: ax.count.ext0
OPENID LIB: ax.count.ext1
OPENID LIB: ax.mode
OPENID LIB: ax.type.ext0
OPENID LIB: ax.type.ext1
OPENID LIB: ax.value.ext0.1
OPENID LIB: ax.value.ext1.1
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: ns.ax
OPENID LIB: ns.sreg
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
OPENID LIB: sreg.email
OPENID LIB: sreg.nickname
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.response_nonce: 2011-04-13T19:04:16ZVc529O
openid.mode: id_res
openid.signed: assoc_handle,ax.count.ext0,ax.count.ext1,ax.mode,ax.type.ext0,ax.type.ext1,ax.value.ext0.1,ax.value.ext1.1,claimed_id,identity,mode,ns,ns.ax,ns.sreg,op_endpoint,response_nonce,return_to,signed,sreg.email,sreg.nickname
openid.sreg.email: lorien@lorien.name
openid.op_endpoint: http://openid.yandex.ru/server/
openid.identity: http://openid.yandex.ru/lorien-name/
openid.ax.type.ext0: http://axschema.org/namePerson/friendly
openid.ax.type.ext1: http://axschema.org/contact/email
openid.ax.count.ext0: 1
openid.ax.value.ext1.1: lorien@lorien.name
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T19%3A05%3A07ZOXhM5i
janrain_nonce: 2011-04-13T19:05:07ZOXhM5i
openid.ax.mode: fetch_response
openid.ax.value.ext0.1: lorien
openid.sreg.nickname: lorien
openid.ns.ax: http://openid.net/srv/ax/1.0
openid.claimed_id: http://lorien.name/
openid.sig: b5AQU1VirHntZNkt3aQxfzAj2h0=
openid.ax.count.ext1: 1
openid.ns.sreg: http://openid.net/extensions/sreg/1.1
openid.ns: http://specs.openid.net/auth/2.0
openid.assoc_handle: {HMAC-SHA1}{4da5f3b0}{fejXpQ==}
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da5f3b0}{fejXpQ==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: ax.count.ext0
OPENID LIB: ax.count.ext1
OPENID LIB: ax.mode
OPENID LIB: ax.type.ext0
OPENID LIB: ax.type.ext1
OPENID LIB: ax.value.ext0.1
OPENID LIB: ax.value.ext1.1
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: ns.ax
OPENID LIB: ns.sreg
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
OPENID LIB: sreg.email
OPENID LIB: sreg.nickname
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing lorien.name OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.response_nonce: 2011-04-13T19:07:27ZkhhC0U
openid.mode: id_res
openid.signed: assoc_handle,ax.count.ext0,ax.count.ext1,ax.count.ext2,ax.count.ext3,ax.mode,ax.type.ext0,ax.type.ext1,ax.type.ext2,ax.type.ext3,ax.value.ext0.1,ax.value.ext1.1,ax.value.ext3.1,claimed_id,identity,mode,ns,ns.ax,ns.sreg,op_endpoint,response_nonce,return_to,signed,sreg.email,sreg.fullname,sreg.nickname
openid.sreg.email: lorien@lorien.name
openid.op_endpoint: http://openid.yandex.ru/server/
openid.identity: http://openid.yandex.ru/lorien-name/
openid.ax.type.ext0: http://axschema.org/namePerson
openid.ax.type.ext1: http://axschema.org/namePerson/friendly
openid.ax.type.ext2: http://axschema.org/contact/country/home
openid.ax.type.ext3: http://axschema.org/contact/email
openid.ax.count.ext0: 1
openid.ax.value.ext1.1: lorien
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-13T19%3A08%3A18ZzqxohE
janrain_nonce: 2011-04-13T19:08:18ZzqxohE
openid.ax.mode: fetch_response
openid.claimed_id: http://lorien.name/
openid.ax.value.ext3.1: lorien@lorien.name
openid.sreg.nickname: lorien
openid.ns.ax: http://openid.net/srv/ax/1.0
openid.ax.value.ext0.1: Grigoriy Petukhov
openid.sig: C/aP7Lqh27NTP93Yprc0hC7IFYc=
openid.ax.count.ext1: 1
openid.ax.count.ext2: 0
openid.ax.count.ext3: 1
openid.ns.sreg: http://openid.net/extensions/sreg/1.1
openid.sreg.fullname: Grigoriy Petukhov
openid.ns: http://specs.openid.net/auth/2.0
openid.assoc_handle: {HMAC-SHA1}{4da5f46f}{3pjSpQ==}
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da5f46f}{3pjSpQ==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: ax.count.ext0
OPENID LIB: ax.count.ext1
OPENID LIB: ax.count.ext2
OPENID LIB: ax.count.ext3
OPENID LIB: ax.mode
OPENID LIB: ax.type.ext0
OPENID LIB: ax.type.ext1
OPENID LIB: ax.type.ext2
OPENID LIB: ax.type.ext3
OPENID LIB: ax.value.ext0.1
OPENID LIB: ax.value.ext1.1
OPENID LIB: ax.value.ext3.1
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: ns.ax
OPENID LIB: ns.sreg
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
OPENID LIB: sreg.email
OPENID LIB: sreg.fullname
OPENID LIB: sreg.nickname
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing https://www.google.com/accounts/o8/id OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to https://www.google.com/accounts/o8/ud using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: https://www.google.com/accounts/o8/ud
openid.sig: jTGr72226hb/OV6uvErws7zpd5c=
openid.response_nonce: 2011-04-16T13:18:18ZI-fD5RJd9I5x9g
openid.ext1.value.ext3: lizendir@gmail.com
openid.ext1.type.ext3: http://axschema.org/contact/email
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-16T12%3A18%3A26ZdoG0eC
openid.claimed_id: https://www.google.com/accounts/o8/id?id=AItOawkfrqRNij4O8Nes9EpaQYn2Mkgy2UAzJyg
janrain_nonce: 2011-04-16T12:18:26ZdoG0eC
openid.ns.ext1: http://openid.net/srv/ax/1.0
openid.signed: op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle,ns.ext1,ext1.mode,ext1.type.ext3,ext1.value.ext3
openid.assoc_handle: AOQobUd110-yKnF99Pa-e_bxIJJrt3Vc5_Ho16bKCfeKnLcDUNayVaJl
openid.ns: http://specs.openid.net/auth/2.0
openid.mode: id_res
openid.identity: https://www.google.com/accounts/o8/id?id=AItOawkfrqRNij4O8Nes9EpaQYn2Mkgy2UAzJyg
openid.ext1.mode: fetch_response
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/srv/ax/1.0', 'http://specs.openid.net/extensions/ui/1.0/mode/popup', 'http://specs.openid.net/extensions/ui/1.0/icon', 'http://specs.openid.net/extensions/pape/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='https://www.google.com/accounts/o8/ud' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on https://www.google.com/accounts/o8/id?id=AItOawkfrqRNij4O8Nes9EpaQYn2Mkgy2UAzJyg
OPENID LIB: Received id_res response from https://www.google.com/accounts/o8/ud using association AOQobUd110-yKnF99Pa-e_bxIJJrt3Vc5_Ho16bKCfeKnLcDUNayVaJl
OPENID LIB: Using OpenID check_authentication
OPENID LIB: op_endpoint
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: return_to
OPENID LIB: response_nonce
OPENID LIB: assoc_handle
OPENID LIB: ns.ext1
OPENID LIB: ext1.mode
OPENID LIB: ext1.type.ext3
OPENID LIB: ext1.value.ext3
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=xauth, command=finish]
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing http://openid.yandex.ru OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.response_nonce: 2011-04-16T14:46:35ZlAXchO
openid.mode: id_res
openid.signed: assoc_handle,ax.count.ext0,ax.count.ext1,ax.count.ext2,ax.count.ext3,ax.mode,ax.type.ext0,ax.type.ext1,ax.type.ext2,ax.type.ext3,ax.value.ext0.1,ax.value.ext1.1,ax.value.ext3.1,claimed_id,identity,mode,ns,ns.ax,ns.sreg,op_endpoint,response_nonce,return_to,signed,sreg.email,sreg.fullname,sreg.nickname
openid.sreg.email: lorien@lorien.name
openid.op_endpoint: http://openid.yandex.ru/server/
openid.identity: http://lorien-name.ya.ru/
openid.ax.type.ext0: http://axschema.org/namePerson
openid.ax.type.ext1: http://axschema.org/namePerson/friendly
openid.ax.type.ext2: http://axschema.org/contact/country/home
openid.ax.type.ext3: http://axschema.org/contact/email
openid.ax.count.ext0: 1
openid.ax.value.ext1.1: lorien
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-16T14%3A45%3A10ZhYSTkq
janrain_nonce: 2011-04-16T14:45:10ZhYSTkq
openid.ax.mode: fetch_response
openid.claimed_id: http://lorien-name.ya.ru/
openid.ax.value.ext3.1: lorien@lorien.name
openid.sreg.nickname: lorien
openid.ns.ax: http://openid.net/srv/ax/1.0
openid.ax.value.ext0.1: Grigoriy Petukhov
openid.sig: OrygH/jqABxBrAw7sfMC5uUVm50=
openid.ax.count.ext1: 1
openid.ax.count.ext2: 0
openid.ax.count.ext3: 1
openid.ns.sreg: http://openid.net/extensions/sreg/1.1
openid.sreg.fullname: Grigoriy Petukhov
openid.ns: http://specs.openid.net/auth/2.0
openid.assoc_handle: {HMAC-SHA1}{4da9abcb}{L8WjAw==}
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/extensions/sreg/1.1', 'http://openid.net/srv/ax/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='http://openid.yandex.ru/server/' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on http://lorien-name.ya.ru/
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da9abcb}{L8WjAw==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: ax.count.ext0
OPENID LIB: ax.count.ext1
OPENID LIB: ax.count.ext2
OPENID LIB: ax.count.ext3
OPENID LIB: ax.mode
OPENID LIB: ax.type.ext0
OPENID LIB: ax.type.ext1
OPENID LIB: ax.type.ext2
OPENID LIB: ax.type.ext3
OPENID LIB: ax.value.ext0.1
OPENID LIB: ax.value.ext1.1
OPENID LIB: ax.value.ext3.1
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: ns.ax
OPENID LIB: ns.sreg
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
OPENID LIB: sreg.email
OPENID LIB: sreg.fullname
OPENID LIB: sreg.nickname
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing https://www.google.com/accounts/o8/id OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to https://www.google.com/accounts/o8/ud using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: https://www.google.com/accounts/o8/ud
openid.sig: 6V2Rcoq/EaW8wU9ZfUEsKfo18Ok=
openid.response_nonce: 2011-04-16T14:47:34ZKJoSuHj_TuOV7Q
openid.ext1.value.ext3: lizendir@gmail.com
openid.ext1.type.ext3: http://axschema.org/contact/email
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-16T14%3A46%3A07ZCuwRRR
openid.claimed_id: https://www.google.com/accounts/o8/id?id=AItOawkfrqRNij4O8Nes9EpaQYn2Mkgy2UAzJyg
janrain_nonce: 2011-04-16T14:46:07ZCuwRRR
openid.ns.ext1: http://openid.net/srv/ax/1.0
openid.signed: op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle,ns.ext1,ext1.mode,ext1.type.ext3,ext1.value.ext3
openid.assoc_handle: AOQobUdqgP94oACYuTJ_eSiMjwZhIOmVgutL7OZU6l1C97jddhgV-r5_
openid.ns: http://specs.openid.net/auth/2.0
openid.mode: id_res
openid.identity: https://www.google.com/accounts/o8/id?id=AItOawkfrqRNij4O8Nes9EpaQYn2Mkgy2UAzJyg
openid.ext1.mode: fetch_response
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/srv/ax/1.0', 'http://specs.openid.net/extensions/ui/1.0/mode/popup', 'http://specs.openid.net/extensions/ui/1.0/icon', 'http://specs.openid.net/extensions/pape/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='https://www.google.com/accounts/o8/ud' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on https://www.google.com/accounts/o8/id?id=AItOawkfrqRNij4O8Nes9EpaQYn2Mkgy2UAzJyg
OPENID LIB: Received id_res response from https://www.google.com/accounts/o8/ud using association AOQobUdqgP94oACYuTJ_eSiMjwZhIOmVgutL7OZU6l1C97jddhgV-r5_
OPENID LIB: Using OpenID check_authentication
OPENID LIB: op_endpoint
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: return_to
OPENID LIB: response_nonce
OPENID LIB: assoc_handle
OPENID LIB: ns.ext1
OPENID LIB: ext1.mode
OPENID LIB: ext1.type.ext3
OPENID LIB: ext1.value.ext3
Authenticating user with openid xauth service
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing https://www.google.com/accounts/o8/id OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to https://www.google.com/accounts/o8/ud using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.op_endpoint: https://www.google.com/accounts/o8/ud
openid.sig: nfbtmDsbz62QA3WdVYbiduUreeQ=
openid.response_nonce: 2011-04-16T14:47:56ZePMeKcKiKDx49Q
openid.ext1.value.ext3: lizendir@gmail.com
openid.ext1.type.ext3: http://axschema.org/contact/email
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-16T14%3A46%3A31ZQ5Xkkq
openid.claimed_id: https://www.google.com/accounts/o8/id?id=AItOawkfrqRNij4O8Nes9EpaQYn2Mkgy2UAzJyg
janrain_nonce: 2011-04-16T14:46:31ZQ5Xkkq
openid.ns.ext1: http://openid.net/srv/ax/1.0
openid.signed: op_endpoint,claimed_id,identity,return_to,response_nonce,assoc_handle,ns.ext1,ext1.mode,ext1.type.ext3,ext1.value.ext3
openid.assoc_handle: AOQobUfdRpnVprWW2bLOPIB_GCZIHEixHSSp6AZhc5B71aey664GA5JH
openid.ns: http://specs.openid.net/auth/2.0
openid.mode: id_res
openid.identity: https://www.google.com/accounts/o8/id?id=AItOawkfrqRNij4O8Nes9EpaQYn2Mkgy2UAzJyg
openid.ext1.mode: fetch_response
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/srv/ax/1.0', 'http://specs.openid.net/extensions/ui/1.0/mode/popup', 'http://specs.openid.net/extensions/ui/1.0/icon', 'http://specs.openid.net/extensions/pape/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='https://www.google.com/accounts/o8/ud' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on https://www.google.com/accounts/o8/id?id=AItOawkfrqRNij4O8Nes9EpaQYn2Mkgy2UAzJyg
OPENID LIB: Received id_res response from https://www.google.com/accounts/o8/ud using association AOQobUfdRpnVprWW2bLOPIB_GCZIHEixHSSp6AZhc5B71aey664GA5JH
OPENID LIB: Using OpenID check_authentication
OPENID LIB: op_endpoint
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: return_to
OPENID LIB: response_nonce
OPENID LIB: assoc_handle
OPENID LIB: ns.ext1
OPENID LIB: ext1.mode
OPENID LIB: ext1.type.ext3
OPENID LIB: ext1.value.ext3
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing http://openid.yandex.ru OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.response_nonce: 2011-04-16T14:49:26ZnvYiZ3
openid.mode: id_res
openid.signed: assoc_handle,ax.count.ext0,ax.count.ext1,ax.count.ext2,ax.count.ext3,ax.mode,ax.type.ext0,ax.type.ext1,ax.type.ext2,ax.type.ext3,ax.value.ext0.1,ax.value.ext1.1,ax.value.ext3.1,claimed_id,identity,mode,ns,ns.ax,ns.sreg,op_endpoint,response_nonce,return_to,signed,sreg.email,sreg.fullname,sreg.nickname
openid.sreg.email: lorien@lorien.name
openid.op_endpoint: http://openid.yandex.ru/server/
openid.identity: http://lorien-name.ya.ru/
openid.ax.type.ext0: http://axschema.org/namePerson
openid.ax.type.ext1: http://axschema.org/namePerson/friendly
openid.ax.type.ext2: http://axschema.org/contact/country/home
openid.ax.type.ext3: http://axschema.org/contact/email
openid.ax.count.ext0: 1
openid.ax.value.ext1.1: lorien
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-16T14%3A48%3A01Zh7t30W
janrain_nonce: 2011-04-16T14:48:01Zh7t30W
openid.ax.mode: fetch_response
openid.claimed_id: http://lorien-name.ya.ru/
openid.ax.value.ext3.1: lorien@lorien.name
openid.sreg.nickname: lorien
openid.ns.ax: http://openid.net/srv/ax/1.0
openid.ax.value.ext0.1: Grigoriy Petukhov
openid.sig: CJ+EqI7vJeAqFlsrBQAfrl4c8fM=
openid.ax.count.ext1: 1
openid.ax.count.ext2: 0
openid.ax.count.ext3: 1
openid.ns.sreg: http://openid.net/extensions/sreg/1.1
openid.sreg.fullname: Grigoriy Petukhov
openid.ns: http://specs.openid.net/auth/2.0
openid.assoc_handle: {HMAC-SHA1}{4da9ac76}{BP8Uqw==}
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/extensions/sreg/1.1', 'http://openid.net/srv/ax/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='http://openid.yandex.ru/server/' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on http://lorien-name.ya.ru/
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da9ac76}{BP8Uqw==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: ax.count.ext0
OPENID LIB: ax.count.ext1
OPENID LIB: ax.count.ext2
OPENID LIB: ax.count.ext3
OPENID LIB: ax.mode
OPENID LIB: ax.type.ext0
OPENID LIB: ax.type.ext1
OPENID LIB: ax.type.ext2
OPENID LIB: ax.type.ext3
OPENID LIB: ax.value.ext0.1
OPENID LIB: ax.value.ext1.1
OPENID LIB: ax.value.ext3.1
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: ns.ax
OPENID LIB: ns.sreg
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
OPENID LIB: sreg.email
OPENID LIB: sreg.fullname
OPENID LIB: sreg.nickname
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
Authenticating user with oauth xauth service
Could not import service authentication backend
Traceback (most recent call last):
  File "/home/lorien/web/django-xauth/xauth/backends.py", line 16, in authenticate
    module = __import__('xauth.service.%s.backend' % service, globals(), locals(), ['foo'])
ImportError: No module named backend
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
Authenticating user with oauth xauth service
Could not import service authentication backend
Traceback (most recent call last):
  File "/home/lorien/web/django-xauth/xauth/backends.py", line 16, in authenticate
    module = __import__('xauth.service.%s.backend' % service, globals(), locals(), ['foo'])
ImportError: No module named backend
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
Authenticating user with oauth xauth service
Could not import service authentication backend
Traceback (most recent call last):
  File "/home/lorien/web/django-xauth/xauth/backends.py", line 16, in authenticate
    module = __import__('xauth.service.%s.backend' % service, globals(), locals(), ['foo'])
ImportError: No module named backend
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
Authenticating user with oauth xauth service
Could not import service authentication backend
Traceback (most recent call last):
  File "/home/lorien/web/django-xauth/xauth/backends.py", line 16, in authenticate
    module = __import__('xauth.service.%s.backend' % service, globals(), locals(), ['foo'])
ImportError: No module named backend
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
Authenticating user with oauth xauth service
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
Authenticating user with oauth xauth service
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing http://openid.yandex.ru OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.response_nonce: 2011-04-16T14:53:44Zye83Rq
openid.mode: id_res
openid.signed: assoc_handle,ax.count.ext0,ax.count.ext1,ax.count.ext2,ax.count.ext3,ax.mode,ax.type.ext0,ax.type.ext1,ax.type.ext2,ax.type.ext3,ax.value.ext0.1,ax.value.ext1.1,ax.value.ext3.1,claimed_id,identity,mode,ns,ns.ax,ns.sreg,op_endpoint,response_nonce,return_to,signed,sreg.email,sreg.fullname,sreg.nickname
openid.sreg.email: lorien@lorien.name
openid.op_endpoint: http://openid.yandex.ru/server/
openid.identity: http://lorien-name.ya.ru/
openid.ax.type.ext0: http://axschema.org/namePerson
openid.ax.type.ext1: http://axschema.org/namePerson/friendly
openid.ax.type.ext2: http://axschema.org/contact/country/home
openid.ax.type.ext3: http://axschema.org/contact/email
openid.ax.count.ext0: 1
openid.ax.value.ext1.1: lorien
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-16T14%3A52%3A19ZFBSBiR
janrain_nonce: 2011-04-16T14:52:19ZFBSBiR
openid.ax.mode: fetch_response
openid.claimed_id: http://lorien-name.ya.ru/
openid.ax.value.ext3.1: lorien@lorien.name
openid.sreg.nickname: lorien
openid.ns.ax: http://openid.net/srv/ax/1.0
openid.ax.value.ext0.1: Grigoriy Petukhov
openid.sig: NQFjHvaeoniLy9qPSNJSJFzLhTU=
openid.ax.count.ext1: 1
openid.ax.count.ext2: 0
openid.ax.count.ext3: 1
openid.ns.sreg: http://openid.net/extensions/sreg/1.1
openid.sreg.fullname: Grigoriy Petukhov
openid.ns: http://specs.openid.net/auth/2.0
openid.assoc_handle: {HMAC-SHA1}{4da9ad78}{8T5NLg==}
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/extensions/sreg/1.1', 'http://openid.net/srv/ax/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='http://openid.yandex.ru/server/' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on http://lorien-name.ya.ru/
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da9ad78}{8T5NLg==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: ax.count.ext0
OPENID LIB: ax.count.ext1
OPENID LIB: ax.count.ext2
OPENID LIB: ax.count.ext3
OPENID LIB: ax.mode
OPENID LIB: ax.type.ext0
OPENID LIB: ax.type.ext1
OPENID LIB: ax.type.ext2
OPENID LIB: ax.type.ext3
OPENID LIB: ax.value.ext0.1
OPENID LIB: ax.value.ext1.1
OPENID LIB: ax.value.ext3.1
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: ns.ax
OPENID LIB: ns.sreg
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
OPENID LIB: sreg.email
OPENID LIB: sreg.fullname
OPENID LIB: sreg.nickname
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
Authenticating user with oauth xauth service
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing http://openid.yandex.ru OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.response_nonce: 2011-04-16T15:03:02ZeDUDsE
openid.mode: id_res
openid.signed: assoc_handle,ax.count.ext0,ax.count.ext1,ax.count.ext2,ax.count.ext3,ax.mode,ax.type.ext0,ax.type.ext1,ax.type.ext2,ax.type.ext3,ax.value.ext0.1,ax.value.ext1.1,ax.value.ext3.1,claimed_id,identity,mode,ns,ns.ax,ns.sreg,op_endpoint,response_nonce,return_to,signed,sreg.email,sreg.fullname,sreg.nickname
openid.sreg.email: lorien@lorien.name
openid.op_endpoint: http://openid.yandex.ru/server/
openid.identity: http://lorien-name.ya.ru/
openid.ax.type.ext0: http://axschema.org/namePerson
openid.ax.type.ext1: http://axschema.org/namePerson/friendly
openid.ax.type.ext2: http://axschema.org/contact/country/home
openid.ax.type.ext3: http://axschema.org/contact/email
openid.ax.count.ext0: 1
openid.ax.value.ext1.1: lorien
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-16T15%3A01%3A37ZSqAttT
janrain_nonce: 2011-04-16T15:01:37ZSqAttT
openid.ax.mode: fetch_response
openid.claimed_id: http://lorien-name.ya.ru/
openid.ax.value.ext3.1: lorien@lorien.name
openid.sreg.nickname: lorien
openid.ns.ax: http://openid.net/srv/ax/1.0
openid.ax.value.ext0.1: Grigoriy Petukhov
openid.sig: 1qFNmpfzufgNhO9bs9JWS2//+Os=
openid.ax.count.ext1: 1
openid.ax.count.ext2: 0
openid.ax.count.ext3: 1
openid.ns.sreg: http://openid.net/extensions/sreg/1.1
openid.sreg.fullname: Grigoriy Petukhov
openid.ns: http://specs.openid.net/auth/2.0
openid.assoc_handle: {HMAC-SHA1}{4da9afa6}{b/R4Rg==}
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/extensions/sreg/1.1', 'http://openid.net/srv/ax/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='http://openid.yandex.ru/server/' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on http://lorien-name.ya.ru/
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da9afa6}{b/R4Rg==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: ax.count.ext0
OPENID LIB: ax.count.ext1
OPENID LIB: ax.count.ext2
OPENID LIB: ax.count.ext3
OPENID LIB: ax.mode
OPENID LIB: ax.type.ext0
OPENID LIB: ax.type.ext1
OPENID LIB: ax.type.ext2
OPENID LIB: ax.type.ext3
OPENID LIB: ax.value.ext0.1
OPENID LIB: ax.value.ext1.1
OPENID LIB: ax.value.ext3.1
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: ns.ax
OPENID LIB: ns.sreg
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
OPENID LIB: sreg.email
OPENID LIB: sreg.fullname
OPENID LIB: sreg.nickname
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing  OpenID URL
Setting up the consumer
DiscoveryFailure
Traceback (most recent call last):
  File "/home/lorien/web/django-xauth/xauth/service/openid/views.py", line 55, in prepare
    auth_request = con.begin(openid_url)
  File "/home/lorien/web/django-xauth/demo/.env/lib/python2.6/site-packages/openid/consumer/consumer.py", line 347, in begin
    'Error fetching XRDS document: %s' % (why[0],), None)
DiscoveryFailure: Error fetching XRDS document: (6, "Couldn't resolve host 'http:'")
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing  OpenID URL
Setting up the consumer
DiscoveryFailure
Traceback (most recent call last):
  File "/home/lorien/web/django-xauth/xauth/service/openid/views.py", line 55, in prepare
    auth_request = con.begin(openid_url)
  File "/home/lorien/web/django-xauth/demo/.env/lib/python2.6/site-packages/openid/consumer/consumer.py", line 347, in begin
    'Error fetching XRDS document: %s' % (why[0],), None)
DiscoveryFailure: Error fetching XRDS document: (6, "Couldn't resolve host 'http:'")
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
VIEW START xauth_login
VIEW START prepare [service=openid]
VIEW START exec [service=openid, command=prepare]
VIEW_START prepare
Processing openid.yandex.ru OpenID URL
Setting up the consumer
OPENID LIB: Generated checkid_setup request to http://openid.yandex.ru/server/ using stateless mode.
VIEW START exec [service=openid, command=finish]
VIEW START finish
Arguments: openid.response_nonce: 2011-04-16T15:05:40ZR6m6v2
openid.mode: id_res
openid.signed: assoc_handle,ax.count.ext0,ax.count.ext1,ax.count.ext2,ax.count.ext3,ax.mode,ax.type.ext0,ax.type.ext1,ax.type.ext2,ax.type.ext3,ax.value.ext0.1,ax.value.ext1.1,ax.value.ext3.1,claimed_id,identity,mode,ns,ns.ax,ns.sreg,op_endpoint,response_nonce,return_to,signed,sreg.email,sreg.fullname,sreg.nickname
openid.sreg.email: lorien@lorien.name
openid.op_endpoint: http://openid.yandex.ru/server/
openid.identity: http://lorien-name.ya.ru/
openid.ax.type.ext0: http://axschema.org/namePerson
openid.ax.type.ext1: http://axschema.org/namePerson/friendly
openid.ax.type.ext2: http://axschema.org/contact/country/home
openid.ax.type.ext3: http://axschema.org/contact/email
openid.ax.count.ext0: 1
openid.ax.value.ext1.1: lorien
openid.return_to: http://localhost:8000/auth/exec/openid/finish?janrain_nonce=2011-04-16T15%3A04%3A15Za9reyd
janrain_nonce: 2011-04-16T15:04:15Za9reyd
openid.ax.mode: fetch_response
openid.claimed_id: http://lorien-name.ya.ru/
openid.ax.value.ext3.1: lorien@lorien.name
openid.sreg.nickname: lorien
openid.ns.ax: http://openid.net/srv/ax/1.0
openid.ax.value.ext0.1: Grigoriy Petukhov
openid.sig: oMIXJkmnqU5hcg0cecpo60x24lM=
openid.ax.count.ext1: 1
openid.ax.count.ext2: 0
openid.ax.count.ext3: 1
openid.ns.sreg: http://openid.net/extensions/sreg/1.1
openid.sreg.fullname: Grigoriy Petukhov
openid.ns: http://specs.openid.net/auth/2.0
openid.assoc_handle: {HMAC-SHA1}{4da9b044}{1rPSoA==}
Setting up the consumer
Setting up the OpenID response object
OPENID LIB: Error attempting to use stored discovery information: <openid.consumer.consumer.TypeURIMismatch: Required type http://specs.openid.net/auth/2.0/signon not found in ['http://specs.openid.net/auth/2.0/server', 'http://openid.net/extensions/sreg/1.1', 'http://openid.net/srv/ax/1.0'] for endpoint <openid.consumer.discover.OpenIDServiceEndpoint server_url='http://openid.yandex.ru/server/' claimed_id=None local_id=None canonicalID=None used_yadis=True >>
OPENID LIB: Attempting discovery to verify endpoint
OPENID LIB: Performing discovery on http://lorien-name.ya.ru/
OPENID LIB: Received id_res response from http://openid.yandex.ru/server/ using association {HMAC-SHA1}{4da9b044}{1rPSoA==}
OPENID LIB: Using OpenID check_authentication
OPENID LIB: assoc_handle
OPENID LIB: ax.count.ext0
OPENID LIB: ax.count.ext1
OPENID LIB: ax.count.ext2
OPENID LIB: ax.count.ext3
OPENID LIB: ax.mode
OPENID LIB: ax.type.ext0
OPENID LIB: ax.type.ext1
OPENID LIB: ax.type.ext2
OPENID LIB: ax.type.ext3
OPENID LIB: ax.value.ext0.1
OPENID LIB: ax.value.ext1.1
OPENID LIB: ax.value.ext3.1
OPENID LIB: claimed_id
OPENID LIB: identity
OPENID LIB: mode
OPENID LIB: ns
OPENID LIB: ns.ax
OPENID LIB: ns.sreg
OPENID LIB: op_endpoint
OPENID LIB: response_nonce
OPENID LIB: return_to
OPENID LIB: signed
OPENID LIB: sreg.email
OPENID LIB: sreg.fullname
OPENID LIB: sreg.nickname
Authenticating user with openid xauth service
Authenticating user with openid xauth service
Authenticating user with openid xauth service
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
Authenticating user with oauth xauth service
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
Authenticating user with oauth xauth service
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
Authenticating user with oauth xauth service
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=vkontakte]
VIEW START exec [service=vkontakte, command=prepare]
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
vkontakte provider choosed
VIEW START xauth_login
VIEW START prepare [service=vkontakte]
VIEW START exec [service=vkontakte, command=prepare]
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
vkontakte provider choosed
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
vkontakte provider choosed
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
vkontakte provider choosed
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
vkontakte provider choosed
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
VIEW START exec [service=oauth, command=finish]
VIEW START finish
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth, command=token]
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START finish
Authenticating user with oauth xauth service
VIEW START xauth_login
VIEW START prepare [service=oauth]
VIEW START exec [service=oauth, command=prepare]
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=oauth1]
VIEW START exec [service=oauth1, command=prepare]
VIEW START prepare [service=oauth1]
VIEW START exec [service=oauth1, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth, command=finish]
VIEW START xauth_login
VIEW START prepare [service=oauth1]
VIEW START exec [service=oauth1, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth1, command=finish]
VIEW START finish
Authenticating user with oauth1 xauth service
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=oauth1]
VIEW START exec [service=oauth1, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth1, command=finish]
VIEW START finish
Authenticating user with oauth1 xauth service
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
Authenticating user with oauth2 xauth service
Authenticating user with oauth2 xauth service
Authenticating user with oauth2 xauth service
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
Authenticating user with oauth2 xauth service
VIEW START xauth_login
VIEW START prepare [service=oauth1]
VIEW START exec [service=oauth1, command=prepare]
VIEW_START prepare
twitter provider choosed
VIEW START exec [service=oauth1, command=finish]
VIEW START finish
Authenticating user with oauth1 xauth service
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
Authenticating user with oauth2 xauth service
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
facebook provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
Authenticating user with oauth2 xauth service
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
vkontakte provider choosed
VIEW START xauth_login
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
vkontakte provider choosed
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
vkontakte provider choosed
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
vkontakte provider choosed
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
vkontakte provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
vkontakte provider choosed
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
vkontakte provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
vkontakte provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
Authenticating user with oauth2 xauth service
Authenticating user with oauth2 xauth service
Authenticating user with oauth2 xauth service
Authenticating user with oauth2 xauth service
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
vkontakte provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
Authenticating user with oauth2 xauth service
Authenticating user with oauth2 xauth service
Authenticating user with oauth2 xauth service
Authenticating user with oauth2 xauth service
VIEW START xauth_login
VIEW START prepare [service=oauth2]
VIEW START exec [service=oauth2, command=prepare]
VIEW_START prepare
vkontakte provider choosed
VIEW START exec [service=oauth2, command=finish]
VIEW START finish
Authenticating user with oauth2 xauth service
VIEW START xauth_login
