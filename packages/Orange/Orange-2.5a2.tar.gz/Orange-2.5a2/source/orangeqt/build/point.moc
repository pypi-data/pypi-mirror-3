/****************************************************************************
** Meta object code from reading C++ file 'point.h'
**
** Created: Tue Dec 20 10:26:58 2011
**      by: The Qt Meta Object Compiler version 62 (Qt 4.7.4)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "../point.h"
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'point.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 62
#error "This file was generated using the moc from 4.7.4. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
static const uint qt_meta_data_Point[] = {

 // content:
       5,       // revision
       0,       // classname
       0,    0, // classinfo
       0,    0, // methods
       6,   14, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // properties: name, type, flags
      13,    6, 0x43095003,
      23,   19, 0x02095003,
      30,   19, 0x02095003,
      45,   35, 0x0009500b,
      62,   57, 0x01085003,
      69,   57, 0x01085003,

       0        // eod
};

static const char qt_meta_stringdata_Point[] = {
    "Point\0QColor\0color\0int\0symbol\0size\0"
    "DataPoint\0coordinates\0bool\0marked\0"
    "selected\0"
};

const QMetaObject Point::staticMetaObject = {
    { &QGraphicsObject::staticMetaObject, qt_meta_stringdata_Point,
      qt_meta_data_Point, 0 }
};

#ifdef Q_NO_DATA_RELOCATION
const QMetaObject &Point::getStaticMetaObject() { return staticMetaObject; }
#endif //Q_NO_DATA_RELOCATION

const QMetaObject *Point::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->metaObject : &staticMetaObject;
}

void *Point::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_Point))
        return static_cast<void*>(const_cast< Point*>(this));
    return QGraphicsObject::qt_metacast(_clname);
}

int Point::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QGraphicsObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    
#ifndef QT_NO_PROPERTIES
     if (_c == QMetaObject::ReadProperty) {
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< QColor*>(_v) = color(); break;
        case 1: *reinterpret_cast< int*>(_v) = symbol(); break;
        case 2: *reinterpret_cast< int*>(_v) = size(); break;
        case 3: *reinterpret_cast< DataPoint*>(_v) = coordinates(); break;
        case 4: *reinterpret_cast< bool*>(_v) = is_marked(); break;
        case 5: *reinterpret_cast< bool*>(_v) = is_selected(); break;
        }
        _id -= 6;
    } else if (_c == QMetaObject::WriteProperty) {
        void *_v = _a[0];
        switch (_id) {
        case 0: set_color(*reinterpret_cast< QColor*>(_v)); break;
        case 1: set_symbol(*reinterpret_cast< int*>(_v)); break;
        case 2: set_size(*reinterpret_cast< int*>(_v)); break;
        case 3: set_coordinates(*reinterpret_cast< DataPoint*>(_v)); break;
        case 4: set_marked(*reinterpret_cast< bool*>(_v)); break;
        case 5: set_selected(*reinterpret_cast< bool*>(_v)); break;
        }
        _id -= 6;
    } else if (_c == QMetaObject::ResetProperty) {
        _id -= 6;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 6;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 6;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 6;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 6;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 6;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}
QT_END_MOC_NAMESPACE
