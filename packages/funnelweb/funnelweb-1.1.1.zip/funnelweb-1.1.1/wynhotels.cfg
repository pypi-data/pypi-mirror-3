[transmogrifier]
pipeline =
    hotels
    addfolders
    changetype
    ploneupload
    ploneupdate
    publish
    plonepublish
    plonealias
    ploneprune
    localupload
#    debug


[hotels]
blueprint = transmogrify.xmlsource
@xmlfile = FILE: xmlfile
xmlfile = test.xml
pathtag = hotelFileName
itemtag = hotel
type = MyCustomType


[addfolders]
blueprint = transmogrify.pathsorter
@default_pages = LIST: names that indication page should be a defaultpage
@default_containers = TYPE: Type to set when creating folders
@debug = show extra debug information
default_pages =
    index.html
    index
    index-html
default_containers = Folder


[changetype]
blueprint = collective.transmogrifier.sections.inserter
#
@doc = Switch the type of the created object if desired
#
@value = TAL: TAL expression to give the new value for the Type of object.
key = string:_type
condition = python:item.get('_type')
value = python:item['_type']



[ploneupload]
blueprint = transmogrify.ploneremote.remoteconstructor
#
@doc = Adds content to plone via xmlrpc
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteconstructor
#
@target = URL: The base url for where all content should be created. Can support basic authentication
  e.g. target = http://admin:admin@localhost:8080/Plone
@debug = show extra debug information
target =
type-key = _type
path-key = _path

[ploneupdate]
blueprint = transmogrify.ploneremote.remoteschemaupdater
#
@doc = Updates content of existing object on a remote plone site via xmlrpc
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteschemaupdater
@target = URL: the base url for where all content should be updated. Can support basic authentication
@debug = show extra debug information
# e.g. target = http://admin:admin@localhost:8080/Plone
#
target = ${ploneupload:target}
type-key = _type
path-key = _path

[plonehide]
blueprint = transmogrify.ploneremote.remotenavigationexcluder
#
@doc = Hide items from the navigation
 (hints to which items should be hidden are set earlier in pipeline)
 by default it will hide items not linked to outside of any body text
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remotenavigationexcluder
#
@debug = show extra debug information
target = ${ploneupload:target}
type-key = _type
path-key = _path
exclude-from-navigation-key = ${hideguess:key}


[publish]
blueprint = collective.transmogrifier.sections.inserter
#
@doc = Set the workflow transition
#key hint which will be used publish the item.
# This value is later read by [plonepublish] and we can have conditions
# to have different WF transitions for different content types
# Note that images do not have workflow and they inherit
# permission settings of the parent container
#
@value = TAL: TAL expression to return the transition to workflow
key = string:_transitions
value = python:["publish"]
condition = python:item.get('_type') != 'Image' and not options.get('disabled')


[plonepublish]
blueprint = transmogrify.ploneremote.remoteworkflowupdater
#
@doc= Publish or otherwise change the workflow state of remote plone content
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteworkflowupdater
#
@debug = show extra debug information
transitions = submit publish
transitions-key = _transitions
target = ${ploneupload:target}
type-key = _type
path-key = _path


[plonealias]
blueprint = transmogrify.ploneremote.remoteredirector
#
@doc = Creates aliases for items that have moved
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteredirector
#
target = ${ploneupload:target}
type-key = _type
path-key = _path

[ploneprune]
blueprint = transmogrify.ploneremote.remoteprune
#
@doc = Delete objects which are on the remote site, but not in local copy
@condition = TAL: TAL expression for which folders to remove old content
# see http://pypi.python.org/pypi/transmogrify.ploneremote#remoteprune
#
target = ${ploneupload:target}
condition = python:item.get('_type') in ['Folder']

[localupload]
blueprint = transmogrify.webcrawler.cache
#
@doc = Save transformed site locally
# see http://pypi.python.org/pypi/transmogrify.webcrawler#cache
#
@output = DIR: directory to load transformed content into for debugging
output =
@debug = show extra debug information

#[debug]
#blueprint = collective.transmogrifier.sections.tests.pprinter

