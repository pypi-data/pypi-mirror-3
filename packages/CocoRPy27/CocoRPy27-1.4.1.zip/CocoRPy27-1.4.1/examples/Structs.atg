COMPILER Structs

PRODUCTIONS

   Structs = decl { decl } .

   decl =
      simpleTypeDecl
      | pointerTypeDecl
      | arrayTypeDecl
      ident ':' typeSpec ';'
      ident ':' type ';'
      ident ':' '[' size ']' 'of' type ';'
      ident ':' '^' 'to' type ';'
      .

   typeSpec =
      { '[' size ']'
      | '^'
      }
      
   type =
      typeName
      arrayType
      enumeration
      structuredType
      .

   typeName =
      ident
      .

   arrayType =
      'array' '[' size ']' : 
      .

   dataSpec = 
      structDef
      | unionDef
      | enumeration

   typedef =
      'type' ident ':' def ';'

   structuredType = structDef | unionDef .

   structDef =
      'struct' [ TAG ]
         '{'
         fieldDef
         { fieldDef }
         '}' [ ';' ]
      .

   unionDef =
      'union' [ TAG ]
         '{'
         fieldDef
         { fieldDef }
         '}' [ ';' ]
      .

   decl =
      '*' decl | directDecl
      .

   directDecl =
      name Descriptor
      | '(' decl ')' Descriptor
      .

   descriptor =
      '[' [number] ']' Descriptor
      | '(' ( '*' decl | fieldDef { ',' fieldDef } ) ')'
      /*| '(' CONTEXT ('*') decl ')'
      | '(' fieldDef { ',' fieldDef } ')' */
      .

   enumeration =
      'enum' [ TAG ]
         '{'
         name [ '=' value ]
         { ',' name [ '=' value ] }
         '}' [ ';' ]
      .

END Structs.

