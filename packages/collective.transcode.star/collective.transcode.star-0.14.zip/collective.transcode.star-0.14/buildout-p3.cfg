[buildout]
#extensions =
#    buildout.dumppickedversions
#    mr.developer
#dump-picked-versions-file = versions.cfg
#overwrite-picked-versions-file = true
#sources = sources
#auto-checkout = *
#unzip = true

#sources-base = git git@github.com:
sources-base = git git://github.com/

versions = versions

parts =
    transcodedaemon
    zope2
    instance
    zopepy
    utilities-patch

# Change the number here to change the version of Plone being used
extends =
    http://dist.plone.org/release/3.3.5/versions.cfg

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org/release/3.3.5
    http://dist.plone.org/thirdparty

# Add additional eggs here
eggs =
    collective.transcode.recipe
    collective.transcode.daemon

# Reference any eggs you are developing here, one per line
# e.g.: develop = src/my.package
develop = .
#          src/*

[versions]
plone.app.registry = 1.0b2
collective.transcode.daemon = 0.10
collective.transcode.recipe = 0.2
zope.i18n = 3.4.0
zope.component = 3.5.1
z3c.form = 2.3.3
zope.schema = 3.6.0
zope.lifecycleevent = 3.5.2
zope.interface = 3.5.3
ZODB3 = 3.8.5
plone.i18n = 2.0
Twisted = 10.1.0
pycrypto = 2.3
hashlib = 20081119

[zope2]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.zope2install
recipe = plone.recipe.zope2install
fake-zope-eggs = true
url = ${versions:zope2-url}
additional-fake-eggs =
     Zope2

[instance]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.zope2instance
recipe = plone.recipe.zope2instance
zope2-location = ${zope2:location}
user = admin:admin
http-address = 8080
blob-storage = var/blobstorage
#debug-mode = on
#verbose-security = on
# If you want Zope to know about any additional eggs, list them here.
# This should include any development eggs you listed in develop-eggs above,
# e.g. eggs = Plone my.package
eggs =
    Plone
    PILwoTK
    plone.app.blob
    plone.reload
    collective.transcode.star
    ${buildout:eggs}

# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml = plone.app.blob
       plone.reload

[transcodedaemon]
recipe = collective.transcode.recipe
listen_host = localhost
listen_port = 8888
videofolder = videos
secret = 1771d99931264d538e75eeb19da7d6a0

# set default_supported_mimetypes (or supported_mimetypes in the profile) to an empty
# list [] to ignore mimetype checks
default_supported_mimetypes = ['application/ogg',\
                                'video/ogg',\
                                'video/x-ogg',\
                                'video/x-ogm+ogg',\
                                'video/flv',\
                                'video/x-flv',\
                                'video/mpeg',\
                                'video/3gpp',\
                                'video/x-ms-wmv',\
                                'video/quicktime',\
                                'video/x-la-asf',\
                                'video/x-ms-asf',\
                                'video/x-msvideo',\
                                'video/mp4',\
                                'video/webm',\
                                'video/x-matroska',\
                                ]

# supported transcoding profiles
profiles = [\
            {'id': 'iso',\
             'cmd': 'scripts/iso %s %s',\
             'supported_mime_types': 'text/xml',\
             'output_mime_type': 'application/octet-stream',\
             'output_extension': 'iso' },\
            {'id': 'jpeg',\
             'cmd': 'scripts/jpeg %s %s',\
             'supported_mime_types': ${transcodedaemon:default_supported_mimetypes},\
             'output_mime_type': 'image/jpeg',\
             'output_extension': 'jpg' },\
            {'id': 'mpeg2',\
             'cmd': 'scripts/mpeg2 %s %s',\
             'supported_mime_types': ${transcodedaemon:default_supported_mimetypes},\
             'output_mime_type': 'video/mpeg', 'output_extension': 'mpg' },\
            {'id': 'mp4-high',\
             'cmd': 'scripts/mp4-high %s %s',\
             'supported_mime_types': ${transcodedaemon:default_supported_mimetypes},\
             'output_mime_type': 'video/mp4', 'output_extension': 'mp4' },\
            {'id': 'mp4-low',\
             'cmd': 'scripts/mp4-low %s %s',\
             'supported_mime_types': ${transcodedaemon:default_supported_mimetypes},\
             'output_mime_type': 'video/mp4', 'output_extension': 'mp4' },\
            {'id': 'webm-high',\
             'cmd': 'scripts/webm-high %s %s',\
             'supported_mime_types': ${transcodedaemon:default_supported_mimetypes},\
             'output_mime_type': 'video/webm', 'output_extension': 'webm' },\
            {'id': 'webm-low',\
             'cmd': 'scripts/webm-low %s %s',\
             'supported_mime_types': ${transcodedaemon:default_supported_mimetypes},\
             'output_mime_type': 'video/webm', 'output_extension': 'webm' },\
            ]

eggs =
    hashlib
    ${buildout:eggs}

#[sources]
#collective.transcode.star = ${buildout:sources-base}plumi/collective.transcode.star.git
#collective.transcode.daemon = ${buildout:sources-base}plumi/collective.transcode.daemon.git
#collective.transcode.recipe = ${buildout:sources-base}plumi/collective.transcode.recipe.git
#collective.transcode.burnstation = svn https://svn.plone.org/svn/collective/collective.transcode.burnstation/trunk

[zopepy]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/zc.recipe.egg
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
extra-paths = ${zope2:location}/lib/python
scripts = zopepy

[utilities-patch]
recipe = collective.recipe.patch
egg = Products.CMFQuickInstallerTool==2.1.7
patches = utilities.patch
