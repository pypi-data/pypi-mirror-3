#!/usr/bin/env python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Remove user tool for dnsmanagement"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.17'


import sys

from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib
from roster_user_tools.action_flags import Remove
from roster_user_tools.data_flags import User


class Args(Remove, User):
  pass


def main(args):
  """Collects command line arguments, removes users/groups/assignments

  Inputs:
    args: list of arguments from the command line
  """
  command = None
  if( args and not args[0].startswith('-') ):
    command = args.pop(0)
  usage = ('\n'
           '\n'
           'To remove a user:\n'
           '\t%s user -n <user-name>\n'
           '\n'
           'To remove a group:\n'
           '\t%s group -g <group>\n'
           '\n'
           'To remove a user group assignment:\n'
           '\t%s assignment -n <user-name> -g <group>\n'
           '\n'
           'To remove a forward zone permission:\n'
           '\t%s forward -z <zone-name> -g <group>\n'
           '\n'
           'To remove a reverse range permission:\n'
           '\t%s reverse -b <cidr-block> -g <group>\n' % tuple(
                   [sys.argv[0] for _ in range(5)]))
  args_instance = Args(command,
      ['user', 'group', 'assignment', 'forward', 'reverse'], args, usage)
  options = args_instance.options

  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, error:
    print 'ERROR: %s' % error
    sys.exit(1)

  if( options.access_level ):
    access_level_dict = roster_client_lib.RunFunction(
        u'ListAccessLevels', options.username, credfile=options.credfile,
        credstring=options.credstring, server_name=options.server)[
            'core_return']
    try:
      options.access_level = access_level_dict[options.access_level]
    except KeyError, error:
      print 'ERROR: KeyError: %s' % error
      sys.exit(1)

  if( options.zone_name ):
    zones = roster_client_lib.RunFunction(u'ListZones', options.username,
                                          credfile=options.credfile,
                                          credstring=options.credstring,
                                          server_name=options.server)[
                                              'core_return']
    if( options.zone_name not in zones ):
      cli_common_lib.DnsError('Zone does not exist.', 1)

  if( options.group ):
    groups = roster_client_lib.RunFunction(
        u'ListGroups', options.username, credfile=options.credfile,
        credstring=options.credstring, server_name=options.server)[
            'core_return']

  if( options.new_user ):
    users = roster_client_lib.RunFunction(
        u'ListUsers', options.username, credfile=options.credfile,
        credstring=options.credstring, server_name=options.server,
        args=[options.new_user])['core_return']

  if( command == 'user' ):
    if( options.new_user not in users ):
      cli_common_lib.DnsError('Username does not exist.', 1)
    roster_client_lib.RunFunction(
        u'RemoveUser', options.username, credfile=options.credfile,
        credstring=options.credstring, server_name=options.server,
        args=[options.new_user])
    if( not options.quiet ):
      print 'REMOVED USER: username: %s access_level: %s' % (
          options.new_user, options.access_level)

  elif( command == 'group' ):
    if( options.group not in groups ):
      cli_common_lib.DnsError('Group does not exist.', 1)

    roster_client_lib.RunFunction(
        u'RemoveGroup', options.username, credfile=options.credfile,
        credstring=options.credstring, server_name=options.server,
        args=[options.group])
    if( not options.quiet ):
      print 'REMOVED GROUP: group: %s' % options.group

  elif( command == 'assignment' ):
    if( options.group not in groups ):
      cli_common_lib.DnsError('Group does not exist.', 1)
    if( options.new_user not in users ):
      cli_common_lib.DnsError('Username does not exist.', 1)

    roster_client_lib.RunFunction(
        u'RemoveUserGroupAssignment', options.username,
        credfile=options.credfile,
        credstring=options.credstring, server_name=options.server,
        args=[options.new_user, options.group])
    if( not options.quiet ):
      print 'REMOVED USER_GROUP_ASSIGNMENT: username: %s group: %s' % (
          options.new_user, options.group)

  elif( command == 'reverse' ):
    if( options.group not in groups ):
      cli_common_lib.DnsError('Group does not exist.', 1)
    group_permission_list = roster_client_lib.RunFunction(
                                  u'ListReverseRangePermissions',
                                  options.username,
                                  credfile=options.credfile,
                                  credstring=options.credstring,
                                  server_name=options.server,
                                  args=[options.cidr_block, options.group,
                                        None])['core_return'][options.group][
                                        0]['group_permission']

    rows_affected = roster_client_lib.RunFunction(
                                  u'RemoveReverseRangePermission',
                                  options.username,
                                  credfile=options.credfile,
                                  credstring=options.credstring,
                                  server_name=options.server,
                                  args=[options.cidr_block, options.group,
                                        group_permission_list])['core_return']

    if( rows_affected > 0 ):
      if( not options.quiet ):
        print ('REMOVED REVERSE_RANGE_PERMISSION: cidr_block: %s group: %s '
               'group_permission: %s' % (options.cidr_block, options.group,
                                         group_permission_list))
    else:
      cli_common_lib.DnsError('Permissions not removed', 1)

  elif( command == 'forward' ):
    if( options.group not in groups ):
      cli_common_lib.DnsError('Group does not exist.', 1)
    group_permission_list = roster_client_lib.RunFunction(
                                  u'ListForwardZonePermissions',
                                  options.username,
                                  credfile=options.credfile,
                                  credstring=options.credstring,
                                  server_name=options.server,
                                  args=[options.zone_name, options.group,
                                        None])['core_return'][options.group][
                                        0]['group_permission']

    rows_affected = roster_client_lib.RunFunction(
                                  u'RemoveForwardZonePermission',
                                  options.username,
                                  credfile=options.credfile,
                                  credstring=options.credstring,
                                  server_name=options.server,
                                  args=[options.zone_name, options.group,
                                        group_permission_list])['core_return']

    if( rows_affected > 0 ):
      if( not options.quiet ):
        print ('REMOVED FORWARD_ZONE_PERMISSION: zone_name: %s group: %s '
               'group_permission: %s' % (options.zone_name, options.group,
                                         group_permission_list))
    else:
      cli_common_lib.DnsError('Permissions not removed', 1)

  else:
    cli_common_lib.DnsError(
        'Command %s exists, but codepath doesn\'t.' % command, 1)
if __name__ == "__main__":
  main(sys.argv[1:])
