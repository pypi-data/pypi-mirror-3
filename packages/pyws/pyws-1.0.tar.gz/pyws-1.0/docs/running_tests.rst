.. _running_tests:


Running tests
=============

This chapter explains how to run pyws interoperability tests, for detailed
description of the test bench refer to :ref:`test_bench`. These tests can also
be treated as examples of how different clients work with pyws.


Running a server
----------------

In any case we need a pyws server running. The easiest way to do this is::

    cd [pyws_dir]/examples/_django
    python manage.py runserver

This will run a server based on Django on ``localhost:8000``.


PHP
----

Base directory is ``[pyws_dir]/tests/php``.

Surely, we need to have PHP installed, I use PHP 5.3.3. We need to have
PHPUnit installed as well, I use PHPUnit 3.4.13. To generate PHP classes from
a WSDL file, I use a slightly modified version of ``wsdl2php.php`` script
(the original comes from http://www.urdalen.no/wsdl2php/, support of ``date``
type was added), so this script is included in the project.

Download WSDL file and build PHP classes::

    cd [pyws_dir]/tests/php
    ./build.sh

Run the tests::

    ./run.sh

To clean generated PHP classes and WSDL file::

    ./clean.sh


Java (Axis)
-----------

Base directory is ``[pyws_dir]/tests/java/axis``.

Of course, we need to have Java installed, I use Java 1.6.0_26. We also need
to have Apache Axis and JUnit4 installed, I use Apache Axis 1.4 and JUnit
4.8.2. Probably, you may also need to edit ``common.sh`` and change
``JAVA_DIR`` to the directory containing Java libraries. In my case it is
``/usr/share/java``.

Download WSDL file and build Java classes::

    cd [pyws_dir]/tests/java/axis
    ./build.sh

Run the tests::

    ./run.sh

To clean generated Java classes and WSDL file::

    ./clean.sh


Python (suds)
-------------

Base directory is ``[pyws_dir]/tests/python/suds``.

We need to have suds and unittest2 installed.

Download WSDL file::

    cd [pyws_dir]/tests/python/suds
    ./build.sh

Run the tests::

    ./run.sh

To clean generated WSDL file::

    ./clean.sh

suds does not generate any classes, so we don't need do worry about it.


WS-I Basic Profile 1.2
----------------------

This test checks if WSDL file generated by pyws is compliant to `WS-I Basic
Profile 1.2 <http://www.ws-i.org/Profiles/BasicProfile-1.2-2010-11-09.html>`_.

Base directory is ``[pyws_dir]/tests/java/ws-i``.

Requirements are the same as for Axis integration tests, except that we don't
need JUnit, but we do need an XSLT 2.0 processor. I use Saxon B 0.9, if you
use another one, you should specify it in ``xslt.sh`` in variable ``SAXON``.

Download WS-I test tools::

    cd [pyws_dir]/tests/java/ws-i
    ./build.sh

Run the test::

    ./run.sh

This script will generate ``report.xml`` file. All we have to do is to open
it (for example, with Mozilla Firefox Web browser) and check if there are any
"failed" assertions. If there ain't any, then it's OK. Otherwise, you can find
further in the document the causes of the failure and report it to me :). But I
find it unlikely, I usually run this test too.

To clean generated files and WSDL file::

    ./clean.sh

