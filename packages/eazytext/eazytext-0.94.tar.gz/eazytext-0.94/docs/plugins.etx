h3. Overview
While the core of eazytext syntax remain under the definition of parser grammar,
there are two syntactic elements that are used to create a plugin framework.
They are namely,
: Macros ::
    Macros are direct function calls made from wiki text into the
    wiki engine, provided, there is a macro by that name available. Most
    probably the macro will return html content, which will be used to
    replace the macro call.

: Extensions ::
    Wiki extensions provide a way to extend the wiki engine, by defining a
    markup syntax for themselves, like math, graphs, code-highlighter etc ...
    Entire text within the extension-block will be passed on to the plugin,
    which can then apply its own parsing on the text and return suitable
    html for rendering.

Plugins are created using interface specifications created using
''zope.interface'' and ''zope.component''. The interface specifications to
implement macros and extensions are available under //eazytext/interfaces.py//

h3. Design 

Macro-plugin classes must implement the interface-spec ``{c}IEazyTextMacro``
defined in //eazytext/interfaces.py//, similarly extension-plugins must
implement the interface-spec ``{c}IEazyTextExtension``. Additionally a callable
factory class must be defined for each plugin.

''eazytext markup syntax to invoke a macro-plugin'',

> [<PRE {{ macroname( arg1, arg2, .... ) }} >] 
if it looks like a python function call, that is exactly what it is.
//macroname// is the name of the macro-plugin which implements //IEazyTextMacro//.
When encountering the macro syntax, the parser will instansiate the plugin instance
by evaluating the portion of text between [<PRE {{ ... }} >] as the macro call.
The plugin instance will subsequently be used to generate the html via a
multi-pass compilation.

''eazytext markup syntax to invoke an extension-plugin'',

> [<PRE
{{{ extension-name arg1 arg2 arg3
# { 'key1' : 'value', 'key2' : 'value2' }

extension-text
...
}}} >]

An extension block begins with [<PRE {{{ >] and ends with [<PRE }}} >].
Note that the opening and closing markup must begin in a new line, flush with
white-space.  //extension-name// is the name of the plugin implementing
//IEazyTextExtension// and arg1, arg2, ... are arguments to its
constructor. Upon encountering the extension block an instance of the extension
plugin is created, which is subsequently used by the multi-pass compiler to 
generate the html.

-----

{{{ Nested 
# { 'font-size' : 'small', 'color' : 'gray' }
Document edited using Vim <br>
/* vim: set filetype=etx : */
}}}

