Metadata-Version: 1.1
Name: pycom
Version: 0.6.0
Summary: Distributed component model for Python.
Home-page: http://www.pycom.org
Author: Dmitry 'Divius' Tantsur
Author-email: divius.inside@gmail.com
License: BSD
Download-URL: http://pypi.python.org/pypi/pycom
Description: Introduction
        =============
        
        PyCOM is simple and easy-to-use distributed component model written in Python.
        PyCOM makes different parts of your network application isolated and
        independent, while allowing easy and straightforward interaction between them.
        PyCOM may be seen as an easy and lightweight web services replacement.
        
        Ideology highlights:
        
        - Non-intrusive design without black magic and lots of auto-generated code
        - Easily adapts to a rapidly changing environment
        - ... and matches pythonic
          `EAFP <http://docs.python.org/glossary.html#term-eafp>`_ approach
        - Effective, easy-to-implement and portable protocol
        - Support for binary attachments
        - Support for stateful services via HTTP-alike sessions
        - Low level enough to build your own frameworks
        - ... and still simple enough to be used as is
        - Free software (new BSD license)
        
        Technical highlights:
        
        - Separate (potentially replaceable) *ZeroJSON* protocol implementation
        - Easily extensible core library
        - Does not required special "container" software
        - Introspection support for services
        - Load balancing over several services with the same interface
        - Comprehensive test suite and documentation
        - Python 2 and Python 3 support out-of-box
        
        There is ongoing effort to create a C++ client library for PyCOM:
        https://bitbucket.org/divius/libpycom
        
        Main concepts
        --------------
        
        With PyCOM you build your application as a number of *services*,
        each running in it's own process (or even on it's own computer).
        You maintain a PyCOM *nameserver* for finding services by their names
        (by the way, nameserver itself is a service).
        
        Services provide *interfaces*, i.e. a named way of interacting with service.
        They are somewhat similar to interfaces in e.g. Java, but note that
        PyCOM does not perform any checks on interfaces. Interface usually has
        some amount of *methods*.
        
        Services are identified by path with parts separated by slashes,
        e.g. ``/com/foo/group/service``.
        
        Interfaces are identified by name with parts separated by dots,
        e.g. ``com.foo.my-interface``.
        
        Examples
        ---------
        
        Service example (module ``package1.module1``)::
        
            import pycom
        
            @pycom.interface("com.foo.example")
            class MyService(pycom.Service):
        
                @pycom.method
                def bar(self, request, name, value=None):
                    return {name : value}
        
        Example command line for running this service (provided nameserver is running
        on ``192.168.10.1:2012``)::
        
            python -m pycom -a tcp://192.168.10.2:2013 -n tcp://192.168.10.1:2012 package1.module1
        
        Example client code for this service::
        
            import pycom
        
            context = pycom.ProxyContext(nameserver="tcp://192.168.10.1:2012")
            with context.locate("com.foo.example") as component:
                print component.bar(name="field1", value=42)
                # Prints {"field1" : 42}
                print component.bar("field1", value=42)
                # Prints {"field1" : 42}
                print component.bar("field1")
                # Prints {"field1" : None}
                print component.introspect()
                # Prints a lot of introspection information
        
        Quick start
        ------------
        
        Our requirements are:
        
        - POSIX-compatible OS (other may work)
        - `Python <http://www.python.org>`_ 2.6, 2.7 or >= 3.1
        - `0MQ Python bindings <http://www.zeromq.org/bindings:python>`_ >= 2.1.11
        - `six <http://packages.python.org/six/>`_ for Python 3 compatibility
          (maybe we'll drop it later)
        
        To run test suite you'll also need:
        
        - `coverage.py <http://nedbatchelder.com/code/coverage/>`_
        - `unittest2 <http://pypi.python.org/pypi/unittest2>`_ (Python 2.6 only)
        - `unittest2py3k <http://pypi.python.org/pypi/unittest2py3k>`_ (Python 3.1 only)
        
        To test (logs will be saved in `test.log`)::
        
            $ python test.py
        
        To build HTML documentation (requires `Sphinx <http://sphinx.pocoo.org>`_)::
        
            $ python setup.py build_sphinx
            $ <your-browser> build/sphinx/html/index.html
        
        To install from sources::
        
            $ python setup.py install
        
        or via `pip`::
        
            $ pip install pycom
        
        To start nameserver use script::
        
            $ /usr/local/bin/pycom-nameserver
        
        You may need to adjust nameserver configuration.
        
        Do not forget to read about known issues in the current version:
        http://packages.python.org/pycom/status.html#known-issues
        
        Support
        --------
        
        PyCOM repository and issue tracker are hosted on BitBucket.
        
            Download releases: http://pypi.python.org/pypi/pycom#downloads
        
            Latest source code: https://bitbucket.org/divius/pycom/overview
        
            Report bugs: https://bitbucket.org/divius/pycom/issues
        
            Read documentation: http://www.pycom.org
        
        Enjoy =)
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.1
Classifier: Programming Language :: Python :: 3.2
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Object Brokering
Classifier: Topic :: System :: Distributed Computing
Classifier: Topic :: System :: Networking
Classifier: License :: OSI Approved :: BSD License
Requires: pyzmq (>=2.1.11)
Requires: six
Provides: zerojson
