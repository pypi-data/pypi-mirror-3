<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: publidoc2epub3_opf.inc.xsl 8f448be1af0e 2012/06/15 00:07:55 patrick $ -->
<xsl:stylesheet version="1.1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:date="http://exslt.org/dates-and-times"
                extension-element-prefixes="date">

  <!--
      =========================================================================
      Template package_opf
      =========================================================================
  -->
  <xsl:template name="package_opf">
    <xsl:document href="{$path}package.opf" method="xml"
                  encoding="utf-8" indent="yes">
      <xsl:comment> Generated by PubliForge, <xsl:value-of select="date:date-time()"/> </xsl:comment>
      <package xmlns="http://www.idpf.org/2007/opf"
               version="3.0" unique-identifier="uid">
        <xsl:attribute name="xml:lang"><xsl:value-of select="$lang"/></xsl:attribute>

        <xsl:call-template name="metadata"/>

        <xsl:call-template name="manifest"/>

        <xsl:call-template name="spine"/>

        <xsl:call-template name="guide"/>
      </package>
    </xsl:document>
  </xsl:template>

  <!--
      *************************************************************************
                                      METADATA
      *************************************************************************
  -->
  <!--
      =========================================================================
      Template metadata, metadata_extra
      =========================================================================
  -->
  <xsl:template name="metadata">
    <metadata xmlns:dc="http://purl.org/dc/elements/1.1/"
              xmlns:dcterms="http://purl.org/dc/terms/"
              xmlns:opf="http://www.idpf.org/2007/opf">
      <!-- ean/identifier -->
      <xsl:choose>
        <xsl:when test="$ean and $ean!='-'">
          <dc:identifier id="uid"><xsl:value-of select="concat('urn:isbn:', $ean)"/></dc:identifier>
          <meta property="identifier-type" refines="#uid" scheme="onix:codelist5">15</meta>
        </xsl:when>
        <xsl:when test="head/identifier[@type='ean']">
          <dc:identifier id="uid"><xsl:value-of select="head/identifier[@type='ean']"/></dc:identifier>
          <meta property="identifier-type" refines="#uid" scheme="onix:codelist5">15</meta>
        </xsl:when>
        <xsl:otherwise>
          <dc:identifier id="uid">
            <xsl:choose>
              <xsl:when test="$publisher_url"><xsl:value-of select="$publisher_url"/></xsl:when>
              <xsl:when test="head/contributors/contributor[role='publisher']/link/@uri">
                <xsl:value-of select="head/contributors/contributor[role='publisher']/link/@uri"/>
              </xsl:when>
              <xsl:otherwise>http://www.publiforge.org</xsl:otherwise>
            </xsl:choose>
            <xsl:value-of select="concat('/epub/', @xml:id)"/>
          </dc:identifier>
        </xsl:otherwise>
      </xsl:choose>
      <!-- title -->
      <dc:title id="title">
        <xsl:apply-templates select="head/title" mode="text"/>
      </dc:title>
      <meta refines="#title" property="title-type">main</meta>
      <!-- language -->
      <dc:language><xsl:value-of select="$lang"/></dc:language>
      <!-- creators/contributors -->
      <xsl:apply-templates select="head/contributors/contributor" mode="metadata"/>
      <!-- publisher -->
      <xsl:choose>
        <xsl:when test="head/contributors/contributor[role='publisher']/label">
          <dc:publisher>
            <xsl:value-of select="head/contributors/contributor[role='publisher']/label"/>
          </dc:publisher>
        </xsl:when>
        <xsl:when test="$publisher_label">
          <dc:publisher><xsl:value-of select="$publisher_label"/></dc:publisher>
        </xsl:when>
      </xsl:choose>
      <!-- copyright -->
      <xsl:choose>
        <xsl:when test="head/copyright">
          <dc:rights>Copyright <xsl:value-of select="head/copyright"/></dc:rights>
        </xsl:when>
        <xsl:when test="head/publisher/label">
          <dc:rights>Copyright <xsl:value-of select="head/publisher/label"/></dc:rights>
        </xsl:when>
        <xsl:when test="$publisher_label">
          <dc:rights>Copyright <xsl:value-of select="$publisher_label"/></dc:rights>
        </xsl:when>
      </xsl:choose>
      <!-- abstract -->
      <xsl:if test="head/abstract">
        <dc:description>
          <xsl:apply-templates select="head/abstract/p" mode="text"/>
        </dc:description>
      </xsl:if>
      <!-- cover -->
      <xsl:choose>
        <xsl:when test="$cover">
          <meta name="cover" content="i_{translate($fid, ' ', '_')}_cover"/>
        </xsl:when>
        <xsl:when test="head/cover">
          <meta name="cover" content="i_{translate(head/cover/image/@id, ' ', '_')}"/>
        </xsl:when>
      </xsl:choose>
      <!-- extra metadata -->
      <xsl:call-template name="metadata_extra"/>
      <!-- modified -->
      <meta property="dcterms:modified">
        <xsl:value-of select="concat(substring-before(date:date-time(), '+'), 'Z')"/>
      </meta>
    </metadata>
  </xsl:template>

  <xsl:template name="metadata_extra"/>

  <!--
      =========================================================================
      contributor mode metadata
      =========================================================================
  -->
  <xsl:template match="contributor" mode="metadata"
                xmlns:dc="http://purl.org/dc/elements/1.1/"
                xmlns:opf="http://www.idpf.org/2007/opf">
    <xsl:for-each select="role">
      <xsl:choose>
        <xsl:when test=".='publisher'"/>
        <!-- contributor -->
        <xsl:when test=".='packager'">
          <dc:contributor id="contributor{count(preceding::contributor)}">
            <xsl:if test="../firstname">
              <xsl:apply-templates select="../firstname" mode="text"/>
              <xsl:text> </xsl:text>
            </xsl:if>
            <xsl:apply-templates select="../lastname|../label" mode="text"/>
          </dc:contributor>
          <meta property="role" refines="#contributor{count(preceding::contributor)}"
                scheme="marc:relators">mrk</meta>
        </xsl:when>
        <!-- creator -->
        <xsl:otherwise>
          <dc:creator id="creator{count(preceding::contributor)}">
            <xsl:if test="../firstname">
              <xsl:apply-templates select="../firstname" mode="text"/>
              <xsl:text> </xsl:text>
            </xsl:if>
            <xsl:apply-templates select="../lastname|../label" mode="text"/>
          </dc:creator>
          <meta property="role" refines="#creator{count(preceding::contributor)}"
                scheme="marc:relators">
            <xsl:choose>
              <xsl:when test=".='illustrator'">ill</xsl:when>
              <xsl:otherwise>aut</xsl:otherwise>
            </xsl:choose>
          </meta>
          <meta property="file-as" refines="#creator{count(preceding::owner)}">
            <xsl:apply-templates select="../lastname|../label" mode="text"/>
            <xsl:if test="../firstname">
              <xsl:text>, </xsl:text>
              <xsl:apply-templates select="../firstname" mode="text"/>
            </xsl:if>
          </meta>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>
  </xsl:template>

  
  <!--
      *************************************************************************
                                       MANIFEST
      *************************************************************************
  -->
  <!--
      =========================================================================
      Template manifest, manifest_extra
      =========================================================================
  -->
  <xsl:template name="manifest">
    <manifest>
      <item id="ncx" href="toc.ncx" media-type="application/x-dtbncx+xml"/>
      <!-- XHTML -->
      <item id="h_{translate($fid, ' ', '_')}-nav" properties="nav"
            href="{$fid}-nav{$html_ext}" media-type="application/xhtml+xml"/>
      <xsl:if test="$cover or head/cover">
        <item id="h_{translate($fid, ' ', '_')}-cover"
              href="{$fid}-cover{$html_ext}" media-type="application/xhtml+xml"/>
      </xsl:if>
      <xsl:if test="$subtoc">
        <xsl:apply-templates select="division" mode="manifest"/>
      </xsl:if>
      <xsl:apply-templates select="//topic|//quiz" mode="manifest"/>
      <xsl:if test=".//note">
        <item id="h_{translate($fid, ' ', '_')}-not"
              href="{$fid}-not{$html_ext}" media-type="application/xhtml+xml"/>
        <xsl:apply-templates select=".//note" mode="manifest"/>
      </xsl:if>
      <!-- Images -->
      <xsl:if test="$cover">
        <item id="i_{translate($fid, ' ', '_')}_cover" href="{$img_dir}{$cover}"
              properties="cover-image"
              media-type="image/{substring-after($cover,'.')}"/>
      </xsl:if>
      <xsl:if test="$img">
        <xsl:apply-templates select=".//image" mode="manifest"/>
      </xsl:if>
      <xsl:if test="$js">
        <item id="i_pulse" href="Images/pulse.gif" media-type="image/gif"/>
      </xsl:if>
      <xsl:if test="//quiz">
        <item id="i_button" href="Images/button.png" media-type="image/png"/>
        <item id="i_button_over" href="Images/button_over.png" media-type="image/png"/>
      </xsl:if>
      <!-- Audios -->
      <xsl:if test="$aud">
        <xsl:apply-templates select=".//audio" mode="manifest"/>
      </xsl:if>
      <!-- Video -->
      <xsl:if test="$vid">
        <xsl:apply-templates select=".//video" mode="manifest"/>
      </xsl:if>
      <!-- CSS -->
      <item id="c_reset" href="Css/reset.css" media-type="text/css"/>
      <item id="c_publidoc" href="Css/publidoc.css" media-type="text/css"/>
      <xsl:if test="//quiz">
        <item id="c_publiquiz" href="Css/publiquiz.css" media-type="text/css"/>
      </xsl:if>
      <item id="c_custom" href="Css/custom.css" media-type="text/css"/>
      <!-- JavaScript -->
      <xsl:if test="$js">
        <item id="j_mootools" href="Js/mootools.js" media-type="application/javascript"/>
        <item id="j_publidoc" href="Js/publidoc.js" media-type="application/javascript"/>
        <xsl:if test="//quiz">
          <item id="j_publiquiz" href="Js/publiquiz.js" media-type="application/javascript"/>
        </xsl:if>
       </xsl:if>
      <xsl:call-template name="manifest_extra"/>
    </manifest>
  </xsl:template>

  <xsl:template name="manifest_extra"/>

  <!--
      =========================================================================
      division, topic, quiz, note mode manifest
      =========================================================================
  -->
  <xsl:template match="division" mode="manifest">
    <item id="h_{translate($fid, ' ', '_')}-div-{count(preceding::division)+1}"
          href="{$fid}-div-{count(preceding::division)+1}{$html_ext}"
          media-type="application/xhtml+xml"/>
  </xsl:template>

  <xsl:template match="topic" mode="manifest">
    <item id="h_{translate($fid, ' ', '_')}-tpc-{count(preceding::topic)+1}"
          href="{$fid}-tpc-{count(preceding::topic)+1}{$html_ext}"
          media-type="application/xhtml+xml">
      <xsl:if test="$js">
        <xsl:attribute name="properties">scripted</xsl:attribute>
      </xsl:if>
    </item>
  </xsl:template>

  <xsl:template match="quiz" mode="manifest">
    <item id="h_{translate($fid, ' ', '_')}-quz-{count(preceding::quiz)+1}"
          href="{$fid}-quz-{count(preceding::quiz)+1}{$html_ext}"
          media-type="application/xhtml+xml">
      <xsl:attribute name="properties">scripted</xsl:attribute>
    </item>
  </xsl:template>

  <xsl:template match="note" mode="manifest">
    <item id="h_{translate($fid, ' ', '_')}-not-{count(preceding::note)+1}"
          href="{$fid}-not-{count(preceding::note)+1}{$html_ext}"
          media-type="application/xhtml+xml"/>
  </xsl:template>

  <!--
      =========================================================================
      image, audio, video mode manifest
      =========================================================================
  -->
  <xsl:template match="image" mode="manifest">
    <xsl:if test="$img and count(preceding::image[@id=current()/@id])=0
                  and (not($cover) or name(..)!='cover')">
      <xsl:choose>
        <xsl:when test="ancestor::tooltip">
          <item id="i_{translate(@id, ' ', '_')}" href="{$img_dir}{@id}.png"
                media-type="image/png"/>
        </xsl:when>
        <xsl:otherwise>
          <item id="i_{translate(@id, ' ', '_')}" href="{$img_dir}{@id}{$img_ext}">
            <xsl:attribute name="media-type">
              <xsl:text>image/</xsl:text>
              <xsl:choose>
                <xsl:when test="$img_ext='.jpg'">jpeg</xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="substring-after($img_ext, '.')"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:attribute>
          </item>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:if>
  </xsl:template>

  <xsl:template match="audio" mode="manifest">
    <xsl:if test="$aud and count(preceding::audio[@id=current()/@id])=0">
      <item id="a_{translate(@id, ' ', '_')}1" href="{$aud_dir}{@id}{$aud_ext1}">
        <xsl:attribute name="media-type">
          <xsl:text>audio/</xsl:text>
          <xsl:choose>
            <xsl:when test="$aud_ext1='.mp3' or $aud_ext1='.m4a'">mpeg</xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="substring-after($aud_ext1, '.')"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:attribute>
      </item>
      <xsl:if test="$aud_ext1!=$aud_ext2">
        <item id="a_{translate(@id, ' ', '_')}2" href="{$aud_dir}{@id}{$aud_ext2}">
          <xsl:attribute name="media-type">
            <xsl:text>audio/</xsl:text>
            <xsl:choose>
              <xsl:when test="$aud_ext2='.mp3' or $aud_ext2='.m4a'">mpeg</xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="substring-after($aud_ext2, '.')"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
        </item>
      </xsl:if>
    </xsl:if>
  </xsl:template>

  <xsl:template match="video" mode="manifest">
    <xsl:if test="$vid and count(preceding::video[@id=current()/@id])=0">
      <item id="v_{translate(@id, ' ', '_')}1" href="{$vid_dir}{@id}{$vid_ext}">
        <xsl:attribute name="media-type">
          <xsl:text>video/</xsl:text>
          <xsl:choose>
            <xsl:when test="$vid_ext='.ogv'">ogg</xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="substring-after($vid_ext, '.')"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:attribute>
      </item>
    </xsl:if>
  </xsl:template>


  <!--
      *************************************************************************
                                        SPINE
      *************************************************************************
  -->
  <!--
      =========================================================================
      Template spine
      =========================================================================
  -->
  <xsl:template name="spine">
    <spine toc="ncx">
      <xsl:if test="$cover or head/cover">
        <itemref idref="h_{translate($fid, ' ', '_')}-cover" linear="no"/>
      </xsl:if>
      <itemref idref="h_{translate($fid, ' ', '_')}-nav" linear="no"/>
      <xsl:choose>
        <xsl:when test="$subtoc and division">
          <xsl:apply-templates select="division|topic|quiz" mode="spine"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:apply-templates select="//topic|//quiz" mode="spine"/>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:if test=".//note">
        <itemref idref="h_{translate($fid, ' ', '_')}-not" linear="no"/>
        <xsl:apply-templates select=".//note" mode="spine"/>
      </xsl:if>
    </spine>
  </xsl:template>

  <!--
      =========================================================================
      division, topic, quiz, note mode spine
      =========================================================================
  -->
  <xsl:template match="division" mode="spine">
    <itemref idref="h_{translate($fid, ' ', '_')}-div-{count(preceding::division)+1}"/>
    <xsl:apply-templates select=".//topic|.//quiz" mode="spine"/>
  </xsl:template>

  <xsl:template match="topic" mode="spine">
    <itemref idref="h_{translate($fid, ' ', '_')}-tpc-{count(preceding::topic)+1}"/>
  </xsl:template>

  <xsl:template match="quiz" mode="spine">
    <itemref idref="h_{translate($fid, ' ', '_')}-quz-{count(preceding::quiz)+1}"/>
  </xsl:template>

  <xsl:template match="note" mode="spine">
    <itemref idref="h_{translate($fid, ' ', '_')}-not-{count(preceding::note)+1}"
             linear="no"/>
  </xsl:template>

  <!--
      *************************************************************************
                                       GUIDE
      *************************************************************************
  -->
  <!--
      =========================================================================
      Template guide
      =========================================================================
  -->
  <xsl:template name="guide">
    <guide>
      <xsl:if test="head/cover or $cover">
        <reference type="cover" href="{$fid}-cover{$html_ext}" title="{$i18n_cover}"/>
      </xsl:if>
      <reference type="toc" href="{$fid}-nav{$html_ext}" title="{$i18n_toc}"/>
      <xsl:apply-templates select=".//topic" mode="guide"/>
    </guide>
  </xsl:template>

  <!--
      =========================================================================
      topic mode guide
      =========================================================================
  -->
  <xsl:template match="topic" mode="guide">
    <xsl:if test="@type='title' or @type='copyright'">
      <reference type="{@type}" href="{$fid}-tpc-{count(preceding::topic)+1}{$html_ext}"
                 title="{head/title}"/>
    </xsl:if>
  </xsl:template>

</xsl:stylesheet>
