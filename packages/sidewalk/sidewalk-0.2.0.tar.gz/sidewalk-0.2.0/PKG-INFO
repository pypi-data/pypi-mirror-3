Metadata-Version: 1.1
Name: sidewalk
Version: 0.2.0
Summary: The Simple Activity Aggregator.
Home-page: http://www.blakerohde.com/projects/sidewalk
Author: Blake Rohde
Author-email: blake@blakerohde.com
License: ISC
Download-URL: https://github.com/blakerohde/sidewalk/tarball/master
Description: Sidewalk: Simple Activity Aggregator
        ====================================
        
        Sidewalk allows you to trigger the execution of Python methods from the command-line.
        
        Simply register your activity processor (any defined method in any module) and you can execute it using the included command-line utilities ``sidewalk-conf.py`` and ``sidewalk-pave.py``, respectively.
        
        This comes in handy when you want to setup cron jobs to execute Python code. You can easily create multiple cron job entries that run at various times and call different activity processors.
        
        
        Documentation and Getting Started
        ---------------------------------
        
        Formal documentation is available on `Read the Docs <http://sidewalk.readthedocs.org/en/latest/>`_ and is also located in the ``docs/`` directory of the source code.
        
        Here is a quick run-down for how to get started:
        
        **Step 0) Create an activity processor.**
        
        - This can be any function defined in any module.
        - It is recommended that you create a local package to keep all of your activity processors in one location.
        - Sidewalk comes with a package ``sidewalk_activity_processors`` for you to use if you would like.
        - Note that in this sample package, ``sidewalk_activitiy_processors``, there is an activity processor 'hello' in the module 'example'.
        
        **Step 1) Create a settings file:**
        
        Before we can register our activity processors, we need to create and initialize a settings file. This file will contain a list of registered activity processors. It is up to you where to put the settings file. You can create a single settings file for an entire system, or create one for each of your projects. For right now, lets just create one in the current working directory:
        
        ::
        
                $ sidewalk-conf.py ./sidewalk.conf --init
        
        **Step 2) Register your activity processor:**
        
        ::
        
        	$ sidewalk-conf.py ./sidewalk.conf --add 'example.hello sidewalk_activity_processors.example.hello'
        
        - The sidwalk-conf.py command-line utility is your way to easily add, list/view, and remove activity processors.
        - Note that when adding your activity processors, you are creating a key association to the activity processor. Also note the syntax: 'example.hello', in this case, 'example' is the group and 'hello' is the name. Groups are useful for executing multiple activity processors in one go. See step 2 below for more information.
        
        **Step 3) Execute your activity processor:**
        
        ::
        
        	$ sidewalk-pave.py ./sidewalk.conf --activity-processor 'example.hello'
        
        - Here we are executing our activity processor 'example.hello'.
        - You can execute any number of activity processors in one call.
        - You can also select activity processors by group.
        
        
        Installation
        ------------
        
        Install Sidewalk via `pip <http://pypi.python.org/pypi/pip/>`_:
        
        ::
        
        	$ pip install sidewalk
        
        If needed, other methods of installing Sidewalk are noted in the `documentation <http://readthedocs.org/projects/sidewalk/>`_.
        
        
        Authors
        -------
        
        `Blake Rohde <http://www.blakerohde.com/>`_
        
        
        History
        -------
        
        0.2.0 (2012-06-30)
        ++++++++++++++++++
        
        - New Makefile for easier development testing
        - Sidewalk is production-ready; bumped version to 0.2.0
        - Documentation is now available under ``docs/``
        - Specifying a 'custom' settings file is now required; see the documentation for more information on this
        
        0.1.1 (2012-03-08)
        ++++++++++++++++++
        
        - Moved log functions into new module ``sidewalk.loggers``
        - Added exception for when custom settings file's don't have the required section(s)
        - ``sidewalk-conf.py --list`` now returns a sorted list
        
        0.1.0 (2012-03-08)
        ++++++++++++++++++
        
        - Updated README to better represent what it is that Sidewalk actually does
        - Added basic log functions and made error messages prettier
        - Created ``sidewalk.exceptions`` module and associated exceptions
        - Unhandled exceptions thrown by rogue activity processors are now caught
        - ``sidewalk-conf.py`` no longer rewrites configuration file if only ``--list`` is requested
        - Can now specify filename in ``sidewalk-conf.py`` and ``sidewalk-pave.py`` to use custom Sidewalk settings file/location
        
        0.0.1 (2012-03-04)
        ++++++++++++++++++
        
        - Initial release
        - Wanted initial commit message to read "Pikachu I commit you!" but I flubbed it up and put "Pikachu I choose you!" Oh well.
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Topic :: System :: Logging
Classifier: Topic :: System :: Monitoring
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: ISC License (ISCL)
Classifier: Natural Language :: English
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
