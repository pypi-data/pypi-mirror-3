import unittest

import sys
sys.path.append('..')

import rlfl
from maps.tmap import MAP as m
MAP, ORIGOS = m

class TestFov(unittest.TestCase):
    def setUp(self):
        rlfl.delete_all_maps()
        self.map = rlfl.create_map(len(MAP), len(MAP[0]))
        for row in range(len(MAP)):
            for col in range(len(MAP[row])):
                if MAP[row][col] != '#':
                    p = (row, col)
                    rlfl.set_flag(self.map, p, rlfl.CELL_SEEN) 
                    rlfl.set_flag(self.map, p, rlfl.CELL_OPEN) 
                    
    def test_basic(self):
        exp = [
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['--------------------------------S---------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['--------------------------------S---------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['----------------------------SSSSSSS-SS----------------------'],
            ['--------------------------SSSSSSSSSSSSS---------------------'],
            ['----------------------------S-SSSSS-S-----------------------'],
            ['-------------------------------SSS--------------------------'],
            ['--------------------------------S---------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['--------------------------------S---------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
        ]
        p = ORIGOS[1]
        rlfl.fov(self.map, p, 6, rlfl.FOV_CIRCULAR);
        self.match(exp)
        exp = [
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['--------SS--------------------------------------------------'],
            ['--------SSS-------------------------------------------------'],
            ['-------SSS--------------------------------------------------'],
            ['-----SSSS-S-------------------------------------------------'],
            ['-----SSSSSSSS-----------------------------------------------'],
            ['-----SSSS-S-------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
        ]
        p = ORIGOS[2]
        rlfl.fov(self.map, p, 6, rlfl.FOV_CIRCULAR);
        self.match(exp)
                    
    def test_shadowcasting(self):
        exp = [
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['---------------------------SSSSSSSSSSS----------------------'],
            ['--------------------------SSSSSSSSSSSSS---------------------'],
            ['---------------------------SSSSSSSSSSS----------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['--------------------------------S---------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
        ]
        p = ORIGOS[1]
        rlfl.fov(self.map, p, 6, rlfl.FOV_SHADOW);
        self.match(exp)
        exp = [
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['---------S--------------------------------------------------'],
            ['--------SSS-------------------------------------------------'],
            ['-------SSS--------------------------------------------------'],
            ['-----SSSSSSS------------------------------------------------'],
            ['-----SSSSSSSS-----------------------------------------------'],
            ['-----SSSSSSS------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
        ]
        p = ORIGOS[2]
        rlfl.fov(self.map, p, 6, rlfl.FOV_SHADOW);
        self.match(exp)
        
    def test_restrictive(self):
        exp = [
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['--------------------------SSSSSSSSSS-S----------------------'],
            ['--------------------------SSSSSSSSSSSSS---------------------'],
            ['--------------------------SSSSSSSSSSSSS---------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['--------------------------------S---------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
        ]
        p = ORIGOS[1]
        rlfl.fov(self.map, p, 6, rlfl.FOV_RESTRICTIVE);
        self.match(exp)
        
    def test_digital(self):
        exp = [
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['--------------------------SSSSSSSSSSSSS---------------------'],
            ['--------------------------SSSSSSSSSSSSS---------------------'],
            ['--------------------------SSSSSSSSSSSSS---------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
        ]
        p = ORIGOS[1]
        rlfl.fov(self.map, p, 6, rlfl.FOV_DIGITAL);
        self.match(exp)
        
    def test_diamond(self):
        exp = [
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
        ]
        p = ORIGOS[1]
        rlfl.fov(self.map, p, 6, rlfl.FOV_DIAMOND);
#        self.pr_map()
        
    def test_permissive(self):
        exp = [
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['--------------------------SSSSSSSSSSSSS---------------------'],
            ['--------------------------SSSSSSSSSSSSS---------------------'],
            ['--------------------------SSSSSSSSSSSSS---------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['-------------------------------SSS--------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
            ['------------------------------------------------------------'],
        ]
        p = ORIGOS[1]
        rlfl.fov(self.map, p, 6, rlfl.FOV_PERMISSIVE);
        self.match(exp)
        
    def test_input(self):
        algos = [
           rlfl.FOV_PERMISSIVE,
           rlfl.FOV_DIAMOND, 
           rlfl.FOV_DIGITAL,
           rlfl.FOV_RESTRICTIVE, 
           rlfl.FOV_SHADOW,
           rlfl.FOV_CIRCULAR, 
        ]
        test = (
            {
                'm': -1,
                'p': ORIGOS[1],
                'r': 6,
                's': 'Map not initialized'
            },
            {
                'm': 123,
                'p': ORIGOS[1],
                'r': 6,
                's': 'Map not initialized'
            },
            {
                'm': self.map,
                'p': (-1, -1),
                'r': 6,
                's': 'Location out of bounds'
            },
            {
                'm': self.map,
                'p': ORIGOS[1],
                'r': -100000,
                's': 'Illegal radius'
            },
        )
        for a in algos:
            for i in test:
                try:
                    rlfl.fov(i['m'], i['p'], i['r'], a);
                except Exception as e:
                    self.assertEqual(str(e), i['s'])
                    self.assertEqual(str(e.__class__), "<class 'rlfl.Error'>")
                else:
                    self.fail('Expected Exception: %s (%d)' % (i['s'], a))
        
    def match(self, emap):
       for row in range(len(MAP)):
            for col in range(len(MAP[row])):
                if rlfl.has_flag(self.map, (row, col), rlfl.CELL_SEEN):
                    self.assertEqual(emap[row][0][col], 'S')
                else:
                    self.assertEqual(emap[row][0][col], '-') 


if __name__ == '__main__':
    unittest.main()