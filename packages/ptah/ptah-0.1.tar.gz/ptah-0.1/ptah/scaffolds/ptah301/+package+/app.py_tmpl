from pyramid.config import Configurator
from pyramid.asset import abspath_from_asset_spec
from pyramid.authentication import AuthTktAuthenticationPolicy
from pyramid.session import UnencryptedCookieSessionFactoryConfig

import ptah

# Your custom application permissions
from {{package}}.permissions import Manager

# users
from {{package}}.auth import User, Session

# We will add Page during bootstrap of empty AppRoot
from {{package}}.page import Page

auth_policy = AuthTktAuthenticationPolicy('secret')
session_factory = UnencryptedCookieSessionFactoryConfig('secret')


class ApplicationRoot(ptah.cms.ApplicationRoot):
    """
    Application model which subclasses ptah.cms.ApplicationRoot
    """
    __type__ = ptah.cms.Type('{{package}}-app',
        title='Application Root',
        description='A root for the {{package}} Application')

APP_FACTORY = ptah.cms.ApplicationFactory(
    ApplicationRoot,
    name='root', 
    title='{{project}} Application')


def main(global_config, **settings):
    """ This is your application startup.
    """
    config = Configurator(root_factory=APP_FACTORY, settings=settings,
                          session_factory = session_factory,
                          authentication_policy = auth_policy)

    config.include('ptah')
    config.include('pyramid_tm')

    import sqlahelper, sqlalchemy
    engine = sqlalchemy.engine_from_config(settings, 'sqlalchemy.')
    sqlahelper.add_engine(engine)
    
    # you could use ptah.ptah_init() and be home by now
    # --- start ptah.ptah_init() ---
    config.ptah_initialize(('{{package}}', 'ptah'))
    config.commit()
    # --- end ptah.ptah_init() ---

    # create sql tables
    Base = sqlahelper.get_base()
    Base.metadata.create_all()

    # your application configuration
    root = APP_FACTORY()

    # admin user
    user = Session.query(User).first()
    if user is None:
        user = User('Admin', 'admin', 'admin@ptahproject.org', '12345')
        Session.add(user)

    # give manager role to admin
    if user.uri not in root.__local_roles__:
        root.__local_roles__[user.uri] = [Manager.id]
    
    # set authcontext as admin user
    ptah.authService.set_userid(user.uri)

    # create default page
    if 'front-page' not in root.keys():
        page = Page(title=u'Welcome to Ptah')
        page.text = open(
            abspath_from_asset_spec('{{package}}:welcome.pt'), 'rb').read()

        root['front-page'] = page

    # We are not in a web request; we need to manually commit.
    import transaction
    transaction.commit()

    # enable rest api
    ptah.enable_rest_api(config)

    # enable ptah-manage, see ptah.managers in .ini for users whom can access
    config.add_route(
        'ptah-manage','/ptah-manage/*traverse',
        factory=ptah.manage.PtahManageRoute, use_global_views=True)
    config.begin()
    ptah.manage.CONFIG['managers'] = ['admin']
    config.end()

    config.scan()

    return config.make_wsgi_app()
