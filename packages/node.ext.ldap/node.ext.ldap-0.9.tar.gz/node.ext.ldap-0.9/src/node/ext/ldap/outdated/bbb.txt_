# -*- coding: utf-8 -*-

LDAP Nodes
==========

::

    >>> from node.ext.ldap import LDAPProps
    >>> from node.ext.ldap import LDAPNode
    >>> from node.ext.ldap.testing import props

Create the root node. The Root node expects the initial base DN as name and
the server properties.
::

    >>> LDAPNode('dc=my-domain,dc=com')
    Traceback (most recent call last):
    ...
    ValueError: Wrong initialization.
  
    >>> LDAPNode(props=props)
    Traceback (most recent call last):
    ...
    ValueError: Wrong initialization.
  
    >>> root = LDAPNode('dc=my-domain,dc=com', props)
    >>> root
    <dc=my-domain,dc=com - False>

    The non-unicode name got decoded
    >>> root.__name__
    u'dc=my-domain,dc=com'
    
    >>> root.ldap_session
    <node.ext.ldap.session.LDAPSession object at ...>

Check child keys of root.
::

    >>> root.keys()
    [u'ou=customers']

Check/modify attributes of root.
::

    >>> root.attrs.items()
    [(u'objectClass', [u'top', u'dcObject', u'organization']),
     (u'dc', u'my-domain'),
     (u'o', u'my-organization')]

    >>> root.attrs['o'] = 'foo'
    >>> root()
    >>> root.attrs.items()
    [(u'objectClass', [u'top', u'dcObject', u'organization']),
     (u'dc', u'my-domain'),
     (u'o', u'foo')]
    >>> root.attrs['o'] = 'my-organization'
    >>> root()

Access inexistent child.
::

    >>> foo = root['foo']
    Traceback (most recent call last):
    ...
    KeyError: u'Entry not existent: foo'

Access existent child and it's attributes.
::
  
    >>> customers = root['ou=customers']
    >>> customers
    <ou=customers,dc=my-domain,dc=com:ou=customers - False>
  
    >>> customers.attributes.items()
    [(u'objectClass', [u'top', u'organizationalUnit']),
     (u'ou', u'customers')]
  
    >>> customers.DN
    u'ou=customers,dc=my-domain,dc=com'
  
    >>> customers.__name__
    u'ou=customers'
  
    >>> customers.keys()
    [u'ou=customer1', u'ou=customer2', u'ou=n\xe4sty\\, customer']
  
    >>> customers.changed
    False

Create a new LDAPNode and add it to customers.
::

    >>> customer = LDAPNode()
    >>> customer.attributes['ou'] = 'customer3'
    >>> customer.attributes['objectClass'] = ['top', 'organizationalUnit']
    >>> customer.DN
    u''
    >>> customer.ldap_session is None
    True
    
    >>> customers['ou=customer3'] = customer
    >>> customer.DN
    u'ou=customer3,ou=customers,dc=my-domain,dc=com'
    >>> root.ldap_session
    <node.ext.ldap.session.LDAPSession object at ...>

New entry has no childs, but was added to the parent. There
were an bug where iteration tried to load from ldap at this stage. Lets test
if this works
::
    >>> customer.keys()
    []     

Note that calling keys() of the container now, returns the already added key
anyway, since this is the sane state of the node structure, at least for
itself.
::

    >>> customers.keys()
    [u'ou=customer1', u'ou=customer2', u'ou=n\xe4sty\\, customer', u'ou=customer3']


The Container itself has changed.
::
 
    >>> customers.changed
    True

But there's no action on the container since a child was added and the
attributes of the contained has not been changed.
::

    >>> print customers._action
    None

The added child has been marked as changed as well.
::

    >>> customer.changed
    True

But there's also the action set that it has to be added.
::

    >>> from node.ext.ldap.bbb import ACTION_ADD, ACTION_MODIFY, ACTION_DELETE
  
    >>> customer._action == ACTION_ADD
    True

Check the directory state, not added yet.
::

    >>> res = customers._session.search('(objectClass=*)',
    ...                                 1,
    ...                                 baseDN=customers.DN,
    ...                                 force_reload=True)
    >>> len(res)
    3

On call the new entry is written to the directory.
::

    >>> root()

Now the new entry is present in the directory as well.
::

    >>> res = customers._session.search('(objectClass=*)',
    ...                                 1,
    ...                                 baseDN=customers.DN,
    ...                                 force_reload=True)
    >>> len(res)
    4

Add a person to test modification stuff.
::

    >>> person = LDAPNode()
    >>> person.attributes['objectClass'] = ['top', 'person']
    >>> person.attributes['sn'] = 'Mustermann'
    >>> person.attributes['cn'] = 'Max'
    >>> person.attributes['description'] = 'Initial Description'
    >>> customer['cn=max'] = person
    >>> customer.keys()
    [u'cn=max']
    >>> person.DN
    u'cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com'
  
Again, not in directory yet.
::

    >>> res = customer._session.search('(objectClass=person)',
    ...                                1,
    ...                                baseDN=customer.DN,
    ...                                force_reload=True)
    >>> len(res)
    0

The whole tree is now in changed state.
::

    >>> root.printtree()
    <dc=my-domain,dc=com - True>
      <ou=customers,dc=my-domain,dc=com:ou=customers - True>
        <ou=customer3,ou=customers,dc=my-domain,dc=com:ou=customer3 - True>
          <cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com:cn=max - True>

Let's also change the container of the person.
::

    >>> customer.attrs['street'] = 'foo'

And tell the person to commit its changes. The container (customer3) is still
changed because of its attributes.
::

    >>> person()
    >>> root.printtree()
    <dc=my-domain,dc=com - True>
      <ou=customers,dc=my-domain,dc=com:ou=customers - True>
        <ou=customer3,ou=customers,dc=my-domain,dc=com:ou=customer3 - True>
          <cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com:cn=max - False>

Now we change the person again and discard the attribute change of the
container. It must not delete the changed state of the whole tree, as the
person is still changed.
::

    >>> person.attrs['description'] = 'foo'
    >>> root.printtree()
    <dc=my-domain,dc=com - True>
      <ou=customers,dc=my-domain,dc=com:ou=customers - True>
        <ou=customer3,ou=customers,dc=my-domain,dc=com:ou=customer3 - True>
          <cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com:cn=max - True>
    >>> customer.attrs.load()
    >>> root.printtree()
    <dc=my-domain,dc=com - True>
      <ou=customers,dc=my-domain,dc=com:ou=customers - True>
        <ou=customer3,ou=customers,dc=my-domain,dc=com:ou=customer3 - True>
          <cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com:cn=max - True>

But after __call__.
::

    >>> customer()
    >>> root.printtree()
    <dc=my-domain,dc=com - False>
      <ou=customers,dc=my-domain,dc=com:ou=customers - False>
        <ou=customer3,ou=customers,dc=my-domain,dc=com:ou=customer3 - False>
          <cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com:cn=max - False>

Changing attributes on a node, where keys are not loaded, yet.
::

    >>> from node.ext.ldap.bbb import queryNode
    >>> tmp = queryNode(props, 'cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com')
    >>> tmp.attrs['description'] = 'Initial Description'
    >>> tmp()

Changing the rdn attribute fails, when committing (XXX: could be on assignment)
::
    >>> person.attrs['cn'] = 'foo'
    >>> person()
    Traceback (most recent call last):
    ...
    NAMING_VIOLATION:...

Recover from failure.
::

    >>> person.attrs.load()
    >>> person.attrs['cn']
    u'Max'

Create Customer convenience query function. Need this more than once.
::

    >>> def queryPersonDirectly():
    ...     res = customer._session.search('(objectClass=person)',
    ...                                    1,
    ...                                    baseDN=customer.DN,
    ...                                    force_reload=True)
    ...     return res
  
    >>> pprint(queryPersonDirectly())
    [(u'cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com',
      {u'cn': [u'Max'],
       u'description': [u'Initial Description'],
       u'objectClass': [u'top', u'person'],
       u'sn': [u'Mustermann']})]

Lets modify this person. First look at the flags.
::

    >>> root.changed, customer.changed, person.changed
    (False, False, False)
  
    >>> person._action

    >>> person.attributes.changed
    False

Now do modification.
::
    
    >>> person.attributes['description'] = 'Another description'
    >>> person.attributes.changed
    True
  
    >>> person._action == ACTION_MODIFY
    True

    >>> root.changed, customer.changed, person.changed
    (True, True, True)


Write changed to directory.
::

    >>> root()
    
Check the flags.
::

    >>> root.changed, customer.changed, person.changed
    (False, False, False)

And check the changes in the directory.
::

    >>> pprint(queryPersonDirectly())
    [(u'cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com',
      {u'cn': [u'Max'],
       u'description': [u'Another description'],
       u'objectClass': [u'top', u'person'],
       u'sn': [u'Mustermann']})]

Check removing of an attribute.
::  
    >>> root.changed, customer.changed, person.changed, \
    ... person.attributes.changed
    (False, False, False, False)

    >>> del person.attributes['description']
    >>> root.changed, customer.changed, person.changed, \
    ... person.attributes.changed
    (True, True, True, True)

We can call a node in the middle.
::

    >>> customer()
    >>> pprint(queryPersonDirectly())
    [(u'cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com',
      {u'cn': [u'Max'], u'objectClass': [u'top', u'person'], u'sn': [u'Mustermann']})]

    >>> root.changed, customer.changed, person.changed, \
    ... person.attributes.changed
    (False, False, False, False)

Check adding of an attribute.
::
    >>> person.attributes['description'] = u'Brandnew description'
    >>> root.changed, customer.changed, person.changed, \
    ... person.attributes.changed
    (True, True, True, True)

    >>> customer()
    >>> pprint(queryPersonDirectly())
    [(u'cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com',
      {u'cn': [u'Max'],
       u'description': [u'Brandnew description'],
       u'objectClass': [u'top', u'person'],
       u'sn': [u'Mustermann']})]

    >>> root.changed, customer.changed, person.changed, \
    ... person.attributes.changed
    (False, False, False, False)

Attribute with non-ascii unicode returns as is.
::
    >>> person.attributes['sn'] = u'i\u0107'
    >>> person()
    >>> queryPersonDirectly()[0][1]['sn'][0]
    u'i\u0107'

Attribute with non-ascii str (utf8) returns as unicode.
::
    >>> person.attributes['sn'] = 'i\xc4\x87'
    >>> person()
    >>> queryPersonDirectly()[0][1]['sn'][0]
    u'i\u0107'

# XXX: Don't test this until we have proper binary attr support
#Attribute with utf16 str fails.
#::
#    >>> person.attributes['sn'] = '\xff\xfei\x00\x07\x01'
#    Traceback (most recent call last):
#    ...
#    UnicodeDecodeError:
#      'utf8' codec can't decode byte 0xff in position 0: unexpected code byte

Check queryNode with nästy dn. (see node.__repr__)
::
    >>> node = queryNode(props, \
    ...     r'ou=nästy\, customer,ou=customers,dc=my-domain,dc=com')
    >>> node.__name__
    u'ou=n\xe4sty\\, customer'
    >>> node
    <ou=n?sty\2C customer,ou=Customers,dc=My-Domain,dc=com:ou=n?sty\, customer - False>
    >>> node.__parent__
    <ou=customers,dc=my-domain,dc=com - False>

Check access to attributes on a fresh but added-to-parent node. There were a bug
so we test it.
::

    >>> customerattrempty = LDAPNode()
    >>> customers['cn=customer99'] = customerattrempty
    >>> customerattrempty.attributes.keys()
    []

Add some attributes to make call work.
::
    
    >>> customerattrempty.attributes['objectClass'] = \
    ...     ['organizationalRole', 'simpleSecurityObject']
    >>> customerattrempty.attributes['userPassword'] = 'fooo'

Check deleting of entries.
::

    >>> root.printtree()
    <dc=my-domain,dc=com - True>
      <ou=customers,dc=my-domain,dc=com:ou=customers - True>
        <ou=customer3,ou=customers,dc=my-domain,dc=com:ou=customer3 - False>
          <cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com:cn=max - False>
        <cn=customer99,ou=customers,dc=my-domain,dc=com:cn=customer99 - True>

    >>> [k for k in customer._keys]
    [u'cn=max']

    >>> del customer['cn=max']
    >>> root.changed, customer.changed, person.changed, \
    ... person.attributes.changed
    (True, True, True, False)
    
    >>> [k for k in customer._keys]
    []

    >>> root.printtree()
    <dc=my-domain,dc=com - True>
      <ou=customers,dc=my-domain,dc=com:ou=customers - True>
        <ou=customer3,ou=customers,dc=my-domain,dc=com:ou=customer3 - True>
          <cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com:cn=max - True>
        <cn=customer99,ou=customers,dc=my-domain,dc=com:cn=customer99 - True>
    
    >>> customer()
    >>> queryPersonDirectly()
    []
    
    >>> root.printtree()
    <dc=my-domain,dc=com - True>
      <ou=customers,dc=my-domain,dc=com:ou=customers - True>
        <ou=customer3,ou=customers,dc=my-domain,dc=com:ou=customer3 - False>
        <cn=customer99,ou=customers,dc=my-domain,dc=com:cn=customer99 - True>

    >>> root.changed, customer.changed
    (True, False)
    
    >>> customerattrempty()
    
    >>> root.printtree()
    <dc=my-domain,dc=com - False>
      <ou=customers,dc=my-domain,dc=com:ou=customers - False>
        <ou=customer3,ou=customers,dc=my-domain,dc=com:ou=customer3 - False>
        <cn=customer99,ou=customers,dc=my-domain,dc=com:cn=customer99 - False>


XXXXX Experimental features below here XXXXXXXXXXXXXXXXX

Using some other attribute as key, instead of the RDN. Let's first add two
person's the way we know it.
::

    >>> p1 = LDAPNode()
    >>> p1.attrs['objectClass'] = ['top', 'person']
    >>> p1.attrs['sn'] = 'Mustermann'
    >>> p1.attrs['cn'] = 'Max'
    >>> p1.attrs['description'] = 'Initial Description'
    >>> customer['cn=max'] = p1
    >>> p2 = LDAPNode()
    >>> p2.attrs['objectClass'] = ['top', 'person']
    >>> p2.attrs['sn'] = 'Mueller'
    >>> p2.attrs['cn'] = 'Moritz'
    >>> p2.attrs['description'] = 'Initial Description'
    >>> customer['cn=Moritz'] = p2
    >>> customer()
    >>> customer.keys()
    [u'cn=max', u'cn=Moritz']

Now choose some attribute as key, its value needs to be unique - XXX This is an
experimental feature, there must not be any childs listing this node as a
__parent__!
::

    >>> node = LDAPNode(props=props, name=customer.DN)
    >>> node._key_attr = 'description'
    >>> node.keys()
    Traceback (most recent call last):
    ...
    RuntimeError: Key not unique: description='Initial Description'.

    >>> node = LDAPNode(props=props, name=customer.DN)
    >>> node._key_attr = 'sn'
    >>> node.keys()
    [u'Mustermann', u'Mueller']

Childs can be retrieved normally.
::

    >>> our_p1 = node['Mustermann']
    >>> our_p1
    <cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com:Mustermann - False>

The node is the real parent.
::

    >>> our_p1.__parent__ is node
    True

The child knows its correct DN.
::

    >>> our_p1.DN
    u'cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com'

We can change attributes.
::

    >>> our_p1.attrs['description'] = 'foo'
    >>> root.printtree()
    <dc=my-domain,dc=com - False>
      <ou=customers,dc=my-domain,dc=com:ou=customers - False>
        <ou=customer3,ou=customers,dc=my-domain,dc=com:ou=customer3 - False>
          <cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com:cn=max - False>
          <cn=Moritz,ou=customer3,ou=customers,dc=my-domain,dc=com:cn=Moritz - False>
        <cn=customer99,ou=customers,dc=my-domain,dc=com:cn=customer99 - False>
    >>> node.printtree()
    <ou=customer3,ou=customers,dc=my-domain,dc=com - True>
      <cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com:Mustermann - True>
    >>> our_p1()
    >>> node.printtree()
    <ou=customer3,ou=customers,dc=my-domain,dc=com - False>
      <cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com:Mustermann - False>
    >>> p1.attrs.load()
    >>> p1.attrs['description']
    u'foo'

Addings items, iff _rdn_attr is set.
::

    >>> node['foo'] = LDAPNode()
    Traceback (most recent call last):
    ...
    RuntimeError: Adding with key != rdn needs _rdn_attr to be set.

    >>> node._rdn_attr = 'cn'
    >>> node['foo'] = LDAPNode()
    Traceback (most recent call last):
    ...
    ValueError: 'cn' needed in node attributes for rdn.

    >>> newnode = LDAPNode()
    >>> newnode.attrs['cn'] = 'newnode'

# XXX: shouldn't this be configured somewhere?

    >>> newnode.attrs['objectClass'] = ['top', 'person']

# XXX: these need to be the same as 'sn' is used as key

    >>> newnode.attrs['sn'] = 'foo'
    >>> node['foo'] = newnode

    >>> node.keys()
    [u'Mustermann', u'Mueller', u'foo']

    >>> node['foo'] is newnode
    True

    >>> node is newnode.__parent__
    True

    >>> newnode.__name__ == 'foo'
    True

Commit the added node.
::

    >>> node.printtree()
    <ou=customer3,ou=customers,dc=my-domain,dc=com - True>
      <cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com:Mustermann - False>
      <cn=newnode,ou=customer3,ou=customers,dc=my-domain,dc=com:foo - True>

    >>> node()
    >>> node.printtree()
    <ou=customer3,ou=customers,dc=my-domain,dc=com - False>
      <cn=max,ou=customer3,ou=customers,dc=my-domain,dc=com:Mustermann - False>
      <cn=newnode,ou=customer3,ou=customers,dc=my-domain,dc=com:foo - False>

    >>> node._reload = True
    >>> node.keys()
    [u'Mustermann', u'Mueller', u'foo']

    >>> node['foo'].attrs.items()
    [(u'objectClass', [u'top', u'person']),
     (u'cn', u'newnode'),
     (u'sn', u'foo')]


And deleting again.
::

    >>> del node['Mueller']
    >>> del node['foo']
    >>> node()
    >>> node.keys()
    [u'Mustermann']
    >>> node()

    >>> customer._reload = True
    >>> customer.keys()
    [u'cn=max']

Using filter and scope. Let's first create a collision.
::

    >>> tmp = LDAPNode()
    >>> tmp.attributes['ou'] = 'customer3'
    >>> tmp.attributes['objectClass'] = ['top', 'organizationalUnit']
    >>> root['ou=customer3'] = tmp
    >>> root()

    >>> from node.ext.ldap import SUBTREE
    >>> node = LDAPNode(props=props, name=root.DN)
    >>> node._child_scope = SUBTREE
    >>> node.keys()
    Traceback (most recent call last):
    ...
    RuntimeError: Key not unique: rdn='ou=customer3'.

We need a different key. As a side-effect a filter will be used: '(cn=*)'
::

    >>> node = LDAPNode(props=props, name=root.DN)
    >>> node._child_scope = SUBTREE
    >>> node._key_attr = 'cn'
    >>> node._rdn_attr = 'cn'
    >>> node._child_objectClasses = ['top', 'person']
    >>> node.keys()
    [u'customer99', u'Max']

Again, we can query/change/delete these.
::

    >>> max = node['Max']
    >>> node['Max'].attrs['description'] = 'bar'
    >>> node()
    >>> max.attrs['description']
    u'bar'

New entries in case of scope SUBTREE are added in the ONELEVEL scope::

    >>> newnode = LDAPNode()
    >>> newnode.attrs['sn'] = 'foosn'
    >>> node['foo'] = newnode
    >>> node['foo'] is newnode
    True
    >>> newnode.DN
    u'cn=foo,dc=my-domain,dc=com'
    >>> node.DN
    u'dc=my-domain,dc=com'

    >>> del node['Max']
    >>> node()
    >>> node.keys()
    [u'customer99', u'foo']

    >>> node = LDAPNode(props=props, name=root.DN)
    >>> node['cn=foo'].attrs['objectClass']
    [u'top', u'person']
