(dp0
S'TComputeDomainContingency_ImputeWithClassifier'
p1
(i__main__
ClassDefinition
p2
(dp3
S'extended'
p4
I1
sS'imported'
p5
I01
sS'name'
p6
g1
sS'parent'
p7
S'TComputeDomainContingency'
p8
sS'abstract'
p9
I00
sS'components'
p10
(lp11
sS'properties'
p12
(lp13
(S'TLearner'
p14
S'learnerForDiscrete'
p15
S'learner_for_discrete'
p16
S'constructs a classifier for imputation of discrete values'
p17
I0
I0
I00
Ntp18
a(S'TLearner'
p19
S'learnerForContinuous'
p20
S'learner_for_continuous'
p21
S'constructs a classifier for imputation of continuous values'
p22
I0
I0
I00
Ntp23
a(S'bool'
p24
S'classIsOuter'
p25
S'class_is_outer'
p26
S'tells whether the class is the outer variable in contingencies'
p27
I0
I0
I01
Ntp28
asS'constants'
p29
(dp30
sbsS'TRuleDataStoppingCriteria_NoPositives'
p31
(i__main__
ClassDefinition
p32
(dp33
g4
I1
sg5
I01
sg6
g31
sg7
S'TRuleDataStoppingCriteria'
p34
sg9
I00
sg10
(lp35
sg12
(lp36
sg29
(dp37
sbsS'TExampleCluster'
p38
(i__main__
ClassDefinition
p39
(dp40
g4
I1
sg5
I01
sg6
g38
sg7
S'TOrange'
p41
sg9
I00
sg10
(lp42
sg12
(lp43
(S'TExampleCluster'
p44
S'left'
p45
g45
S"'left' cluster"
p46
I0
I0
I00
Ntp47
a(S'TExampleCluster'
p48
S'right'
p49
g49
S"'right' cluster"
p50
I0
I0
I00
Ntp51
a(S'float'
p52
S'distance'
p53
g53
S'distance between the two clusters (not defined for leaves)'
p54
I0
I0
I01
Ntp55
a(S'TExample'
p56
S'centroid'
p57
g57
S"cluster's centroid (always defined for leaves)"
p58
I0
I0
I00
Ntp59
asg29
(dp60
sbsS'TClassifierByLookupTableN'
p61
(i__main__
ClassDefinition
p62
(dp63
g4
I1
sg5
I01
sg6
g61
sg7
S'TClassifierByLookupTable'
p64
sg9
I00
sg10
(lp65
sg12
(lp66
(S'TVarList'
p67
S'variables'
p68
g68
S'attributes'
p69
I01
I0
I00
Ntp70
a(S'TIntList'
p71
S'noOfValues'
p72
S'no_of_values'
p73
S'number of values for each attribute'
p74
I01
I0
I00
Ntp75
a(S'TEFMDataDescription'
p76
S'dataDescription'
p77
S'data_description'
p78
S'data description'
p79
I0
I0
I00
Ntp80
a(S'TValueList'
p81
S'lookupTable'
p82
S'lookup_table'
p83
S'a list of class values, one for each attribute value'
p84
I01
I0
I00
Ntp85
a(S'TDistributionList'
p86
S'distributions'
p87
g87
S'a list of class distributions, one for each attribute value'
p88
I01
I0
I00
Ntp89
a(S'TVariable'
p90
S'classVar'
p91
S'class_var'
p92
S'class variable'
p93
I0
I0
I00
Ntp94
a(S'bool'
p95
S'computesProbabilities'
p96
S'computes_probabilities'
p97
S'set if classifier computes class probabilities (if not, it assigns 1.0 to the predicted)'
p98
I0
I0
I01
Ntp99
asg29
(dp100
sbsS'TLearner_Python'
p101
(i__main__
ClassDefinition
p102
(dp103
g4
I1
sg5
I01
sg6
g101
sg7
S'TLearner'
p104
sg9
I00
sg10
(lp105
sg12
(lp106
(S'int'
p107
S'needs'
p108
g108
S'the kind of data that learner needs'
p109
I01
I0
I01
Ntp110
asg29
(dp111
sbsS'TSammonStress'
p112
(i__main__
ClassDefinition
p113
(dp114
g4
I1
sg5
I0
sg6
g112
sg7
S'TStressFunc'
p115
sg9
I00
sg10
(lp116
sg12
(lp117
sg29
(dp118
sbsS'TConditionalProbabilityEstimator_FromDistribution'
p119
(i__main__
ClassDefinition
p120
(dp121
g4
I1
sg5
I01
sg6
g119
sg7
S'TConditionalProbabilityEstimator'
p122
sg9
I00
sg10
(lp123
sg12
(lp124
(S'TContingency'
p125
S'probabilities'
p126
g126
S'Contingency that stores conditional probabilities'
p127
I0
I0
I00
Ntp128
a(S'bool'
p129
S'supportsDiscrete'
p130
S'supports_discrete'
p131
S'can estimate probabilities of discrete attributes'
p132
I01
I0
I01
Ntp133
a(S'bool'
p134
S'supportsContinuous'
p135
S'supports_continuous'
p136
S'can estimate probabilities of continuous attributes'
p137
I01
I0
I01
Ntp138
asg29
(dp139
sbsS'THeatmapList'
p140
(ipyprops
ClassDefinition
p141
(dp142
g4
I0
sg5
I01
sg6
g140
sg7
S'TOrange'
p143
sg9
I0
sg10
(lp144
sg12
(lp145
sg29
(dp146
sbsS'TFeatureInducer'
p147
(i__main__
ClassDefinition
p148
(dp149
g4
I1
sg5
I01
sg6
g147
sg7
S'TOrange'
p150
sg9
I01
sg10
(lp151
sg12
(lp152
sg29
(dp153
sbsS'TImputerConstruct_Python'
p154
(i__main__
ClassDefinition
p155
(dp156
g4
I1
sg5
I01
sg6
g154
sg7
S'TImputerConstructor'
p157
sg9
I00
sg10
(lp158
sg12
(lp159
(S'bool'
p160
S'imputeClass'
p161
S'impute_class'
p162
S'tells whether to impute the class value (default: true)'
p163
I0
I0
I01
Ntp164
asg29
(dp165
sbsS'TExampleGeneratorList'
p166
(ipyprops
ClassDefinition
p167
(dp168
g4
I0
sg5
I01
sg6
g166
sg7
g143
sg9
I0
sg10
(lp169
sg12
(lp170
sg29
(dp171
sbsS'TIMByRowsConstructor'
p172
(i__main__
ClassDefinition
p173
(dp174
g4
I1
sg5
I01
sg6
g172
sg7
S'TOrange'
p175
sg9
I01
sg10
(lp176
sg12
(lp177
sg29
(dp178
sbsS'TSubsetsGenerator_withRestrictions'
p179
(i__main__
ClassDefinition
p180
(dp181
g4
I1
sg5
I01
sg6
g179
sg7
S'TSubsetsGenerator'
p182
sg9
I00
sg10
(lp183
sg12
(lp184
(S'TSubsetsGenerator'
p185
S'subGenerator'
p186
S'sub_generator'
p187
S'subset generator'
p188
I0
I0
I00
Ntp189
a(S'TVarList'
p190
S'required'
p191
g191
S'set of required attributes'
p192
I0
I0
I00
Ntp193
a(S'TVarList'
p194
S'forbidden'
p195
g195
S'set of forbidden attributes'
p196
I0
I0
I00
Ntp197
a(S'TVarListList'
p198
S'forbiddenSubSubsets'
p199
S'forbidden_sub_subsets'
p200
S'set of forbidden subsets (attributes that must not occur together)'
p201
I0
I0
I00
Ntp202
a(S'TVarList'
p203
S'varList'
p204
S'var_list'
p205
S'a set of attributes from which subsets are generated'
p206
I0
I0
I00
Ntp207
asg29
(dp208
sbsS'TEVDistList'
p209
(ipyprops
ClassDefinition
p210
(dp211
g4
I0
sg5
I01
sg6
g209
sg7
g143
sg9
I0
sg10
(lp212
sg12
(lp213
sg29
(dp214
sbsS'TValueFilterList'
p215
(ipyprops
ClassDefinition
p216
(dp217
g4
I0
sg5
I01
sg6
g215
sg7
g143
sg9
I0
sg10
(lp218
sg12
(lp219
sg29
(dp220
sbsS'TRuleBeamFilter_Python'
p221
(i__main__
ClassDefinition
p222
(dp223
g4
I1
sg5
I01
sg6
g221
sg7
S'TRuleBeamFilter'
p224
sg9
I00
sg10
(lp225
sg12
(lp226
sg29
(dp227
sbsS'TTreeExampleSplitter'
p228
(i__main__
ClassDefinition
p229
(dp230
g4
I1
sg5
I01
sg6
g228
sg7
S'TOrange'
p231
sg9
I01
sg10
(lp232
sg12
(lp233
sg29
(dp234
sbsS'TSVMClassifier'
p235
(i__main__
ClassDefinition
p236
(dp237
g4
I1
sg5
I01
sg6
g235
sg7
S'TClassifierFD'
p238
sg9
I00
sg10
(lp239
sg12
(lp240
(S'TIntList'
p241
S'nSV'
p242
S'n_SV'
p243
S'nSV'
p244
I0
I0
I00
Ntp245
a(S'TFloatList'
p246
S'rho'
p247
g247
S'rho'
p248
I0
I0
I00
Ntp249
a(S'TFloatListList'
p250
S'coef'
p251
g251
S'coef'
p252
I0
I0
I00
Ntp253
a(S'TFloatList'
p254
S'probA'
p255
S'prob_a'
p256
S'probA - pairwise probability information'
p257
I0
I0
I00
Ntp258
a(S'TFloatList'
p259
S'probB'
p260
S'prob_b'
p261
S'probB - pairwise probability information'
p262
I0
I0
I00
Ntp263
a(S'TExampleTable'
p264
S'supportVectors'
p265
S'support_vectors'
p266
S'support vectors'
p267
I0
I0
I00
Ntp268
a(S'TExampleTable'
p269
S'examples'
p270
g270
S'examples used to train the classifier'
p271
I0
I0
I00
Ntp272
a(S'TKernelFunc'
p273
S'kernelFunc'
p274
S'kernel_func'
p275
S'custom kernel function'
p276
I0
I0
I00
Ntp277
a(S'int'
p278
S'svm_type'
p279
g279
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p280
I0
I0
I01
S'SVMLearner_SVMType'
p281
tp282
a(S'int'
p283
S'kernel_type'
p284
g284
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p285
I0
I0
I01
S'SVMLearner_Kernel'
p286
tp287
a(S'TDomain'
p288
S'domain'
p289
g289
S'domain'
p290
I0
I0
I00
Ntp291
ag94
ag99
asg29
(dp292
sbsS'TFilteredGenerator'
p293
(i__main__
ClassDefinition
p294
(dp295
g4
I1
sg5
I01
sg6
g293
sg7
S'TAdapterGenerator'
p296
sg9
I00
sg10
(lp297
sg12
(lp298
(S'TFilter'
p299
S'filter'
p300
g300
S'decides which examples are skipped'
p301
I0
I0
I00
Ntp302
a(S'TDomain'
p303
S'domain'
p304
g304
S'domain'
p305
I0
I0
I00
Ntp306
a(S'int'
p307
S'version'
p308
g308
S'unique version identifier'
p309
I01
I0
I01
Ntp310
asg29
(dp311
sbsS'TPythonVariable'
p312
(i__main__
ClassDefinition
p313
(dp314
g4
I1
sg5
I01
sg6
g312
sg7
S'TVariable'
p315
sg9
I00
sg10
(lp316
sg12
(lp317
(S'bool'
p318
S'usePickle'
p319
S'use_pickle'
p320
S'tells whether to use pickle for saving to/loading from files'
p321
I0
I0
I01
Ntp322
a(S'bool'
p323
S'useSomeValue'
p324
S'use_some_value'
p325
S'tells whether the Variable will operate on Value or SomeValue (default)'
p326
I0
I0
I01
Ntp327
a(S'int'
p328
S'varType'
p329
S'var_type'
p330
S' variable type'
p331
I0
I0
I01
S'Variable_Type'
p332
tp333
a(S'bool'
p334
S'ordered'
p335
g335
S'variable values are ordered'
p336
I0
I0
I01
Ntp337
a(S'bool'
p338
S'distributed'
p339
g339
S'variable values are distributions'
p340
I0
I0
I01
Ntp341
a(S'int'
p342
S'defaultMetaId'
p343
S'default_meta_id'
p344
S'default (proposed, suggested...) meta id for this variable'
p345
I0
I0
I01
Ntp346
a(S'TRandomGenerator'
p347
S'randomGenerator'
p348
S'random_generator'
p349
S'random generator for random values (initialized when first needed)'
p350
I0
I0
I00
Ntp351
a(S'TVariable'
p352
S'sourceVariable'
p353
S'source_variable'
p354
S'The attribute that this attribute is computed from (when applicable)'
p355
I0
I0
I00
Ntp356
a(S'TClassifier'
p357
S'getValueFrom'
p358
S'get_value_from'
p359
S'Function to compute the value from values of other variables'
p360
I0
I0
I00
Ntp361
asg29
(dp362
sbsS'TTreeLearner'
p363
(i__main__
ClassDefinition
p364
(dp365
g4
I1
sg5
I01
sg6
g363
sg7
S'TLearner'
p366
sg9
I00
sg10
(lp367
sg12
(lp368
(S'TTreeSplitConstructor'
p369
S'split'
p370
g370
S'split criterion'
p371
I0
I0
I00
Ntp372
a(S'TTreeStopCriteria'
p373
S'stop'
p374
g374
S'stop criterion'
p375
I0
I0
I00
Ntp376
a(S'TComputeDomainContingency'
p377
S'contingencyComputer'
p378
S'contingency_computer'
p379
S'computes contingency matrix'
p380
I0
I0
I00
Ntp381
a(S'TLearner'
p382
S'nodeLearner'
p383
S'node_learner'
p384
S'node learner'
p385
I0
I0
I00
Ntp386
a(S'TTreeExampleSplitter'
p387
S'exampleSplitter'
p388
S'example_splitter'
p389
S'splits examples to branches'
p390
I0
I0
I00
Ntp391
a(S'int'
p392
S'maxDepth'
p393
S'max_depth'
p394
S'maximal tree depth (0 = root only, -1 = no limit)'
p395
I0
I0
I01
Ntp396
a(S'bool'
p397
S'storeExamples'
p398
S'store_examples'
p399
S'if true (default: false), learning examples in nodes are stored'
p400
I0
I0
I01
Ntp401
a(S'bool'
p402
S'storeDistributions'
p403
S'store_distributions'
p404
S'if true (default), class distributions of learning examples in nodes are stored'
p405
I0
I0
I01
Ntp406
a(S'bool'
p407
S'storeContingencies'
p408
S'store_contingencies'
p409
S'if true (default), contingency matrices for examples are stored'
p410
I0
I0
I01
Ntp411
a(S'bool'
p412
S'storeNodeClassifier'
p413
S'store_node_classifier'
p414
S'if true (default), the internal nodes have classifiers; needed for pruning'
p415
I0
I0
I01
Ntp416
a(S'TTreeDescender'
p417
S'descender'
p418
g418
S'descends down the tree'
p419
I0
I0
I00
Ntp420
ag110
asg29
(dp421
sbsS'TPreprocessor_shuffle'
p422
(i__main__
ClassDefinition
p423
(dp424
g4
I1
sg5
I01
sg6
g422
sg7
S'TPreprocessor'
p425
sg9
I00
sg10
(lp426
sg12
(lp427
(S'TVarList'
p428
S'attributes'
p429
g429
S'tells which attributes to shuffle'
p430
I0
I0
I00
Ntp431
a(S'TRandomGenerator'
p432
S'randomGenerator'
p433
S'random_generator'
p434
S'random number generator'
p435
I0
I0
I00
Ntp436
asg29
(dp437
sbsS'TLearner'
p438
(i__main__
ClassDefinition
p439
(dp440
g4
I1
sg5
I01
sg6
g438
sg7
S'TOrange'
p441
sg9
I00
sg10
(lp442
sg12
(lp443
g110
asg29
(dp444
sbsS'TExamplesDistance_Maximal'
p445
(i__main__
ClassDefinition
p446
(dp447
g4
I1
sg5
I01
sg6
g445
sg7
S'TExamplesDistance_Normalized'
p448
sg9
I00
sg10
(lp449
sg12
(lp450
(S'TAttributedFloatList'
p451
S'normalizers'
p452
g452
S'normalizing factors for attributes'
p453
I0
I0
I00
Ntp454
a(S'TAttributedFloatList'
p455
S'bases'
p456
g456
S'lowest values for attributes'
p457
I0
I0
I00
Ntp458
a(S'TAttributedFloatList'
p459
S'averages'
p460
g460
S'average values for continuous attribute values'
p461
I0
I0
I00
Ntp462
a(S'TAttributedFloatList'
p463
S'variances'
p464
g464
S'variations for continuous attribute values'
p465
I0
I0
I00
Ntp466
a(S'int'
p467
S'domainVersion'
p468
S'domain_version'
p469
S'version of domain on which the ranges were computed'
p470
I0
I0
I01
Ntp471
a(S'bool'
p472
S'normalize'
p473
g473
S'tells whether to normalize distances between attributes'
p474
I0
I0
I01
Ntp475
a(S'bool'
p476
S'ignoreUnknowns'
p477
S'ignore_unknowns'
p478
S'if true (default: false) unknown values are ignored in computation'
p479
I0
I0
I01
Ntp480
asg29
(dp481
sbsS'TSubsetsGenerator_withRestrictions_iterator'
p482
(i__main__
ClassDefinition
p483
(dp484
g4
I1
sg5
I01
sg6
g482
sg7
S'TSubsetsGenerator_iterator'
p485
sg9
I00
sg10
(lp486
sg12
(lp487
(S'TSubsetsGenerator_iterator'
p488
S'subGenerator_iterator'
p489
S'sub_generator_iterator'
p490
S'subset generator'
p491
I0
I0
I00
Ntp492
a(S'TVarList'
p493
S'required'
p494
g494
S'set of required attributes'
p495
I0
I0
I00
Ntp496
a(S'TVarList'
p497
S'forbidden'
p498
g498
S'set of forbidden attributes'
p499
I0
I0
I00
Ntp500
a(S'TVarListList'
p501
S'forbiddenSubSubsets'
p502
S'forbidden_sub_subsets'
p503
S'set of forbidden subsets (attributes that must not occur together)'
p504
I0
I0
I00
Ntp505
a(S'TVarList'
p506
S'varList'
p507
S'var_list'
p508
S'a set of attributes from which subsets are generated'
p509
I0
I0
I00
Ntp510
asg29
(dp511
sbsS'TPreprocessor_discretize'
p512
(i__main__
ClassDefinition
p513
(dp514
g4
I1
sg5
I01
sg6
g512
sg7
S'TPreprocessor'
p515
sg9
I00
sg10
(lp516
sg12
(lp517
(S'TVarList'
p518
S'attributes'
p519
g519
S'attributes to be discretized (all, if not defined or empty)'
p520
I0
I0
I00
Ntp521
a(S'bool'
p522
S'discretizeClass'
p523
S'discretize_class'
p524
S'also discretize the class attribute (default: false)'
p525
I0
I0
I01
Ntp526
a(S'TDiscretization'
p527
S'method'
p528
g528
S'discretization method'
p529
I0
I0
I00
Ntp530
asg29
(dp531
sbsS'TRuleClassifier_logit'
p532
(i__main__
ClassDefinition
p533
(dp534
g4
I1
sg5
I01
sg6
g532
sg7
S'TRuleClassifier'
p535
sg9
I00
sg10
(lp536
sg12
(lp537
(S'TDistribution'
p538
S'prior'
p539
g539
S'prior distribution'
p540
I0
I0
I00
Ntp541
a(S'TDomain'
p542
S'domain'
p543
g543
S'Domain'
p544
I0
I0
I00
Ntp545
a(S'TFloatList'
p546
S'ruleBetas'
p547
S'rule_betas'
p548
S'Rule betas'
p549
I0
I0
I00
Ntp550
a(S'float'
p551
S'minStep'
p552
S'min_step'
p553
S'minimal step value'
p554
I0
I0
I01
Ntp555
a(S'float'
p556
S'minSignificance'
p557
S'min_significance'
p558
S'minimum requested significance for betas. '
p559
I0
I0
I01
Ntp560
a(S'float'
p561
S'minBeta'
p562
S'min_beta'
p563
S'minimum beta by rule to be included in the model. '
p564
I0
I0
I01
Ntp565
a(S'TClassifier'
p566
S'priorClassifier'
p567
S'prior_classifier'
p568
S'prior classifier used if provided'
p569
I0
I0
I00
Ntp570
a(S'TRuleList'
p571
S'prefixRules'
p572
S'prefix_rules'
p573
S'rules that trigger before logit sum.'
p574
I0
I0
I00
Ntp575
a(S'TRuleList'
p576
S'rules'
p577
g577
S''
p578
I0
I0
I00
Ntp579
a(S'TExampleTable'
p580
S'examples'
p581
g581
g578
I0
I0
I00
Ntp582
a(S'int'
p583
S'weightID'
p584
S'weight_ID'
p585
g578
I0
I0
I01
Ntp586
ag94
ag99
asg29
(dp587
sbsS'TProgressCallback_Python'
p588
(i__main__
ClassDefinition
p589
(dp590
g4
I1
sg5
I01
sg6
g588
sg7
S'TProgressCallback'
p591
sg9
I00
sg10
(lp592
sg12
(lp593
sg29
(dp594
sbsS'TImputeClassifier'
p595
(i__main__
ClassDefinition
p596
(dp597
g4
I1
sg5
I01
sg6
g595
sg7
S'TClassifier'
p598
sg9
I00
sg10
(lp599
sg12
(lp600
(S'TClassifierFromVar'
p601
S'classifierFromVar'
p602
S'classifier_from_var'
p603
S'ClassifierFromVar that is used to retrieve defined values'
p604
I0
I0
I00
Ntp605
a(S'TClassifier'
p606
S'imputer'
p607
g607
S'classifier that is used to determine the missing values '
p608
I0
I0
I00
Ntp609
ag94
ag99
asg29
(dp610
sbsS'TStopDistributionClustering'
p611
(i__main__
ClassDefinition
p612
(dp613
g4
I1
sg5
I01
sg6
g611
sg7
S'TOrange'
p614
sg9
I01
sg10
(lp615
sg12
(lp616
sg29
(dp617
sbsS'TFilterList'
p618
(ipyprops
ClassDefinition
p619
(dp620
g4
I0
sg5
I01
sg6
g618
sg7
g143
sg9
I0
sg10
(lp621
sg12
(lp622
sg29
(dp623
sbsS'TPythonValue'
p624
(i__main__
ClassDefinition
p625
(dp626
g4
I1
sg5
I01
sg6
g624
sg7
S'TSomeValue'
p627
sg9
I00
sg10
(lp628
sg12
(lp629
sg29
(dp630
sbsS'TAssociationRulesSparseInducer'
p631
(i__main__
ClassDefinition
p632
(dp633
g4
I1
sg5
I01
sg6
g631
sg7
S'TOrange'
p634
sg9
I00
sg10
(lp635
sg12
(lp636
(S'int'
p637
S'maxItemSets'
p638
S'max_item_sets'
p639
S'maximal number of itemsets (increase if you want)'
p640
I0
I0
I01
Ntp641
a(S'float'
p642
S'confidence'
p643
g643
S'required confidence'
p644
I0
I0
I01
Ntp645
a(S'float'
p646
S'support'
p647
g647
S'required support'
p648
I0
I0
I01
Ntp649
a(S'bool'
p650
S'storeExamples'
p651
S'store_examples'
p652
S'stores examples corresponding to rules'
p653
I0
I0
I01
Ntp654
asg29
(dp655
sbsS'TFilter_sameExample'
p656
(i__main__
ClassDefinition
p657
(dp658
g4
I1
sg5
I01
sg6
g656
sg7
S'TFilter'
p659
sg9
I00
sg10
(lp660
sg12
(lp661
(S'TExample'
p662
S'example'
p663
g663
S'example with which examples are compared'
p664
I0
I0
I00
Ntp665
a(S'bool'
p666
S'negate'
p667
g667
S'if true, filter output should be negated.'
p668
I0
I0
I01
Ntp669
a(S'TDomain'
p670
S'domain'
p671
g671
S'domain to which the examples are converted (if needed)'
p672
I0
I0
I00
Ntp673
asg29
(dp674
sbsS'TRuleClassifierConstructor'
p675
(i__main__
ClassDefinition
p676
(dp677
g4
I1
sg5
I01
sg6
g675
sg7
S'TOrange'
p678
sg9
I01
sg10
(lp679
sg12
(lp680
sg29
(dp681
sbsS'TMakeRandomIndicesMultiple'
p682
(i__main__
ClassDefinition
p683
(dp684
g4
I1
sg5
I01
sg6
g682
sg7
S'TMakeRandomIndices'
p685
sg9
I00
sg10
(lp686
sg12
(lp687
(S'int'
p688
S'stratified'
p689
g689
S' requests stratified distributions'
p690
I0
I0
I01
S'MakeRandomIndices_Stratification'
p691
tp692
a(S'int'
p693
S'randseed'
p694
g694
S'a seed for random generator'
p695
I0
I0
I01
Ntp696
a(S'TRandomGenerator'
p697
S'randomGenerator'
p698
S'random_generator'
p699
S'a random generator'
p700
I0
I0
I00
Ntp701
asg29
(dp702
sbsS'TLearnerFD'
p703
(i__main__
ClassDefinition
p704
(dp705
g4
I1
sg5
I01
sg6
g703
sg7
S'TLearner'
p706
sg9
I00
sg10
(lp707
sg12
(lp708
(S'TDomain'
p709
S'domain'
p710
g710
S'domain'
p711
I0
I0
I00
Ntp712
ag110
asg29
(dp713
sbsS'TP2NN'
p714
(i__main__
ClassDefinition
p715
(dp716
g4
I1
sg5
I01
sg6
g714
sg7
S'TPNN'
p717
sg9
I00
sg10
(lp718
sg12
(lp719
(S'int'
p720
S'dimensions'
p721
g721
S'the number of dimensions'
p722
I01
I0
I01
Ntp723
a(S'TFloatList'
p724
S'offsets'
p725
g725
S'offsets to subtract from the attribute values'
p726
I0
I0
I00
Ntp727
a(S'TFloatList'
p728
S'normalizers'
p729
g729
S'number to divide the values by'
p730
I0
I0
I00
Ntp731
a(S'TFloatList'
p732
S'averages'
p733
g733
S'numbers to use instead of the missing'
p734
I0
I0
I00
Ntp735
a(S'bool'
p736
S'normalizeExamples'
p737
S'normalize_examples'
p738
S'if true, attribute values are divided to sum up to 1'
p739
I0
I0
I01
Ntp740
a(S'int'
p741
S'nExamples'
p742
S'n_examples'
p743
S'the number of examples'
p744
I01
I0
I01
Ntp745
a(S'int'
p746
S'law'
p747
g747
S'law'
p748
I0
I0
I01
Ntp749
ag291
ag94
ag99
asg29
(dp750
sbsS'TTreeSplitConstructor'
p751
(i__main__
ClassDefinition
p752
(dp753
g4
I1
sg5
I01
sg6
g751
sg7
S'TOrange'
p754
sg9
I01
sg10
(lp755
sg12
(lp756
(S'float'
p757
S'minSubset'
p758
S'min_subset'
p759
S'minimal number of examples in a subset'
p760
I0
I0
I01
Ntp761
asg29
(dp762
sbsS'TProbabilityEstimatorList'
p763
(ipyprops
ClassDefinition
p764
(dp765
g4
I0
sg5
I01
sg6
g763
sg7
g143
sg9
I0
sg10
(lp766
sg12
(lp767
sg29
(dp768
sbsS'TMapIntValue'
p769
(i__main__
ClassDefinition
p770
(dp771
g4
I1
sg5
I01
sg6
g769
sg7
S'TTransformValue'
p772
sg9
I00
sg10
(lp773
sg12
(lp774
(S'TIntList'
p775
S'mapping'
p776
g776
S'a lookup table'
p777
I0
I0
I00
Ntp778
a(S'TTransformValue'
p779
S'subTransform'
p780
S'sub_transform'
p781
S'transformation executed prior to this'
p782
I0
I0
I00
Ntp783
asg29
(dp784
sbsS'TDistributionAssessor_Kramer'
p785
(i__main__
ClassDefinition
p786
(dp787
g4
I1
sg5
I01
sg6
g785
sg7
S'TDistributionAssessor'
p788
sg9
I00
sg10
(lp789
sg12
(lp790
sg29
(dp791
sbsS'TTreeExampleSplitter_UnknownsToBranch'
p792
(i__main__
ClassDefinition
p793
(dp794
g4
I1
sg5
I01
sg6
g792
sg7
S'TTreeExampleSplitter'
p795
sg9
I00
sg10
(lp796
sg12
(lp797
sg29
(dp798
sbsS'TMajorityLearner'
p799
(i__main__
ClassDefinition
p800
(dp801
g4
I1
sg5
I01
sg6
g799
sg7
S'TLearner'
p802
sg9
I00
sg10
(lp803
sg12
(lp804
(S'TProbabilityEstimatorConstructor'
p805
S'estimatorConstructor'
p806
S'estimator_constructor'
p807
S'constructs probability estimator'
p808
I0
I0
I00
Ntp809
a(S'TDistribution'
p810
S'aprioriDistribution'
p811
S'apriori_distribution'
p812
S'apriori class distribution'
p813
I0
I0
I00
Ntp814
ag110
asg29
(dp815
sbsS'TEVDistGetter_Standard'
p816
(i__main__
ClassDefinition
p817
(dp818
g4
I1
sg5
I01
sg6
g816
sg7
S'TEVDistGetter'
p819
sg9
I00
sg10
(lp820
sg12
(lp821
(S'TEVDistList'
p822
S'dists'
p823
g823
S'EVC distribution (sorted by rule length, 0 = for rules without conditions)'
p824
I0
I0
I00
Ntp825
asg29
(dp826
sbsS'TFeatureByIM'
p827
(i__main__
ClassDefinition
p828
(dp829
g4
I1
sg5
I01
sg6
g827
sg7
S'TFeatureInducer'
p830
sg9
I00
sg10
(lp831
sg12
(lp832
(S'TIMConstructor'
p833
S'IMconstructor'
p834
g834
S'incompatibility matrix constructor'
p835
I0
I0
I00
Ntp836
a(S'TClustersFromIM'
p837
S'clustersFromIM'
p838
S'clusters_from_IM'
p839
S'clustering algorithm'
p840
I0
I0
I00
Ntp841
a(S'int'
p842
S'completion'
p843
g843
S' decides how to determine the class for points not covered by any cluster'
p844
I0
I0
I01
S'FeatureByIM_Completion'
p845
tp846
asg29
(dp847
S'Completion'
p848
(lp849
(S'NoCompletion'
p850
S'completion_no'
p851
tp852
a(S'CompletionByDefault'
p853
S'completion_default'
p854
tp855
a(S'CompletionByBayes'
p856
S'completion_bayes'
p857
tp858
assbsS'TMeasureAttributeFromProbabilities'
p859
(i__main__
ClassDefinition
p860
(dp861
g4
I1
sg5
I01
sg6
g859
sg7
S'TMeasureAttribute'
p862
sg9
I01
sg10
(lp863
sg12
(lp864
(S'TProbabilityEstimatorConstructor'
p865
S'estimatorConstructor'
p866
S'estimator_constructor'
p867
S'probability estimator (none by default)'
p868
I0
I0
I00
Ntp869
a(S'TConditionalProbabilityEstimatorConstructor'
p870
S'conditionalEstimatorConstructor'
p871
S'conditional_estimator_constructor'
p872
S'conditional probability estimator (none by default)'
p873
I0
I0
I00
Ntp874
a(S'int'
p875
S'unknownsTreatment'
p876
S'unknowns_treatment'
p877
S' treatment of unknown values'
p878
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p879
tp880
a(S'int'
p881
S'needs'
p882
g882
S' describes what kind of data is needed for computation'
p883
I0
I0
I01
S'MeasureAttribute_Needs'
p884
tp885
a(S'bool'
p886
S'handlesDiscrete'
p887
S'handles_discrete'
p888
S'tells whether the measure can handle discrete attributes'
p889
I0
I0
I01
Ntp890
a(S'bool'
p891
S'handlesContinuous'
p892
S'handles_continuous'
p893
S'tells whether the measure can handle continuous attributes'
p894
I0
I0
I01
Ntp895
a(S'bool'
p896
S'computesThresholds'
p897
S'computes_thresholds'
p898
S'tells whether the measure can compute threshold functions/maxima for continuous attributes'
p899
I0
I0
I01
Ntp900
asg29
(dp901
sbsS'TProbabilityEstimatorConstructor_relative'
p902
(i__main__
ClassDefinition
p903
(dp904
g4
I1
sg5
I01
sg6
g902
sg7
S'TProbabilityEstimatorConstructor'
p905
sg9
I00
sg10
(lp906
sg12
(lp907
sg29
(dp908
sbsS'TClassifierByLookupTable3'
p909
(i__main__
ClassDefinition
p910
(dp911
g4
I1
sg5
I01
sg6
g909
sg7
S'TClassifierByLookupTable'
p912
sg9
I00
sg10
(lp913
sg12
(lp914
(S'TVariable'
p915
S'variable1'
p916
g916
S'the first attribute used for classification'
p917
I01
I0
I00
Ntp918
a(S'TVariable'
p919
S'variable2'
p920
g920
S'the second attribute used for classification'
p921
I01
I0
I00
Ntp922
a(S'TVariable'
p923
S'variable3'
p924
g924
S'the third attribute used for classification'
p925
I01
I0
I00
Ntp926
a(S'int'
p927
S'noOfValues1'
p928
S'no_of_values1'
p929
S'number of values of the first attribute'
p930
I01
I0
I01
Ntp931
a(S'int'
p932
S'noOfValues2'
p933
S'no_of_values2'
p934
S'number of values of the second attribute'
p935
I01
I0
I01
Ntp936
a(S'int'
p937
S'noOfValues3'
p938
S'no_of_values3'
p939
S'number of values of the third attribute'
p940
I01
I0
I01
Ntp941
a(S'TEFMDataDescription'
p942
S'dataDescription'
p943
S'data_description'
p944
S'data description'
p945
I0
I0
I00
Ntp946
ag85
ag89
ag94
ag99
asg29
(dp947
sbsS'TImputerConstructor_maximal'
p948
(i__main__
ClassDefinition
p949
(dp950
g4
I1
sg5
I01
sg6
g948
sg7
S'TImputerConstructor'
p951
sg9
I00
sg10
(lp952
sg12
(lp953
g164
asg29
(dp954
sbsS'TRuleBeamRefiner'
p955
(i__main__
ClassDefinition
p956
(dp957
g4
I1
sg5
I01
sg6
g955
sg7
S'TOrange'
p958
sg9
I01
sg10
(lp959
sg12
(lp960
sg29
(dp961
sbsS'TSubsetsGenerator_iterator'
p962
(i__main__
ClassDefinition
p963
(dp964
g4
I1
sg5
I01
sg6
g962
sg7
S'TOrange'
p965
sg9
I01
sg10
(lp966
sg12
(lp967
g510
asg29
(dp968
sbsS'TEquiDistDiscretizer'
p969
(i__main__
ClassDefinition
p970
(dp971
g4
I1
sg5
I01
sg6
g969
sg7
S'TDiscretizer'
p972
sg9
I00
sg10
(lp973
sg12
(lp974
(S'int'
p975
S'numberOfIntervals'
p976
S'number_of_intervals'
p977
S'number of intervals'
p978
I0
I0
I01
Ntp979
a(S'float'
p980
S'firstCut'
p981
S'first_cut'
p982
S'the first cut-off point'
p983
I0
I0
I01
Ntp984
a(S'float'
p985
S'step'
p986
g986
S'step (width of interval)'
p987
I0
I0
I01
Ntp988
ag783
asg29
(dp989
sbsS'TValueFilter_string'
p990
(i__main__
ClassDefinition
p991
(dp992
g4
I1
sg5
I01
sg6
g990
sg7
S'TValueFilter'
p993
sg9
I00
sg10
(lp994
sg12
(lp995
(S'string'
p996
S'min'
p997
(g997
S'ref'
p998
tp999
S' reference value (lower bound for interval operators)'
p1000
I0
I0
I01
Ntp1001
a(S'string'
p1002
S'max'
p1003
g1003
S'upper bound for interval operators'
p1004
I0
I0
I01
Ntp1005
a(S'int'
p1006
S'oper'
p1007
g1007
S' operator'
p1008
I0
I0
I01
S'ValueFilter_Operator'
p1009
tp1010
a(S'bool'
p1011
S'caseSensitive'
p1012
S'case_sensitive'
p1013
S'if true (default), the operator is case sensitive'
p1014
I0
I0
I01
Ntp1015
a(S'int'
p1016
S'position'
p1017
g1017
S"attribute's position in domain"
p1018
I0
I0
I01
Ntp1019
a(S'int'
p1020
S'acceptSpecial'
p1021
S'accept_special'
p1022
S'tells whether a special value (DK, DC...) is accepted (1), rejected (0) or ignored (-1)'
p1023
I0
I0
I01
Ntp1024
asg29
(dp1025
sbsS'TFindNearest_BruteForce'
p1026
(i__main__
ClassDefinition
p1027
(dp1028
g4
I1
sg5
I01
sg6
g1026
sg7
S'TFindNearest'
p1029
sg9
I00
sg10
(lp1030
sg12
(lp1031
(S'TExamplesDistance'
p1032
S'distance'
p1033
g1033
S'metrics'
p1034
I0
I0
I00
Ntp1035
a(S'TExampleGenerator'
p1036
S'examples'
p1037
g1037
S'a list of stored examples'
p1038
I0
I0
I00
Ntp1039
a(S'int'
p1040
S'weightID'
p1041
S'weight_ID'
p1042
S'weight to use when counting examples'
p1043
I0
I0
I01
Ntp1044
a(S'int'
p1045
S'distanceID'
p1046
S'distance_ID'
p1047
S'id of meta attribute where the distance should be stored (0 = no storing)'
p1048
I0
I0
I01
Ntp1049
a(S'bool'
p1050
S'includeSame'
p1051
S'include_same'
p1052
S'tells whether to include examples that are same as the reference example'
p1053
I0
I0
I01
Ntp1054
asg29
(dp1055
sbsS'TRuleBeamInitializer'
p1056
(i__main__
ClassDefinition
p1057
(dp1058
g4
I1
sg5
I01
sg6
g1056
sg7
S'TOrange'
p1059
sg9
I01
sg10
(lp1060
sg12
(lp1061
sg29
(dp1062
sbsS'TMeasureAttribute_relevance'
p1063
(i__main__
ClassDefinition
p1064
(dp1065
g4
I1
sg5
I01
sg6
g1063
sg7
S'TMeasureAttributeFromProbabilities'
p1066
sg9
I00
sg10
(lp1067
sg12
(lp1068
g869
ag874
ag880
ag885
ag890
ag895
ag900
asg29
(dp1069
sbsS'TFilter_hasSpecial'
p1070
(i__main__
ClassDefinition
p1071
(dp1072
g4
I1
sg5
I01
sg6
g1070
sg7
S'TFilter'
p1073
sg9
I00
sg10
(lp1074
sg12
(lp1075
g669
ag673
asg29
(dp1076
sbsS'TDiscDistribution'
p1077
(i__main__
ClassDefinition
p1078
(dp1079
g4
I1
sg5
I01
sg6
g1077
sg7
S'TDistribution'
p1080
sg9
I00
sg10
(lp1081
sg12
(lp1082
(S'TFloatList'
p1083
S'variances'
p1084
g1084
S'variances'
p1085
I0
I0
I00
Ntp1086
a(S'TVariable'
p1087
S'variable'
p1088
g1088
S'attribute descriptor (optional)'
p1089
I0
I0
I00
Ntp1090
a(S'float'
p1091
S'unknowns'
p1092
g1092
S'number of unknown values'
p1093
I0
I0
I01
Ntp1094
a(S'float'
p1095
S'abs'
p1096
g1096
S'sum of frequencies (not including unknown values!)'
p1097
I0
I0
I01
Ntp1098
a(S'float'
p1099
S'cases'
p1100
g1100
S"number of cases; as abs, but doesn't change at *= and normalize()"
p1101
I0
I0
I01
Ntp1102
a(S'bool'
p1103
S'normalized'
p1104
g1104
S'distribution is normalized'
p1105
I0
I0
I01
Ntp1106
a(S'bool'
p1107
S'supportsDiscrete'
p1108
S'supports_discrete'
p1109
S'distribution supports discrete interface'
p1110
I01
I0
I01
Ntp1111
a(S'bool'
p1112
S'supportsContinuous'
p1113
S'supports_continuous'
p1114
S'distribution supports continuous interface'
p1115
I01
I0
I01
Ntp1116
a(S'TRandomGenerator'
p1117
S'randomGenerator'
p1118
S'random_generator'
p1119
S'random generator; initialized when needed, if not given earlier'
p1120
I0
I0
I00
Ntp1121
asg29
(dp1122
sbsS'TBayesLearner'
p1123
(i__main__
ClassDefinition
p1124
(dp1125
g4
I1
sg5
I01
sg6
g1123
sg7
S'TLearner'
p1126
sg9
I00
sg10
(lp1127
sg12
(lp1128
(S'TProbabilityEstimatorConstructor'
p1129
S'estimatorConstructor'
p1130
S'estimator_constructor'
p1131
S'constructs a probability estimator for P(C)'
p1132
I0
I0
I00
Ntp1133
a(S'TConditionalProbabilityEstimatorConstructor'
p1134
S'conditionalEstimatorConstructor'
p1135
S'conditional_estimator_constructor'
p1136
S'constructs a probability estimator for P(C|A) '
p1137
I0
I0
I00
Ntp1138
a(S'TConditionalProbabilityEstimatorConstructor'
p1139
S'conditionalEstimatorConstructorContinuous'
p1140
S'conditional_estimator_constructor_continuous'
p1141
S'constructs a probability estimator for P(C|A) for continuous attributes'
p1142
I0
I0
I00
Ntp1143
a(S'bool'
p1144
S'normalizePredictions'
p1145
S'normalize_predictions'
p1146
S'instructs learner to construct a classifier that normalizes probabilities'
p1147
I0
I0
I01
Ntp1148
a(S'bool'
p1149
S'adjustThreshold'
p1150
S'adjust_threshold'
p1151
S'adjust probability thresholds (for binary classes only)'
p1152
I0
I0
I01
Ntp1153
ag110
asg29
(dp1154
sbsS'TIMByRelief'
p1155
(i__main__
ClassDefinition
p1156
(dp1157
g4
I1
sg5
I01
sg6
g1155
sg7
S'TIMConstructor'
p1158
sg9
I00
sg10
(lp1159
sg12
(lp1160
(S'TExamplesDistance_Relief'
p1161
S'distance'
p1162
g1162
S'distance measure'
p1163
I0
I0
I00
Ntp1164
a(S'float'
p1165
S'k'
p1166
g1166
S'number of neighbours'
p1167
I0
I0
I01
Ntp1168
a(S'float'
p1169
S'm'
p1170
g1170
S'number of reference examples'
p1171
I0
I0
I01
Ntp1172
a(S'float'
p1173
S'kFromColumns'
p1174
S'k_from_columns'
p1175
S'if positive, number of neighbours is #columns*kFromColumns'
p1176
I0
I0
I01
Ntp1177
a(S'bool'
p1178
S'ignoreSameExample'
p1179
S'ignore_same_example'
p1180
S'does not put reference example into M'
p1181
I0
I0
I01
Ntp1182
a(S'bool'
p1183
S'convertToBinary'
p1184
S'convert_to_binary'
p1185
S'convert to binary class (hit-miss)'
p1186
I0
I0
I01
Ntp1187
a(S'bool'
p1188
S'correctClassFirst'
p1189
S'correct_class_first'
p1190
S'puts the correct class proportion to the first place'
p1191
I0
I0
I01
Ntp1192
a(S'bool'
p1193
S'allExamples'
p1194
S'all_examples'
p1195
S'uses all examples for reference examples'
p1196
I0
I0
I01
Ntp1197
a(S'bool'
p1198
S'allSameNeighbours'
p1199
S'all_same_neighbours'
p1200
S'uses all the examples same to the reference as neighbours'
p1201
I0
I0
I01
Ntp1202
a(S'bool'
p1203
S'recordRowExamples'
p1204
S'record_row_examples'
p1205
S'enables creation of rowExample list'
p1206
I0
I0
I01
Ntp1207
asg29
(dp1208
sbsS'TConditionalProbabilityEstimator'
p1209
(i__main__
ClassDefinition
p1210
(dp1211
g4
I1
sg5
I01
sg6
g1209
sg7
S'TOrange'
p1212
sg9
I01
sg10
(lp1213
sg12
(lp1214
g133
ag138
asg29
(dp1215
sbsS'TColumnAssessor_Laplace'
p1216
(i__main__
ClassDefinition
p1217
(dp1218
g4
I1
sg5
I01
sg6
g1216
sg7
S'TColumnAssessor'
p1219
sg9
I00
sg10
(lp1220
sg12
(lp1221
sg29
(dp1222
sbsS'TPreprocessor_addGaussianNoise'
p1223
(i__main__
ClassDefinition
p1224
(dp1225
g4
I1
sg5
I01
sg6
g1223
sg7
S'TPreprocessor'
p1226
sg9
I00
sg10
(lp1227
sg12
(lp1228
(S'TVariableFloatMap'
p1229
S'deviations'
p1230
g1230
S'deviations individual attribute values'
p1231
I0
I0
I00
Ntp1232
a(S'float'
p1233
S'defaultDeviation'
p1234
S'default_deviation'
p1235
S'default deviation'
p1236
I0
I0
I01
Ntp1237
a(S'TRandomGenerator'
p1238
S'randomGenerator'
p1239
S'random_generator'
p1240
S'random number generator'
p1241
I0
I0
I00
Ntp1242
asg29
(dp1243
sbsS'TRuleStoppingCriteria_NegativeDistribution'
p1244
(i__main__
ClassDefinition
p1245
(dp1246
g4
I1
sg5
I01
sg6
g1244
sg7
S'TRuleStoppingCriteria'
p1247
sg9
I00
sg10
(lp1248
sg12
(lp1249
sg29
(dp1250
sbsS'TTreeSplitConstructor_ExhaustiveBinary'
p1251
(i__main__
ClassDefinition
p1252
(dp1253
g4
I1
sg5
I01
sg6
g1251
sg7
S'TTreeSplitConstructor_Measure'
p1254
sg9
I00
sg10
(lp1255
sg12
(lp1256
(S'TMeasureAttribute'
p1257
S'measure'
p1258
g1258
S'attribute quality measure'
p1259
I0
I0
I00
Ntp1260
a(S'float'
p1261
S'worstAcceptable'
p1262
S'worst_acceptable'
p1263
S'the worst acceptable quality of the attribute'
p1264
I0
I0
I01
Ntp1265
ag761
asg29
(dp1266
sbsS'TTreeClassifier'
p1267
(i__main__
ClassDefinition
p1268
(dp1269
g4
I1
sg5
I01
sg6
g1267
sg7
S'TClassifierFD'
p1270
sg9
I00
sg10
(lp1271
sg12
(lp1272
(S'TTreeNode'
p1273
S'tree'
p1274
g1274
S'decision tree'
p1275
I0
I0
I00
Ntp1276
a(S'TTreeDescender'
p1277
S'descender'
p1278
g1278
S'object that descends down the tree'
p1279
I0
I0
I00
Ntp1280
ag291
ag94
ag99
asg29
(dp1281
sbsS'TFilter_compatibleExample'
p1282
(i__main__
ClassDefinition
p1283
(dp1284
g4
I1
sg5
I01
sg6
g1282
sg7
S'TFilter'
p1285
sg9
I00
sg10
(lp1286
sg12
(lp1287
(S'TExample'
p1288
S'example'
p1289
g1289
S'example with which examples are compared'
p1290
I0
I0
I00
Ntp1291
ag669
ag673
asg29
(dp1292
sbsS'TRemoveRedundant'
p1293
(i__main__
ClassDefinition
p1294
(dp1295
g4
I1
sg5
I01
sg6
g1293
sg7
S'TOrange'
p1296
sg9
I01
sg10
(lp1297
sg12
(lp1298
(S'bool'
p1299
S'keepValues'
p1300
S'keep_values'
p1301
S'keep an attribute if number values is only smaller, not one'
p1302
I0
I0
I01
Ntp1303
asg29
(dp1304
sbsS'TExamplesDistanceConstructor_Hamming'
p1305
(i__main__
ClassDefinition
p1306
(dp1307
g4
I1
sg5
I01
sg6
g1305
sg7
S'TExamplesDistanceConstructor'
p1308
sg9
I00
sg10
(lp1309
sg12
(lp1310
(S'bool'
p1311
S'ignoreClass'
p1312
S'ignore_class'
p1313
S'if true (default), class value is ignored when computing distances'
p1314
I0
I0
I01
Ntp1315
a(S'bool'
p1316
S'ignoreUnknowns'
p1317
S'ignore_unknowns'
p1318
S'if true (default: false) unknown values are ignored in computation'
p1319
I0
I0
I01
Ntp1320
a(S'bool'
p1321
S'ignoreClass'
p1322
S'ignore_class'
p1323
S'if true (default), class value is ignored when computing distances'
p1324
I0
I0
I01
Ntp1325
asg29
(dp1326
sbsS'TSomeValue'
p1327
(i__main__
ClassDefinition
p1328
(dp1329
g4
I1
sg5
I01
sg6
g1327
sg7
S'TOrange'
p1330
sg9
I01
sg10
(lp1331
sg12
(lp1332
sg29
(dp1333
sbsS'TRuleClassifierConstructor_firstRule'
p1334
(i__main__
ClassDefinition
p1335
(dp1336
g4
I1
sg5
I01
sg6
g1334
sg7
S'TRuleClassifierConstructor'
p1337
sg9
I00
sg10
(lp1338
sg12
(lp1339
sg29
(dp1340
sbsS'TStressFunc'
p1341
(i__main__
ClassDefinition
p1342
(dp1343
g4
I1
sg5
I0
sg6
g1341
sg7
S'TOrange'
p1344
sg9
I01
sg10
(lp1345
sg12
(lp1346
sg29
(dp1347
sbsS'TStopDistributionClustering_noProfit'
p1348
(i__main__
ClassDefinition
p1349
(dp1350
g4
I1
sg5
I01
sg6
g1348
sg7
S'TStopDistributionClustering'
p1351
sg9
I00
sg10
(lp1352
sg12
(lp1353
(S'float'
p1354
S'minProfitProportion'
p1355
S'min_profit_proportion'
p1356
S'minimal allowable profit proportion'
p1357
I0
I0
I01
Ntp1358
asg29
(dp1359
sbsS'TBiModalDiscretization'
p1360
(i__main__
ClassDefinition
p1361
(dp1362
g4
I1
sg5
I01
sg6
g1360
sg7
S'TDiscretization'
p1363
sg9
I00
sg10
(lp1364
sg12
(lp1365
(S'bool'
p1366
S'splitInTwo'
p1367
S'split_in_two'
p1368
S'if true (default), flanks are merged into a single interval'
p1369
I0
I0
I01
Ntp1370
asg29
(dp1371
sbsS'TColoredIG'
p1372
(i__main__
ClassDefinition
p1373
(dp1374
g4
I1
sg5
I01
sg6
g1372
sg7
S'TGeneralExampleClustering'
p1375
sg9
I00
sg10
(lp1376
sg12
(lp1377
(S'TIG'
p1378
S'ig'
p1379
g1379
S'incompatibility graph'
p1380
I0
I0
I00
Ntp1381
a(S'TIntList'
p1382
S'colors'
p1383
g1383
S'colors (one element corresponding to each ig node)'
p1384
I0
I0
I00
Ntp1385
asg29
(dp1386
sbsS'TMeasureAttribute'
p1387
(i__main__
ClassDefinition
p1388
(dp1389
g4
I1
sg5
I01
sg6
g1387
sg7
S'TOrange'
p1390
sg9
I00
sg10
(lp1391
sg12
(lp1392
g885
ag890
ag895
ag900
asg29
(dp1393
S'Needs'
p1394
(lp1395
(S'Contingency_Class'
p1396
I0
tp1397
a(S'DomainContingency'
p1398
I1
tp1399
a(S'Generator'
p1400
I2
tp1401
asS'UnknownsTreatment'
p1402
(lp1403
(S'IgnoreUnknowns'
p1404
I0
tp1405
a(S'ReduceByUnknowns'
p1406
I1
tp1407
a(S'UnknownsToCommon'
p1408
I2
tp1409
a(S'UnknownsAsValue'
p1410
I3
tp1411
assbsS'TRuleEvaluator'
p1412
(i__main__
ClassDefinition
p1413
(dp1414
g4
I1
sg5
I01
sg6
g1412
sg7
S'TOrange'
p1415
sg9
I01
sg10
(lp1416
sg12
(lp1417
sg29
(dp1418
sbsS'TStringVariable'
p1419
(i__main__
ClassDefinition
p1420
(dp1421
g4
I1
sg5
I01
sg6
g1419
sg7
S'TVariable'
p1422
sg9
I00
sg10
(lp1423
sg12
(lp1424
g333
ag337
ag341
ag346
ag351
ag356
ag361
asg29
(dp1425
sbsS'TAssessIMQuality'
p1426
(i__main__
ClassDefinition
p1427
(dp1428
g4
I1
sg5
I01
sg6
g1426
sg7
S'TOrange'
p1429
sg9
I00
sg10
(lp1430
sg12
(lp1431
(S'TColumnAssessor'
p1432
S'columnAssessor'
p1433
S'column_assessor'
p1434
S'column quality assessor'
p1435
I0
I0
I00
Ntp1436
asg29
(dp1437
sbsS'TGraphAsTree'
p1438
(i__main__
ClassDefinition
p1439
(dp1440
g4
I1
sg5
I01
sg6
g1438
sg7
S'TGraph'
p1441
sg9
I00
sg10
(lp1442
sg12
(lp1443
(S'int'
p1444
S'nVertices'
p1445
S'n_vertices'
p1446
S'the number of vertices'
p1447
I01
I0
I01
Ntp1448
a(S'int'
p1449
S'nEdgeTypes'
p1450
S'n_edge_types'
p1451
S'the number of edge types'
p1452
I01
I0
I01
Ntp1453
a(S'bool'
p1454
S'directed'
p1455
g1455
S'directed'
p1456
I01
I0
I01
Ntp1457
asg29
(dp1458
sbsS'TTreeExampleSplitter_IgnoreUnknowns'
p1459
(i__main__
ClassDefinition
p1460
(dp1461
g4
I1
sg5
I01
sg6
g1459
sg7
S'TTreeExampleSplitter'
p1462
sg9
I00
sg10
(lp1463
sg12
(lp1464
sg29
(dp1465
sbsS'TProbabilityEstimator_FromDistribution'
p1466
(i__main__
ClassDefinition
p1467
(dp1468
g4
I1
sg5
I01
sg6
g1466
sg7
S'TProbabilityEstimator'
p1469
sg9
I00
sg10
(lp1470
sg12
(lp1471
(S'TDistribution'
p1472
S'probabilities'
p1473
g1473
S'probabilities'
p1474
I0
I0
I00
Ntp1475
a(S'bool'
p1476
S'supportsDiscrete'
p1477
S'supports_discrete'
p1478
S'can estimate probabilities of discrete attributes'
p1479
I01
I0
I01
Ntp1480
a(S'bool'
p1481
S'supportsContinuous'
p1482
S'supports_continuous'
p1483
S'can estimate probabilities of continuous attributes'
p1484
I01
I0
I01
Ntp1485
asg29
(dp1486
sbsS'TC45TreeNode'
p1487
(i__main__
ClassDefinition
p1488
(dp1489
g4
I1
sg5
I01
sg6
g1487
sg7
S'TOrange'
p1490
sg9
I00
sg10
(lp1491
sg12
(lp1492
(S'int'
p1493
S'nodeType'
p1494
S'node_type'
p1495
S' 0 = leaf,  1 = branch,  2 = cut,  3 = subset'
p1496
I0
I0
I01
S'C45TreeNode_NodeType'
p1497
tp1498
a(S'TValue'
p1499
S'leaf'
p1500
g1500
S'most frequent class at this node'
p1501
I0
I0
I01
Ntp1502
a(S'float'
p1503
S'items'
p1504
g1504
S'no of items at this node'
p1505
I0
I0
I01
Ntp1506
a(S'TDiscDistribution'
p1507
S'classDist'
p1508
S'class_dist'
p1509
S'class distribution of items'
p1510
I0
I0
I00
Ntp1511
a(S'TVariable'
p1512
S'tested'
p1513
g1513
S'attribute referenced in test'
p1514
I0
I0
I00
Ntp1515
a(S'float'
p1516
S'cut'
p1517
g1517
S'threshold for continuous attribute'
p1518
I0
I0
I01
Ntp1519
a(S'float'
p1520
S'lower'
p1521
g1521
S'lower limit of soft threshold'
p1522
I0
I0
I01
Ntp1523
a(S'float'
p1524
S'upper'
p1525
g1525
S'upper limit of soft threshold'
p1526
I0
I0
I01
Ntp1527
a(S'TIntList'
p1528
S'mapping'
p1529
g1529
S'mapping for discrete value'
p1530
I0
I0
I00
Ntp1531
a(S'TC45TreeNodeList'
p1532
S'branch'
p1533
g1533
S'branch[x] = (sub)tree for outcome x */'
p1534
I0
I0
I00
Ntp1535
asg29
(dp1536
S'NodeType'
p1537
(lp1538
(S'Leaf'
p1539
S'0'
p1540
tp1541
a(S'Branch'
p1542
I1
tp1543
a(S'Cut'
p1544
I2
tp1545
a(S'Subset'
p1546
I3
tp1547
assbsS'TDistributionList'
p1548
(ipyprops
ClassDefinition
p1549
(dp1550
g4
I0
sg5
I01
sg6
g1548
sg7
g143
sg9
I0
sg10
(lp1551
sg12
(lp1552
sg29
(dp1553
sbsS'TTreeDescender_UnknownMergeAsBranchSizes'
p1554
(i__main__
ClassDefinition
p1555
(dp1556
g4
I1
sg5
I01
sg6
g1554
sg7
S'TTreeDescender'
p1557
sg9
I0
sg10
(lp1558
sg12
(lp1559
sg29
(dp1560
sbsS'THierarchicalClusterOrdering'
p1561
(i__main__
ClassDefinition
p1562
(dp1563
g4
I1
sg5
I01
sg6
g1561
sg7
S'TOrange'
p1564
sg9
I00
sg10
(lp1565
sg12
(lp1566
(S'TProgressCallback'
p1567
S'progress_callback'
p1568
g1568
S'progress callback function'
p1569
I0
I0
I00
Ntp1570
asg29
(dp1571
sbsS'TLogitClassifierState'
p1572
(i__main__
ClassDefinition
p1573
(dp1574
g4
I1
sg5
I01
sg6
g1572
sg7
S'TOrange'
p1575
sg9
I00
sg10
(lp1576
sg12
(lp1577
sg29
(dp1578
sbsS'TExamplesDistance'
p1579
(i__main__
ClassDefinition
p1580
(dp1581
g4
I1
sg5
I01
sg6
g1579
sg7
S'TOrange'
p1582
sg9
I01
sg10
(lp1583
sg12
(lp1584
sg29
(dp1585
sbsS'TFileExampleGenerator'
p1586
(i__main__
ClassDefinition
p1587
(dp1588
g4
I1
sg5
I01
sg6
g1586
sg7
S'TExampleGenerator'
p1589
sg9
I01
sg10
(lp1590
sg12
(lp1591
(S'string'
p1592
S'filename'
p1593
g1593
S'filename'
p1594
I0
I0
I01
Ntp1595
a(S'int'
p1596
S'startDataPos'
p1597
S'start_data_pos'
p1598
S'starting position of the data in file'
p1599
I0
I0
I01
Ntp1600
a(S'int'
p1601
S'startDataLine'
p1602
S'start_data_line'
p1603
S'line in the file where the data starts'
p1604
I0
I0
I01
Ntp1605
ag306
ag310
asg29
(dp1606
sbsS'TMeasureAttribute_gainRatio'
p1607
(i__main__
ClassDefinition
p1608
(dp1609
g4
I1
sg5
I01
sg6
g1607
sg7
S'TMeasureAttributeFromProbabilities'
p1610
sg9
I00
sg10
(lp1611
sg12
(lp1612
g869
ag874
ag880
ag885
ag890
ag895
ag900
asg29
(dp1613
sbsS'TContingencyClassAttr'
p1614
(i__main__
ClassDefinition
p1615
(dp1616
g4
I1
sg5
I01
sg6
g1614
sg7
S'TContingencyClass'
p1617
sg9
I00
sg10
(lp1618
sg12
(lp1619
(S'TVariable'
p1620
S'outerVariable'
p1621
S'outer_variable'
p1622
S'outer attribute'
p1623
I0
I0
I00
Ntp1624
a(S'TVariable'
p1625
S'innerVariable'
p1626
S'inner_variable'
p1627
S'inner attribute'
p1628
I0
I0
I00
Ntp1629
a(S'int'
p1630
S'varType'
p1631
S'var_type'
p1632
S' outer attribute type'
p1633
I0
I0
I01
S'Variable_Type'
p1634
tp1635
a(S'TDistribution'
p1636
S'outerDistribution'
p1637
S'outer_distribution'
p1638
S'distribution of values of outer attributes'
p1639
I0
I0
I00
Ntp1640
a(S'TDistribution'
p1641
S'innerDistribution'
p1642
S'inner_distribution'
p1643
S'distribution of values of inner attributes'
p1644
I0
I0
I00
Ntp1645
a(S'TDistribution'
p1646
S'innerDistributionUnknown'
p1647
S'inner_distribution_unknown'
p1648
S'distribution of inner variable for examples where the outer value was unknown'
p1649
I0
I0
I00
Ntp1650
asg29
(dp1651
sbsS'TMissValuesGenerator'
p1652
(i__main__
ClassDefinition
p1653
(dp1654
g4
I1
sg5
I01
sg6
g1652
sg7
S'TChangeExampleGenerator'
p1655
sg9
I00
sg10
(lp1656
sg12
(lp1657
(S'TIntFloatList'
p1658
S'replaceProbabilities'
p1659
S'replace_probabilities'
p1660
S"probabilities for replacing attributes' values"
p1661
I0
I0
I00
Ntp1662
a(S'TRandomGenerator'
p1663
S'randomGenerator'
p1664
S'random_generator'
p1665
S'random generator'
p1666
I0
I0
I00
Ntp1667
ag306
ag310
asg29
(dp1668
sbsS'TLogRegClassifier'
p1669
(i__main__
ClassDefinition
p1670
(dp1671
g4
I1
sg5
I01
sg6
g1669
sg7
S'TClassifierFD'
p1672
sg9
I00
sg10
(lp1673
sg12
(lp1674
(S'TDomain'
p1675
S'continuizedDomain'
p1676
S'continuized_domain'
p1677
S'if absent, there is no continuous attributes in original domain'
p1678
I0
I0
I00
Ntp1679
a(S'TEFMDataDescription'
p1680
S'dataDescription'
p1681
S'data_description'
p1682
S'Data needed for classification in presence of undefined values'
p1683
I0
I0
I00
Ntp1684
a(S'TAttributedFloatList'
p1685
S'beta'
p1686
g1686
S'estimated beta coefficients for logistic regression'
p1687
I0
I0
I00
Ntp1688
a(S'TAttributedFloatList'
p1689
S'beta_se'
p1690
g1690
S'estimated standard errors for beta coefficients'
p1691
I0
I0
I00
Ntp1692
a(S'TAttributedFloatList'
p1693
S'wald_Z'
p1694
g1694
S'Wald Z statstic for beta coefficients'
p1695
I0
I0
I00
Ntp1696
a(S'TAttributedFloatList'
p1697
S'P'
p1698
g1698
S'estimated significances for beta coefficients'
p1699
I0
I0
I00
Ntp1700
a(S'float'
p1701
S'likelihood'
p1702
g1702
S"Likelihood: The likelihood function is the function which specifies the probability of the sample observed on the basis of a known model, as a function of the model's parameters. "
p1703
I0
I0
I01
Ntp1704
a(S'int'
p1705
S'fit_status'
p1706
g1706
S"Tells how the model fitting ended - either regularly (LogRegFitter.OK), or it was interrupted due to one of beta coefficients escaping towards infinity (LogRegFitter.Infinity) or since the values didn't converge (LogRegFitter.Divergence)."
p1707
I0
I0
I01
Ntp1708
a(S'TImputer'
p1709
S'imputer'
p1710
g1710
S'if present, it imputes unknown values'
p1711
I0
I0
I00
Ntp1712
ag291
ag94
ag99
asg29
(dp1713
sbsS'TEquiDistDiscretization'
p1714
(i__main__
ClassDefinition
p1715
(dp1716
g4
I1
sg5
I01
sg6
g1714
sg7
S'TDiscretization'
p1717
sg9
I00
sg10
(lp1718
sg12
(lp1719
(S'int'
p1720
S'numberOfIntervals'
p1721
S'number_of_intervals'
p1722
S'number of intervals'
p1723
I0
I0
I01
Ntp1724
asg29
(dp1725
sbsS'TPreprocessor_select'
p1726
(i__main__
ClassDefinition
p1727
(dp1728
g4
I1
sg5
I01
sg6
g1726
sg7
S'TPreprocessor'
p1729
sg9
I00
sg10
(lp1730
sg12
(lp1731
(S'TVarList'
p1732
S'attributes'
p1733
g1733
S'tells which attributes to select'
p1734
I0
I0
I00
Ntp1735
asg29
(dp1736
sbsS'TSVMClassifierSparse'
p1737
(i__main__
ClassDefinition
p1738
(dp1739
g4
I1
sg5
I01
sg6
g1737
sg7
S'TSVMClassifier'
p1740
sg9
I00
sg10
(lp1741
sg12
(lp1742
(S'bool'
p1743
S'useNonMeta'
p1744
S'use_non_meta'
p1745
S'include non meta attributes'
p1746
I0
I0
I01
Ntp1747
ag245
ag249
ag253
ag258
ag263
ag268
ag272
ag277
ag282
ag287
ag291
ag94
ag99
asg29
(dp1748
sbsS'TFilter_disjunction'
p1749
(i__main__
ClassDefinition
p1750
(dp1751
g4
I1
sg5
I01
sg6
g1749
sg7
S'TFilter'
p1752
sg9
I00
sg10
(lp1753
sg12
(lp1754
(S'TFilterList'
p1755
S'filters'
p1756
g1756
S'a list of filters;'
p1757
I0
I0
I00
Ntp1758
ag669
ag673
asg29
(dp1759
sbsS'TMeasureAttribute_gini'
p1760
(i__main__
ClassDefinition
p1761
(dp1762
g4
I1
sg5
I01
sg6
g1760
sg7
S'TMeasureAttributeFromProbabilities'
p1763
sg9
I00
sg10
(lp1764
sg12
(lp1765
g869
ag874
ag880
ag885
ag890
ag895
ag900
asg29
(dp1766
sbsS'TAttributedFloatList'
p1767
(ipyprops
ClassDefinition
p1768
(dp1769
g4
I0
sg5
I01
sg6
g1767
sg7
S'TFloatList'
p1770
sg9
I0
sg10
(lp1771
sg12
(lp1772
sg29
(dp1773
sbsS'TIMByRowsByRelief'
p1774
(i__main__
ClassDefinition
p1775
(dp1776
g4
I1
sg5
I01
sg6
g1774
sg7
S'TIMByRowsConstructor'
p1777
sg9
I00
sg10
(lp1778
sg12
(lp1779
(S'float'
p1780
g1166
g1166
S'number of neighbours'
p1781
I0
I0
I01
Ntp1782
a(S'float'
p1783
g1170
g1170
S'number of reference examples'
p1784
I0
I0
I01
Ntp1785
a(S'float'
p1786
S'kFromColumns'
p1787
S'k_from_columns'
p1788
S'if positive, number of neighbours is #columns*kFromColumns'
p1789
I0
I0
I01
Ntp1790
a(S'bool'
p1791
S'ignoreSameExample'
p1792
S'ignore_same_example'
p1793
S'does not put reference example into M'
p1794
I0
I0
I01
Ntp1795
a(S'bool'
p1796
S'convertToBinary'
p1797
S'convert_to_binary'
p1798
S'convert to binary class (hit-miss)'
p1799
I0
I0
I01
Ntp1800
a(S'bool'
p1801
S'correctClassFirst'
p1802
S'correct_class_first'
p1803
S'puts the correct class proportion to the first place'
p1804
I0
I0
I01
Ntp1805
a(S'bool'
p1806
S'allExamples'
p1807
S'all_examples'
p1808
S'uses all examples for reference examples'
p1809
I0
I0
I01
Ntp1810
a(S'bool'
p1811
S'allSameNeighbours'
p1812
S'all_same_neighbours'
p1813
S'uses all the examples same to the reference as neighbours'
p1814
I0
I0
I01
Ntp1815
asg29
(dp1816
sbsS'TFindNearestConstructor'
p1817
(i__main__
ClassDefinition
p1818
(dp1819
g4
I1
sg5
I01
sg6
g1817
sg7
S'TOrange'
p1820
sg9
I01
sg10
(lp1821
sg12
(lp1822
(S'TExamplesDistanceConstructor'
p1823
S'distanceConstructor'
p1824
S'distance_constructor'
p1825
S'metrics'
p1826
I0
I0
I00
Ntp1827
a(S'bool'
p1828
S'includeSame'
p1829
S'include_same'
p1830
S'tells whether to include examples that are same as the reference example'
p1831
I0
I0
I01
Ntp1832
asg29
(dp1833
sbsS'TRuleClassifier_firstRule'
p1834
(i__main__
ClassDefinition
p1835
(dp1836
g4
I1
sg5
I01
sg6
g1834
sg7
S'TRuleClassifier'
p1837
sg9
I00
sg10
(lp1838
sg12
(lp1839
(S'TDistribution'
p1840
S'prior'
p1841
g1841
S'prior distribution'
p1842
I0
I0
I00
Ntp1843
ag579
ag582
ag586
ag94
ag99
asg29
(dp1844
sbsS'TColumnAssessor'
p1845
(i__main__
ClassDefinition
p1846
(dp1847
g4
I1
sg5
I01
sg6
g1845
sg7
S'TOrange'
p1848
sg9
I01
sg10
(lp1849
sg12
(lp1850
sg29
(dp1851
sbsS'TTableAverager'
p1852
(i__main__
ClassDefinition
p1853
(dp1854
g4
I1
sg5
I01
sg6
g1852
sg7
S'TOrange'
p1855
sg9
I00
sg10
(lp1856
sg12
(lp1857
sg29
(dp1858
sbsS'TComputeDomainContingency_Preprocessor'
p1859
(i__main__
ClassDefinition
p1860
(dp1861
g4
I1
sg5
I01
sg6
g1859
sg7
S'TComputeDomainContingency'
p1862
sg9
I00
sg10
(lp1863
sg12
(lp1864
(S'TPreprocessor'
p1865
S'preprocessor'
p1866
g1866
S'preprocesses the exmaples (see the manual for restrictions!)'
p1867
I0
I0
I00
Ntp1868
a(S'bool'
p1869
S'resultInOriginalDomain'
p1870
S'result_in_original_domain'
p1871
S'tells whether the resulting DomainContingency should consist of original attributes'
p1872
I0
I0
I01
Ntp1873
ag28
asg29
(dp1874
sbsS'TFloatFloatList'
p1875
(ipyprops
ClassDefinition
p1876
(dp1877
g4
I0
sg5
I01
sg6
g1875
sg7
g143
sg9
I0
sg10
(lp1878
sg12
(lp1879
sg29
(dp1880
sbsS'TMeasureAttribute_MSE'
p1881
(i__main__
ClassDefinition
p1882
(dp1883
g4
I1
sg5
I01
sg6
g1881
sg7
S'TMeasureAttribute'
p1884
sg9
I00
sg10
(lp1885
sg12
(lp1886
(S'float'
p1887
g1170
g1170
S'm for m-estimate'
p1888
I0
I0
I01
Ntp1889
a(S'int'
p1890
S'unknownsTreatment'
p1891
S'unknowns_treatment'
p1892
S' treatment of unknown values'
p1893
I0
I0
I01
S'MeasureAttribute_UnknownsTreatment'
p1894
tp1895
ag885
ag890
ag895
ag900
asg29
(dp1896
sbsS'TRuleList'
p1897
(ipyprops
ClassDefinition
p1898
(dp1899
g4
I0
sg5
I01
sg6
g1897
sg7
g143
sg9
I0
sg10
(lp1900
sg12
(lp1901
sg29
(dp1902
sbsS'TStopIMClusteringByAssessor_noBigChange'
p1903
(i__main__
ClassDefinition
p1904
(dp1905
g4
I1
sg5
I01
sg6
g1903
sg7
S'TStopIMClusteringByAssessor'
p1906
sg9
I00
sg10
(lp1907
sg12
(lp1908
sg29
(dp1909
sbsS'TItemsetsSparseInducer'
p1910
(i__main__
ClassDefinition
p1911
(dp1912
g4
I1
sg5
I01
sg6
g1910
sg7
S'TOrange'
p1913
sg9
I00
sg10
(lp1914
sg12
(lp1915
(S'int'
p1916
S'maxItemSets'
p1917
S'max_item_sets'
p1918
S'maximal number of itemsets (increase if you want)'
p1919
I0
I0
I01
Ntp1920
a(S'float'
p1921
S'support'
p1922
g1922
S'required support'
p1923
I0
I0
I01
Ntp1924
a(S'bool'
p1925
S'storeExamples'
p1926
S'store_examples'
p1927
S'stores examples corresponding to itemsets'
p1928
I0
I0
I01
Ntp1929
asg29
(dp1930
sbsS'TPreprocessor_dropMissing'
p1931
(i__main__
ClassDefinition
p1932
(dp1933
g4
I1
sg5
I01
sg6
g1931
sg7
S'TPreprocessor'
p1934
sg9
I00
sg10
(lp1935
sg12
(lp1936
sg29
(dp1937
sbsS'TDomainContinuizer'
p1938
(i__main__
ClassDefinition
p1939
(dp1940
g4
I1
sg5
I01
sg6
g1938
sg7
S'TOrange'
p1941
sg9
I00
sg10
(lp1942
sg12
(lp1943
(S'bool'
p1944
S'zeroBased'
p1945
S'zero_based'
p1946
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p1947
I0
I0
I01
Ntp1948
a(S'int'
p1949
S'continuousTreatment'
p1950
S'continuous_treatment'
p1951
S' 0-leave as they are, 1-divide by span, 1-normalize'
p1952
I0
I0
I01
S'DomainContinuizer_ContinuousTreatment'
p1953
tp1954
a(S'int'
p1955
S'multinomialTreatment'
p1956
S'multinomial_treatment'
p1957
S' 0-lowest value, 1-most frequent (or baseValue), 2-n binary, 3-ignore, 4-ignore all discrete, 5-error, 6-convert as ordinal, 7-ordinal,normalized'
p1958
I0
I0
I01
S'DomainContinuizer_MultinomialTreatment'
p1959
tp1960
a(S'int'
p1961
S'classTreatment'
p1962
S'class_treatment'
p1963
S' 3-leave as is unless target is given, 5-error if not continuous nor binary nor target given, 6-convert as ordinal (unless target given)'
p1964
I0
I0
I01
S'DomainContinuizer_ClassTreatment'
p1965
tp1966
asg29
(dp1967
S'MultinomialTreatment'
p1968
(lp1969
(S'LowestIsBase'
p1970
I0
tp1971
a(S'FrequentIsBase'
p1972
I1
tp1973
a(S'NValues'
p1974
I2
tp1975
a(S'Ignore'
p1976
I3
tp1977
a(S'IgnoreAllDiscrete'
p1978
I4
tp1979
a(S'ReportError'
p1980
I5
tp1981
a(S'AsOrdinal'
p1982
I6
tp1983
a(S'AsNormalizedOrdinal'
p1984
I7
tp1985
asS'ClassTreatment'
p1986
(lp1987
(S'LeaveUnlessTarget'
p1988
S'3'
p1989
tp1990
a(S'ErrorIfCannotHandle'
p1991
S'5'
p1992
tp1993
a(S'AsOrdinal'
p1994
S'6'
p1995
tp1996
asS'ContinuousTreatment'
p1997
(lp1998
(S'Leave'
p1999
I0
tp2000
a(S'NormalizeBySpan'
p2001
I1
tp2002
a(S'NormalizeByVariance'
p2003
I2
tp2004
assbsS'TNormalizeContinuous'
p2005
(i__main__
ClassDefinition
p2006
(dp2007
g4
I1
sg5
I01
sg6
g2005
sg7
S'TTransformValue'
p2008
sg9
I00
sg10
(lp2009
sg12
(lp2010
(S'float'
p2011
S'average'
p2012
g2012
S'the average value'
p2013
I0
I0
I01
Ntp2014
a(S'float'
p2015
S'span'
p2016
g2016
S'the value span'
p2017
I0
I0
I01
Ntp2018
ag783
asg29
(dp2019
sbsS'TSimpleTreeClassifier'
p2020
(i__main__
ClassDefinition
p2021
(dp2022
g4
I1
sg5
I01
sg6
g2020
sg7
S'TClassifier'
p2023
sg9
I00
sg10
(lp2024
sg12
(lp2025
g94
ag99
asg29
(dp2026
sbsS'TStressFunc_Python'
p2027
(i__main__
ClassDefinition
p2028
(dp2029
g4
I1
sg5
I0
sg6
g2027
sg7
S'TStressFunc'
p2030
sg9
I00
sg10
(lp2031
sg12
(lp2032
sg29
(dp2033
sbsS'TBiModalDiscretizer'
p2034
(i__main__
ClassDefinition
p2035
(dp2036
g4
I1
sg5
I01
sg6
g2034
sg7
S'TDiscretizer'
p2037
sg9
I00
sg10
(lp2038
sg12
(lp2039
(S'float'
p2040
S'low'
p2041
g2041
S'low threshold'
p2042
I0
I0
I01
Ntp2043
a(S'float'
p2044
S'high'
p2045
g2045
S'high threshold'
p2046
I0
I0
I01
Ntp2047
ag783
asg29
(dp2048
sbsS'TExamplesDistanceConstructor_Euclidean'
p2049
(i__main__
ClassDefinition
p2050
(dp2051
g4
I1
sg5
I01
sg6
g2049
sg7
S'TExamplesDistanceConstructor_Normalized'
p2052
sg9
I00
sg10
(lp2053
sg12
(lp2054
(S'bool'
p2055
S'normalize'
p2056
g2056
S'tells whether to normalize distances between attributes'
p2057
I0
I0
I01
Ntp2058
a(S'bool'
p2059
S'ignoreUnknowns'
p2060
S'ignore_unknowns'
p2061
S'if true (default: false) unknown values are ignored in computation'
p2062
I0
I0
I01
Ntp2063
ag1325
asg29
(dp2064
sbsS'TContingencyAttrAttr'
p2065
(i__main__
ClassDefinition
p2066
(dp2067
g4
I1
sg5
I01
sg6
g2065
sg7
S'TContingency'
p2068
sg9
I00
sg10
(lp2069
sg12
(lp2070
g1624
ag1629
ag1635
ag1640
ag1645
ag1650
asg29
(dp2071
sbsS'TRuleBeamRefiner_Selector'
p2072
(i__main__
ClassDefinition
p2073
(dp2074
g4
I1
sg5
I01
sg6
g2072
sg7
S'TRuleBeamRefiner'
p2075
sg9
I00
sg10
(lp2076
sg12
(lp2077
(S'TDiscretization'
p2078
S'discretization'
p2079
g2079
S'discretization for continuous attributes'
p2080
I0
I0
I00
Ntp2081
asg29
(dp2082
sbsS'TProbabilityEstimatorConstructor_Laplace'
p2083
(i__main__
ClassDefinition
p2084
(dp2085
g4
I1
sg5
I01
sg6
g2083
sg7
S'TProbabilityEstimatorConstructor'
p2086
sg9
I00
sg10
(lp2087
sg12
(lp2088
(S'float'
p2089
S'l'
p2090
g2090
S'number of examples added to each class (default: 1)'
p2091
I0
I0
I01
Ntp2092
a(S'bool'
p2093
S'renormalize'
p2094
g2094
S'computes the estimate on the original (not the normalized) distribution'
p2095
I0
I0
I01
Ntp2096
asg29
(dp2097
sbsS'TExamplesDistance_Relief'
p2098
(i__main__
ClassDefinition
p2099
(dp2100
g4
I1
sg5
I01
sg6
g2098
sg7
S'TExamplesDistance'
p2101
sg9
I00
sg10
(lp2102
sg12
(lp2103
(S'TDomainDistributions'
p2104
S'distributions'
p2105
g2105
S"distributions of attributes' values"
p2106
I0
I0
I00
Ntp2107
a(S'TAttributedFloatList'
p2108
S'averages'
p2109
g2109
S'average values of attributes'
p2110
I0
I0
I00
Ntp2111
a(S'TAttributedFloatList'
p2112
S'normalizations'
p2113
g2113
S"ranges of attributes' values"
p2114
I0
I0
I00
Ntp2115
a(S'TAttributedFloatList'
p2116
S'bothSpecial'
p2117
S'both_special'
p2118
S'distance if both values of both attributes are undefined'
p2119
I0
I0
I00
Ntp2120
asg29
(dp2121
sbsS'TExamplesDistance_Manhattan'
p2122
(i__main__
ClassDefinition
p2123
(dp2124
g4
I1
sg5
I01
sg6
g2122
sg7
S'TExamplesDistance_Normalized'
p2125
sg9
I00
sg10
(lp2126
sg12
(lp2127
g454
ag458
ag462
ag466
ag471
ag475
ag480
asg29
(dp2128
sbsS'TExamplesDistanceConstructor_Manhattan'
p2129
(i__main__
ClassDefinition
p2130
(dp2131
g4
I1
sg5
I01
sg6
g2129
sg7
S'TExamplesDistanceConstructor_Normalized'
p2132
sg9
I00
sg10
(lp2133
sg12
(lp2134
g2058
ag2063
ag1325
asg29
(dp2135
sbsS'TStringList'
p2136
(ipyprops
ClassDefinition
p2137
(dp2138
g4
I0
sg5
I01
sg6
g2136
sg7
g143
sg9
I0
sg10
(lp2139
sg12
(lp2140
sg29
(dp2141
sbsS'TTreeDescender'
p2142
(i__main__
ClassDefinition
p2143
(dp2144
g4
I1
sg5
I01
sg6
g2142
sg7
S'TOrange'
p2145
sg9
I01
sg10
(lp2146
sg12
(lp2147
sg29
(dp2148
sbsS'TColumnAssessor_Measure'
p2149
(i__main__
ClassDefinition
p2150
(dp2151
g4
I1
sg5
I01
sg6
g2149
sg7
S'TColumnAssessor'
p2152
sg9
I00
sg10
(lp2153
sg12
(lp2154
(S'TMeasureAttribute'
p2155
S'measure'
p2156
g2156
S'attribute quality measure'
p2157
I0
I0
I00
Ntp2158
asg29
(dp2159
sbsS'TIMBlurer'
p2160
(i__main__
ClassDefinition
p2161
(dp2162
g4
I1
sg5
I01
sg6
g2160
sg7
S'TIMByRowsPreprocessor'
p2163
sg9
I00
sg10
(lp2164
sg12
(lp2165
(S'float'
p2166
S'weight'
p2167
g2167
S'weight of neighbours'
p2168
I0
I0
I01
Ntp2169
a(S'float'
p2170
S'origWeight'
p2171
S'orig_weight'
p2172
S'weight of original row'
p2173
I0
I0
I01
Ntp2174
a(S'TFloatList'
p2175
S'attrWeights'
p2176
S'attr_weights'
p2177
S'weights by individual (different) attributes'
p2178
I0
I0
I00
Ntp2179
a(S'bool'
p2180
S'adjustOrigWeight'
p2181
S'adjust_orig_weight'
p2182
S'uses 1-weight(s) for weight of original row'
p2183
I0
I0
I01
Ntp2184
a(S'bool'
p2185
S'onlyEmpty'
p2186
S'only_empty'
p2187
S'blurs only empty cells'
p2188
I0
I0
I01
Ntp2189
asg29
(dp2190
sbsS'TFilter'
p2191
(i__main__
ClassDefinition
p2192
(dp2193
g4
I1
sg5
I01
sg6
g2191
sg7
S'TOrange'
p2194
sg9
I01
sg10
(lp2195
sg12
(lp2196
g669
ag673
asg29
(dp2197
sbsS'TC45Learner'
p2198
(i__main__
ClassDefinition
p2199
(dp2200
g4
I1
sg5
I01
sg6
g2198
sg7
S'TLearner'
p2201
sg9
I00
sg10
(lp2202
sg12
(lp2203
(S'bool'
p2204
S'gainRatio'
p2205
(g2205
S'g'
p2206
tp2207
S' use gain ratio (instead of information gain)'
p2208
I0
I0
I01
Ntp2209
a(S'bool'
p2210
S'subset'
p2211
(g2211
S's'
p2212
tp2213
S' use subsetting'
p2214
I0
I0
I01
Ntp2215
a(S'bool'
p2216
S'batch'
p2217
(g2217
S'b'
p2218
tp2219
S' batch'
p2220
I0
I0
I01
Ntp2221
a(S'bool'
p2222
S'probThresh'
p2223
(g2223
S'p'
p2224
tp2225
S' probability threshold'
p2226
I0
I0
I01
Ntp2227
a(S'int'
p2228
S'minObjs'
p2229
(g2229
g1170
tp2230
S' minimal number of objects (examples) in leaves'
p2231
I0
I0
I01
Ntp2232
a(S'int'
p2233
S'window'
p2234
(g2234
S'w'
p2235
tp2236
S' window'
p2237
I0
I0
I01
Ntp2238
a(S'int'
p2239
S'increment'
p2240
(g2240
S'i'
p2241
tp2242
S' increment'
p2243
I0
I0
I01
Ntp2244
a(S'float'
p2245
S'cf'
p2246
(g2246
S'c'
p2247
tp2248
S' cf'
p2249
I0
I0
I01
Ntp2250
a(S'int'
p2251
S'trials'
p2252
(g2252
S't'
p2253
tp2254
S' trials'
p2255
I0
I0
I01
Ntp2256
a(S'bool'
p2257
S'prune'
p2258
g2258
S'return pruned tree'
p2259
I0
I0
I01
Ntp2260
a(S'bool'
p2261
S'convertToOrange'
p2262
S'convert_to_orange'
p2263
S'return TreeClassifier instead of C45TreeClassifier'
p2264
I0
I0
I01
Ntp2265
a(S'bool'
p2266
S'storeExamples'
p2267
S'store_examples'
p2268
S'stores examples when (if) converting to TreeClassifier'
p2269
I0
I0
I01
Ntp2270
a(S'bool'
p2271
S'storeContingencies'
p2272
S'store_contingencies'
p2273
S'stores contingencies when (if) converting to TreeClassifier'
p2274
I0
I0
I01
Ntp2275
ag110
asg29
(dp2276
sbsS'TAttributedBoolList'
p2277
(ipyprops
ClassDefinition
p2278
(dp2279
g4
I0
sg5
I01
sg6
g2277
sg7
S'TBoolList'
p2280
sg9
I0
sg10
(lp2281
sg12
(lp2282
sg29
(dp2283
sbsS'TFeatureByMinComplexity'
p2284
(i__main__
ClassDefinition
p2285
(dp2286
g4
I1
sg5
I01
sg6
g2284
sg7
S'TFeatureInducer'
p2287
sg9
I00
sg10
(lp2288
sg12
(lp2289
(S'TColorIG'
p2290
S'colorIG'
p2291
S'color_IG'
p2292
S'graph coloring algorithm'
p2293
I0
I0
I00
Ntp2294
a(S'int'
p2295
S'completion'
p2296
g2296
S' decides how to determine the class for points not covered by any cluster'
p2297
I0
I0
I01
S'FeatureByMinComplexity_Completion'
p2298
tp2299
asg29
(dp2300
S'Completion'
p2301
(lp2302
(S'NoCompletion'
p2303
S'completion_no'
p2304
tp2305
a(S'CompletionByDefault'
p2306
S'completion_default'
p2307
tp2308
a(S'CompletionByBayes'
p2309
S'completion_bayes'
p2310
tp2311
assbsS'TPreprocessor_dropMissingClasses'
p2312
(i__main__
ClassDefinition
p2313
(dp2314
g4
I1
sg5
I01
sg6
g2312
sg7
S'TPreprocessor'
p2315
sg9
I00
sg10
(lp2316
sg12
(lp2317
sg29
(dp2318
sbsS'TkNNClassifier'
p2319
(i__main__
ClassDefinition
p2320
(dp2321
g4
I1
sg5
I01
sg6
g2319
sg7
S'TClassifierFD'
p2322
sg9
I00
sg10
(lp2323
sg12
(lp2324
(S'TFindNearest'
p2325
S'findNearest'
p2326
S'find_nearest'
p2327
g578
I0
I0
I00
Ntp2328
a(S'float'
p2329
g1166
g1166
S'number of neighbours (0 for sqrt of #examples)'
p2330
I0
I0
I01
Ntp2331
a(S'bool'
p2332
S'rankWeight'
p2333
S'rank_weight'
p2334
S'enable weighting by ranks'
p2335
I0
I0
I01
Ntp2336
a(S'int'
p2337
S'weightID'
p2338
S'weight_ID'
p2339
S'id of meta-attribute with weight'
p2340
I0
I0
I01
Ntp2341
a(S'int'
p2342
S'nExamples'
p2343
S'n_examples'
p2344
S'the number of learning examples '
p2345
I0
I0
I01
Ntp2346
ag291
ag94
ag99
asg29
(dp2347
sbsS'TMeasureAttribute_info'
p2348
(i__main__
ClassDefinition
p2349
(dp2350
g4
I1
sg5
I01
sg6
g2348
sg7
S'TMeasureAttributeFromProbabilities'
p2351
sg9
I00
sg10
(lp2352
sg12
(lp2353
g869
ag874
ag880
ag885
ag890
ag895
ag900
asg29
(dp2354
sbsS'TSgnSammonStress'
p2355
(i__main__
ClassDefinition
p2356
(dp2357
g4
I1
sg5
I0
sg6
g2355
sg7
S'TStressFunc'
p2358
sg9
I00
sg10
(lp2359
sg12
(lp2360
sg29
(dp2361
sbsS'TRuleBeamCandidateSelector_TakeAll'
p2362
(i__main__
ClassDefinition
p2363
(dp2364
g4
I1
sg5
I01
sg6
g2362
sg7
S'TRuleBeamCandidateSelector'
p2365
sg9
I00
sg10
(lp2366
sg12
(lp2367
sg29
(dp2368
sbsS'TExamplesDistanceConstructor_Relief'
p2369
(i__main__
ClassDefinition
p2370
(dp2371
g4
I1
sg5
I01
sg6
g2369
sg7
S'TExamplesDistanceConstructor'
p2372
sg9
I00
sg10
(lp2373
sg12
(lp2374
g1325
asg29
(dp2375
sbsS'TOrange'
p2376
(i__main__
ClassDefinition
p2377
(dp2378
g4
I1
sg5
I01
sg6
g2376
sg7
Nsg9
I00
sg10
(lp2379
sg12
(lp2380
sg29
(dp2381
sbsS'TRuleValidator'
p2382
(i__main__
ClassDefinition
p2383
(dp2384
g4
I1
sg5
I01
sg6
g2382
sg7
S'TOrange'
p2385
sg9
I01
sg10
(lp2386
sg12
(lp2387
sg29
(dp2388
sbsS'TColorIG'
p2389
(i__main__
ClassDefinition
p2390
(dp2391
g4
I1
sg5
I01
sg6
g2389
sg7
S'TOrange'
p2392
sg9
I01
sg10
(lp2393
sg12
(lp2394
sg29
(dp2395
sbsS'TRuleValidator_Python'
p2396
(i__main__
ClassDefinition
p2397
(dp2398
g4
I1
sg5
I01
sg6
g2396
sg7
S'TRuleValidator'
p2399
sg9
I00
sg10
(lp2400
sg12
(lp2401
sg29
(dp2402
sbsS'TSubsetsGenerator_constSize_iterator'
p2403
(i__main__
ClassDefinition
p2404
(dp2405
g4
I1
sg5
I01
sg6
g2403
sg7
S'TSubsetsGenerator_iterator'
p2406
sg9
I00
sg10
(lp2407
sg12
(lp2408
(S'bool'
p2409
S'moreToCome'
p2410
S'more_to_come'
p2411
g578
I01
I0
I01
Ntp2412
ag510
asg29
(dp2413
sbsS'TIMByRowsBySorting'
p2414
(i__main__
ClassDefinition
p2415
(dp2416
g4
I1
sg5
I01
sg6
g2414
sg7
S'TIMByRowsConstructor'
p2417
sg9
I00
sg10
(lp2418
sg12
(lp2419
sg29
(dp2420
sbsS'TAssociationLearner'
p2421
(i__main__
ClassDefinition
p2422
(dp2423
g4
I1
sg5
I01
sg6
g2421
sg7
S'TLearner'
p2424
sg9
I00
sg10
(lp2425
sg12
(lp2426
(S'float'
p2427
S'confidence'
p2428
g2428
S'required confidence'
p2429
I0
I0
I01
Ntp2430
a(S'float'
p2431
S'support'
p2432
g2432
S'required support'
p2433
I0
I0
I01
Ntp2434
a(S'int'
p2435
S'voteWeight'
p2436
S'vote_weight'
p2437
S'vote weight (s=support, c=confidence, p=product)'
p2438
I0
I0
I01
Ntp2439
a(S'int'
p2440
S'maxItemSets'
p2441
S'max_item_sets'
p2442
S'maximal number of itemsets (increase if you want)'
p2443
I0
I0
I01
Ntp2444
ag110
asg29
(dp2445
sbsS'TRuleBeamInitializer_Python'
p2446
(i__main__
ClassDefinition
p2447
(dp2448
g4
I1
sg5
I01
sg6
g2446
sg7
S'TRuleBeamInitializer'
p2449
sg9
I00
sg10
(lp2450
sg12
(lp2451
sg29
(dp2452
sbsS'TDistributionAssessor'
p2453
(i__main__
ClassDefinition
p2454
(dp2455
g4
I1
sg5
I01
sg6
g2453
sg7
S'TOrange'
p2456
sg9
I01
sg10
(lp2457
sg12
(lp2458
sg29
(dp2459
sbsS'TRuleCovererAndRemover_Python'
p2460
(i__main__
ClassDefinition
p2461
(dp2462
g4
I1
sg5
I01
sg6
g2460
sg7
S'TRuleCovererAndRemover'
p2463
sg9
I00
sg10
(lp2464
sg12
(lp2465
sg29
(dp2466
sbsS'TMeasureAttribute_gainRatioA'
p2467
(i__main__
ClassDefinition
p2468
(dp2469
g4
I1
sg5
I01
sg6
g2467
sg7
S'TMeasureAttribute_gainRatio'
p2470
sg9
I00
sg10
(lp2471
sg12
(lp2472
g869
ag874
ag880
ag885
ag890
ag895
ag900
asg29
(dp2473
sbsS'TConditionalProbabilityEstimatorConstructor_ByRows'
p2474
(i__main__
ClassDefinition
p2475
(dp2476
g4
I1
sg5
I01
sg6
g2474
sg7
S'TConditionalProbabilityEstimatorConstructor'
p2477
sg9
I00
sg10
(lp2478
sg12
(lp2479
(S'TProbabilityEstimatorConstructor'
p2480
S'estimatorConstructor'
p2481
S'estimator_constructor'
p2482
S'ProbabilityEstimator to be used '
p2483
I0
I0
I00
Ntp2484
asg29
(dp2485
sbsS'TCartesianClassifier'
p2486
(i__main__
ClassDefinition
p2487
(dp2488
g4
I1
sg5
I01
sg6
g2486
sg7
S'TClassifierFD'
p2489
sg9
I00
sg10
(lp2490
sg12
(lp2491
g291
ag94
ag99
asg29
(dp2492
sbsS'TGraphLayout'
p2493
(i__main__
ClassDefinition
p2494
(dp2495
g4
I1
sg5
I0
sg6
g2493
sg7
S'TOrange'
p2496
sg9
I00
sg10
(lp2497
sg12
(lp2498
sg29
(dp2499
sbsS'TLinearClassifier'
p2500
(i__main__
ClassDefinition
p2501
(dp2502
g4
I1
sg5
I01
sg6
g2500
sg7
S'TClassifierFD'
p2503
sg9
I00
sg10
(lp2504
sg12
(lp2505
(S'TFloatListList'
p2506
S'weights'
p2507
g2507
S'Computed feature weights'
p2508
I0
I0
I00
Ntp2509
a(S'TExampleTable'
p2510
S'examples'
p2511
g2511
S'Examples used to train the classifier'
p2512
I0
I0
I00
Ntp2513
ag291
ag94
ag99
asg29
(dp2514
sbsS'TTreeDescender_UnknownToBranch'
p2515
(i__main__
ClassDefinition
p2516
(dp2517
g4
I1
sg5
I01
sg6
g2515
sg7
g1557
sg9
I0
sg10
(lp2518
sg12
(lp2519
sg29
(dp2520
sbsS'TSubsetsGenerator_constSize'
p2521
(i__main__
ClassDefinition
p2522
(dp2523
g4
I1
sg5
I01
sg6
g2521
sg7
S'TSubsetsGenerator'
p2524
sg9
I00
sg10
(lp2525
sg12
(lp2526
(S'int'
p2527
S'B'
p2528
g2528
S'subset size'
p2529
I0
I0
I01
Ntp2530
ag207
asg29
(dp2531
sbsS'TColorIG_MCF'
p2532
(i__main__
ClassDefinition
p2533
(dp2534
g4
I1
sg5
I01
sg6
g2532
sg7
S'TColorIG'
p2535
sg9
I00
sg10
(lp2536
sg12
(lp2537
sg29
(dp2538
sbsS'TBasicAttrStat'
p2539
(i__main__
ClassDefinition
p2540
(dp2541
g4
I1
sg5
I01
sg6
g2539
sg7
S'TOrange'
p2542
sg9
I00
sg10
(lp2543
sg12
(lp2544
(S'float'
p2545
S'sum'
p2546
g2546
S'sum of values'
p2547
I0
I0
I01
Ntp2548
a(S'float'
p2549
S'sum2'
p2550
g2550
S'sum of squares of values'
p2551
I0
I0
I01
Ntp2552
a(S'float'
p2553
S'n'
p2554
g2554
S'number of examples for which the attribute is defined'
p2555
I0
I0
I01
Ntp2556
a(S'float'
p2557
S'min'
p2558
g2558
S'the lowest value of the attribute'
p2559
I0
I0
I01
Ntp2560
a(S'float'
p2561
S'max'
p2562
g2562
S'the highest value of the attribute'
p2563
I0
I0
I01
Ntp2564
a(S'float'
p2565
S'avg'
p2566
g2566
S'the average value of the attribute'
p2567
I0
I0
I01
Ntp2568
a(S'float'
p2569
S'dev'
p2570
g2570
S'the deviation of the value of the attribute'
p2571
I0
I0
I01
Ntp2572
a(S'TVariable'
p2573
S'variable'
p2574
g2574
S'the attribute to which the data applies'
p2575
I0
I0
I00
Ntp2576
a(S'bool'
p2577
S'holdRecomputation'
p2578
S'hold_recomputation'
p2579
S'temporarily disables recomputation of avg and dev while adding values'
p2580
I0
I0
I01
Ntp2581
asg29
(dp2582
sbsS'TTreeSplitConstructor_Attribute'
p2583
(i__main__
ClassDefinition
p2584
(dp2585
g4
I1
sg5
I01
sg6
g2583
sg7
S'TTreeSplitConstructor_Measure'
p2586
sg9
I00
sg10
(lp2587
sg12
(lp2588
g1260
ag1265
ag761
asg29
(dp2589
sbsS'TRemoveRedundantByInduction'
p2590
(i__main__
ClassDefinition
p2591
(dp2592
g4
I1
sg5
I01
sg6
g2590
sg7
S'TRemoveRedundant'
p2593
sg9
I00
sg10
(lp2594
sg12
(lp2595
(S'TFeatureInducer'
p2596
S'featureReducer'
p2597
S'feature_reducer'
p2598
S'feature construction algorithm'
p2599
I0
I0
I00
Ntp2600
a(S'TMeasureAttribute'
p2601
S'measure'
p2602
g2602
S'measure for initial ordering of attributes'
p2603
I0
I0
I00
Ntp2604
a(S'TDiscretization'
p2605
S'discretization'
p2606
g2606
S'discretization method'
p2607
I0
I0
I00
Ntp2608
ag1303
asg29
(dp2609
sbsS'TFilter_conjunction'
p2610
(i__main__
ClassDefinition
p2611
(dp2612
g4
I1
sg5
I01
sg6
g2610
sg7
S'TFilter'
p2613
sg9
I00
sg10
(lp2614
sg12
(lp2615
(S'TFilterList'
p2616
S'filters'
p2617
g2617
S'a list of filters;'
p2618
I0
I0
I00
Ntp2619
ag669
ag673
asg29
(dp2620
sbsS'TExampleForMissing'
p2621
(i__main__
ClassDefinition
p2622
(dp2623
g4
I1
sg5
I01
sg6
g2621
sg7
S'TExample'
p2624
sg9
I00
sg10
(lp2625
sg12
(lp2626
(S'TEFMDataDescription'
p2627
S'dataDescription'
p2628
S'data_description'
p2629
S'data description'
p2630
I0
I0
I00
Ntp2631
a(S'TDomain'
p2632
S'domain'
p2633
g2633
S"Example's domain"
p2634
I01
I0
I00
Ntp2635
a(S'int'
p2636
S'id'
p2637
g2637
g578
I0
I0
I01
Ntp2638
asg29
(dp2639
sbsS'TRuleBeamFilter'
p2640
(i__main__
ClassDefinition
p2641
(dp2642
g4
I1
sg5
I01
sg6
g2640
sg7
S'TOrange'
p2643
sg9
I01
sg10
(lp2644
sg12
(lp2645
sg29
(dp2646
sbsS'TBayesClassifier'
p2647
(i__main__
ClassDefinition
p2648
(dp2649
g4
I1
sg5
I01
sg6
g2647
sg7
S'TClassifierFD'
p2650
sg9
I00
sg10
(lp2651
sg12
(lp2652
(S'TDistribution'
p2653
S'distribution'
p2654
g2654
S'class distributions (P(C))'
p2655
I0
I0
I00
Ntp2656
a(S'TDomainContingency'
p2657
S'conditionalDistributions'
p2658
S'conditional_distributions'
p2659
S'conditional distributions, P(C|A)'
p2660
I0
I0
I00
Ntp2661
a(S'TProbabilityEstimator'
p2662
S'estimator'
p2663
g2663
S'a probability estimator for P(C)'
p2664
I0
I0
I00
Ntp2665
a(S'TConditionalProbabilityEstimatorList'
p2666
S'conditionalEstimators'
p2667
S'conditional_estimators'
p2668
S'a probability estimator for P(C|A)'
p2669
I0
I0
I00
Ntp2670
a(S'bool'
p2671
S'normalizePredictions'
p2672
S'normalize_predictions'
p2673
S'if true, classifier will normalize predictions'
p2674
I0
I0
I01
Ntp2675
a(S'float'
p2676
S'threshold'
p2677
g2677
S'threshold probability for class 1 (for binary classes only)'
p2678
I0
I0
I01
Ntp2679
ag291
ag94
ag99
asg29
(dp2680
sbsS'TGraph'
p2681
(i__main__
ClassDefinition
p2682
(dp2683
g4
I1
sg5
I01
sg6
g2681
sg7
S'TOrange'
p2684
sg9
I01
sg10
(lp2685
sg12
(lp2686
g1448
ag1453
ag1457
asg29
(dp2687
sbsS'TPreprocessor_addClassWeight'
p2688
(i__main__
ClassDefinition
p2689
(dp2690
g4
I1
sg5
I01
sg6
g2688
sg7
S'TPreprocessor'
p2691
sg9
I00
sg10
(lp2692
sg12
(lp2693
(S'TFloatList'
p2694
S'classWeights'
p2695
S'class_weights'
p2696
S'weights of examples of particular classes'
p2697
I0
I0
I00
Ntp2698
a(S'bool'
p2699
S'equalize'
p2700
g2700
S'reweight examples to equalize class proportions'
p2701
I0
I0
I01
Ntp2702
a(S'TRandomGenerator'
p2703
S'randomGenerator'
p2704
S'random_generator'
p2705
S'random number generator'
p2706
I0
I0
I00
Ntp2707
asg29
(dp2708
sbsS'THierarchicalClusterList'
p2709
(ipyprops
ClassDefinition
p2710
(dp2711
g4
I0
sg5
I01
sg6
g2709
sg7
g143
sg9
I0
sg10
(lp2712
sg12
(lp2713
sg29
(dp2714
sbsS'TStopIMClusteringByAssessor'
p2715
(i__main__
ClassDefinition
p2716
(dp2717
g4
I1
sg5
I01
sg6
g2715
sg7
S'TOrange'
p2718
sg9
I01
sg10
(lp2719
sg12
(lp2720
sg29
(dp2721
sbsS'TValueFilter_continuous'
p2722
(i__main__
ClassDefinition
p2723
(dp2724
g4
I1
sg5
I01
sg6
g2722
sg7
S'TValueFilter'
p2725
sg9
I00
sg10
(lp2726
sg12
(lp2727
(S'float'
p2728
S'min'
p2729
(g2729
S'ref'
p2730
tp2731
S' reference value (lower bound for interval operators)'
p2732
I0
I0
I01
Ntp2733
a(S'float'
p2734
S'max'
p2735
g2735
S'upper bound for interval operators'
p2736
I0
I0
I01
Ntp2737
a(S'bool'
p2738
S'outside'
p2739
g2739
S'obsolete: if true, the filter accepts the values outside the interval, not inside'
p2740
I0
I0
I01
Ntp2741
a(S'int'
p2742
S'oper'
p2743
g2743
S' operator'
p2744
I0
I0
I01
S'ValueFilter_Operator'
p2745
tp2746
ag1019
ag1024
asg29
(dp2747
sbsS'TAssociationRule'
p2748
(i__main__
ClassDefinition
p2749
(dp2750
g4
I1
sg5
I01
sg6
g2748
sg7
S'TOrange'
p2751
sg9
I00
sg10
(lp2752
sg12
(lp2753
(S'TExample'
p2754
S'left'
p2755
g2755
S'left side of the rule'
p2756
I01
I0
I00
Ntp2757
a(S'TExample'
p2758
S'right'
p2759
g2759
S'right side of the rule'
p2760
I01
I0
I00
Ntp2761
a(S'float'
p2762
S'support'
p2763
g2763
S'support for the rule'
p2764
I0
I0
I01
Ntp2765
a(S'float'
p2766
S'confidence'
p2767
g2767
S'confidence of the rule'
p2768
I0
I0
I01
Ntp2769
a(S'float'
p2770
S'coverage'
p2771
g2771
S"rule's coverage"
p2772
I0
I0
I01
Ntp2773
a(S'float'
p2774
S'strength'
p2775
g2775
S"rule's strength"
p2776
I0
I0
I01
Ntp2777
a(S'float'
p2778
S'lift'
p2779
g2779
S"rule's lift"
p2780
I0
I0
I01
Ntp2781
a(S'float'
p2782
S'leverage'
p2783
g2783
S"rule's leverage"
p2784
I0
I0
I01
Ntp2785
a(S'float'
p2786
S'nAppliesLeft'
p2787
S'n_applies_left'
p2788
S"number of examples covered by the rule's left side"
p2789
I0
I0
I01
Ntp2790
a(S'float'
p2791
S'nAppliesRight'
p2792
S'n_applies_right'
p2793
S"number of examples covered by the rule's right side"
p2794
I0
I0
I01
Ntp2795
a(S'float'
p2796
S'nAppliesBoth'
p2797
S'n_applies_both'
p2798
S'number of examples covered by the rule'
p2799
I0
I0
I01
Ntp2800
a(S'float'
p2801
S'nExamples'
p2802
S'n_examples'
p2803
S'number of learning examples'
p2804
I0
I0
I01
Ntp2805
a(S'int'
p2806
S'nLeft'
p2807
S'n_left'
p2808
S"number of items on the rule's left side"
p2809
I01
I0
I01
Ntp2810
a(S'int'
p2811
S'nRight'
p2812
S'n_right'
p2813
S"number of items on the rule's right side"
p2814
I01
I0
I01
Ntp2815
a(S'TExampleTable'
p2816
S'examples'
p2817
g2817
S'examples which the rule was built from'
p2818
I01
I0
I00
Ntp2819
a(S'TIntList'
p2820
S'matchLeft'
p2821
S'match_left'
p2822
S'indices of examples that match the left side of the rule'
p2823
I01
I0
I00
Ntp2824
a(S'TIntList'
p2825
S'matchBoth'
p2826
S'match_both'
p2827
S'indices to examples that match both sides of the rule'
p2828
I01
I0
I00
Ntp2829
asg29
(dp2830
sbsS'TValueFilter'
p2831
(i__main__
ClassDefinition
p2832
(dp2833
g4
I1
sg5
I01
sg6
g2831
sg7
S'TOrange'
p2834
sg9
I01
sg10
(lp2835
sg12
(lp2836
g1019
ag1024
asg29
(dp2837
S'Operator'
p2838
(lp2839
(S'None'
p2840
I0
tp2841
a(S'Equal'
p2842
I1
tp2843
a(S'NotEqual'
p2844
I2
tp2845
a(S'Less'
p2846
I3
tp2847
a(S'LessEqual'
p2848
I4
tp2849
a(S'Greater'
p2850
I5
tp2851
a(S'GreaterEqual'
p2852
I6
tp2853
a(S'Between'
p2854
I7
tp2855
a(S'Outside'
p2856
I8
tp2857
a(S'Contains'
p2858
I9
tp2859
a(S'NotContains'
p2860
I10
tp2861
a(S'BeginsWith'
p2862
I11
tp2863
a(S'EndsWith'
p2864
I12
tp2865
a(S'Listed'
p2866
I13
tp2867
assbsS'TClustersFromDistributions'
p2868
(i__main__
ClassDefinition
p2869
(dp2870
g4
I1
sg5
I01
sg6
g2868
sg7
S'TOrange'
p2871
sg9
I01
sg10
(lp2872
sg12
(lp2873
sg29
(dp2874
sbsS'TVariable'
p2875
(i__main__
ClassDefinition
p2876
(dp2877
g4
I1
sg5
I01
sg6
g2875
sg7
S'TOrange'
p2878
sg9
I01
sg10
(lp2879
sg12
(lp2880
g333
ag337
ag341
ag346
ag351
ag356
ag361
asg29
(dp2881
S'Type'
p2882
(lp2883
(S'None'
p2884
S'(int)TValue::NONE'
p2885
tp2886
a(S'Discrete'
p2887
S'(int)TValue::INTVAR'
p2888
tp2889
a(S'Continuous'
p2890
S'(int)TValue::FLOATVAR'
p2891
tp2892
a(S'Other'
p2893
S'(int)(TValue::FLOATVAR+1)'
p2894
tp2895
a(S'String'
p2896
S'(int)STRINGVAR'
p2897
tp2898
asS'MakeStatus'
p2899
(lp2900
(S'OK'
p2901
I0
tp2902
a(S'MissingValues'
p2903
I1
tp2904
a(S'NoRecognizedValues'
p2905
I2
tp2906
a(S'Incompatible'
p2907
I3
tp2908
a(S'NotFound'
p2909
I4
tp2910
assbsS'TNoiseValuesGenerator'
p2911
(i__main__
ClassDefinition
p2912
(dp2913
g4
I1
sg5
I01
sg6
g2911
sg7
S'TChangeExampleGenerator'
p2914
sg9
I00
sg10
(lp2915
sg12
(lp2916
(S'TIntFloatList'
p2917
S'replaceProbabilities'
p2918
S'replace_probabilities'
p2919
S"probabilities for replacing attributes' values"
p2920
I0
I0
I00
Ntp2921
a(S'TRandomGenerator'
p2922
S'randomGenerator'
p2923
S'random_generator'
p2924
S'random generator'
p2925
I0
I0
I00
Ntp2926
ag306
ag310
asg29
(dp2927
sbsS'TC45TreeNodeList'
p2928
(ipyprops
ClassDefinition
p2929
(dp2930
g4
I0
sg5
I01
sg6
g2928
sg7
g143
sg9
I0
sg10
(lp2931
sg12
(lp2932
sg29
(dp2933
sbsS'TFilter_sameValue'
p2934
(i__main__
ClassDefinition
p2935
(dp2936
g4
I1
sg5
I01
sg6
g2934
sg7
S'TFilter'
p2937
sg9
I00
sg10
(lp2938
sg12
(lp2939
(S'int'
p2940
S'position'
p2941
g2941
S'position of the observed attribute'
p2942
I0
I0
I01
Ntp2943
a(S'TValue'
p2944
S'value'
p2945
g2945
S'value that the selected examples should have'
p2946
I0
I0
I01
Ntp2947
ag669
ag673
asg29
(dp2948
sbsS'TEquiNDiscretization'
p2949
(i__main__
ClassDefinition
p2950
(dp2951
g4
I1
sg5
I01
sg6
g2949
sg7
S'TDiscretization'
p2952
sg9
I00
sg10
(lp2953
sg12
(lp2954
(S'int'
p2955
S'numberOfIntervals'
p2956
S'number_of_intervals'
p2957
S'number of intervals'
p2958
I0
I0
I01
Ntp2959
a(S'bool'
p2960
S'recursiveDivision'
p2961
S'recursive_division'
p2962
S'find cut-off points by recursive division (default = true)'
p2963
I0
I0
I01
Ntp2964
asg29
(dp2965
sbsS'TImputerConstructor_average'
p2966
(i__main__
ClassDefinition
p2967
(dp2968
g4
I1
sg5
I01
sg6
g2966
sg7
S'TImputerConstructor'
p2969
sg9
I00
sg10
(lp2970
sg12
(lp2971
g164
asg29
(dp2972
sbsS'TDomainBasicAttrStat'
p2973
(ipyprops
ClassDefinition
p2974
(dp2975
g4
I0
sg5
I01
sg6
S'TDomainBasicAttrStat'
p2976
sg7
g143
sg9
I0
sg10
(lp2977
sg12
(lp2978
sg29
(dp2979
sbsS'TRuleCovererAndRemover'
p2980
(i__main__
ClassDefinition
p2981
(dp2982
g4
I1
sg5
I01
sg6
g2980
sg7
S'TOrange'
p2983
sg9
I01
sg10
(lp2984
sg12
(lp2985
sg29
(dp2986
sbsS'TImputerConstructor_random'
p2987
(i__main__
ClassDefinition
p2988
(dp2989
g4
I1
sg5
I01
sg6
g2987
sg7
S'TImputerConstructor'
p2990
sg9
I00
sg10
(lp2991
sg12
(lp2992
(S'bool'
p2993
S'deterministic'
p2994
g2994
S"tells whether to initialize random by example's CRC (default: false)"
p2995
I0
I0
I01
Ntp2996
ag164
asg29
(dp2997
sbsS'TCostWrapperClassifier'
p2998
(i__main__
ClassDefinition
p2999
(dp3000
g4
I1
sg5
I01
sg6
g2998
sg7
S'TClassifier'
p3001
sg9
I00
sg10
(lp3002
sg12
(lp3003
(S'TClassifier'
p3004
S'classifier'
p3005
g3005
S'basic classifier'
p3006
I0
I0
I00
Ntp3007
a(S'TCostMatrix'
p3008
S'costMatrix'
p3009
S'cost_matrix'
p3010
S'cost matrix'
p3011
I0
I0
I00
Ntp3012
ag94
ag99
asg29
(dp3013
sbsS'TPreprocessor_ignore'
p3014
(i__main__
ClassDefinition
p3015
(dp3016
g4
I1
sg5
I01
sg6
g3014
sg7
S'TPreprocessor'
p3017
sg9
I00
sg10
(lp3018
sg12
(lp3019
(S'TVarList'
p3020
S'attributes'
p3021
g3021
S'tells which attributes to remove'
p3022
I0
I0
I00
Ntp3023
asg29
(dp3024
sbsS'TEVDist'
p3025
(i__main__
ClassDefinition
p3026
(dp3027
g4
I1
sg5
I01
sg6
g3025
sg7
S'TOrange'
p3028
sg9
I00
sg10
(lp3029
sg12
(lp3030
(S'float'
p3031
S'mu'
p3032
g3032
S'mu of Fisher-Tippett distribution'
p3033
I0
I0
I01
Ntp3034
a(S'float'
p3035
S'beta'
p3036
g3036
S'beta of Fisher-Tippett distribution'
p3037
I0
I0
I01
Ntp3038
a(S'TFloatList'
p3039
S'percentiles'
p3040
g3040
S'usually 10 values - 0 = 5th percentile, 1 = 15th percentile, 9 = 95th percentile, change maxPercentile and step for other settings'
p3041
I0
I0
I00
Ntp3042
a(S'float'
p3043
S'maxPercentile'
p3044
S'max_percentile'
p3045
S'maxPercentile Value, default 0.95'
p3046
I0
I0
I01
Ntp3047
a(S'float'
p3048
S'step'
p3049
g3049
S'step of percentiles, default 0.1'
p3050
I0
I0
I01
Ntp3051
asg29
(dp3052
sbsS'TMeasureAttribute_Python'
p3053
(i__main__
ClassDefinition
p3054
(dp3055
g4
I1
sg5
I01
sg6
g3053
sg7
S'TMeasureAttribute'
p3056
sg9
I00
sg10
(lp3057
sg12
(lp3058
g885
ag890
ag895
ag900
asg29
(dp3059
sbsS'TDistributionAssessor_Measure'
p3060
(i__main__
ClassDefinition
p3061
(dp3062
g4
I1
sg5
I01
sg6
g3060
sg7
S'TDistributionAssessor'
p3063
sg9
I00
sg10
(lp3064
sg12
(lp3065
(S'TMeasureAttribute'
p3066
S'measure'
p3067
g3067
S'attribute quality measure'
p3068
I0
I0
I00
Ntp3069
asg29
(dp3070
sbsS'TDistributionAssessor_m'
p3071
(i__main__
ClassDefinition
p3072
(dp3073
g4
I1
sg5
I01
sg6
g3071
sg7
S'TDistributionAssessor'
p3074
sg9
I00
sg10
(lp3075
sg12
(lp3076
(S'float'
p3077
g1170
g1170
S'm for m-estimate'
p3078
I0
I0
I01
Ntp3079
asg29
(dp3080
sbsS'TClassifierRandomGenerator'
p3081
(i__main__
ClassDefinition
p3082
(dp3083
g4
I1
sg5
I01
sg6
g3081
sg7
S'TExampleGenerator'
p3084
sg9
I00
sg10
(lp3085
sg12
(lp3086
(S'TClassifier'
p3087
S'classify'
p3088
g3088
S'classifier'
p3089
I0
I0
I00
Ntp3090
a(S'int'
p3091
S'noOfEx'
p3092
S'no_of_ex'
p3093
S'number of examples'
p3094
I0
I0
I01
Ntp3095
ag306
ag310
asg29
(dp3096
sbsS'TThresholdDiscretizer'
p3097
(i__main__
ClassDefinition
p3098
(dp3099
g4
I1
sg5
I01
sg6
g3097
sg7
S'TDiscretizer'
p3100
sg9
I00
sg10
(lp3101
sg12
(lp3102
(S'float'
p3103
S'threshold'
p3104
g3104
S'threshold'
p3105
I0
I0
I01
Ntp3106
ag783
asg29
(dp3107
sbsS'TPathfinder'
p3108
(i__main__
ClassDefinition
p3109
(dp3110
g4
I1
sg5
I0
sg6
g3108
sg7
S'TOrange'
p3111
sg9
I00
sg10
(lp3112
sg12
(lp3113
sg29
(dp3114
sbsS'TExampleTable'
p3115
(i__main__
ClassDefinition
p3116
(dp3117
g4
I1
sg5
I01
sg6
g3115
sg7
S'TExampleGenerator'
p3118
sg9
I00
sg10
(lp3119
sg12
(lp3120
(S'TRandomGenerator'
p3121
S'randomGenerator'
p3122
S'random_generator'
p3123
S'random generator used by randomExample'
p3124
I0
I0
I00
Ntp3125
a(S'TExampleGenerator'
p3126
S'lock'
p3127
(g3127
S'owner'
p3128
tp3129
S' the real owner of examples'
p3130
I01
I0
I00
Ntp3131
a(S'bool'
p3132
S'ownsExamples'
p3133
(g3133
S'owns_instances'
p3134
tp3135
S' if false, examples in this table are references to examples in another table'
p3136
I01
I0
I01
Ntp3137
ag306
ag310
asg29
(dp3138
sbsS'TEVDistGetter'
p3139
(i__main__
ClassDefinition
p3140
(dp3141
g4
I1
sg5
I01
sg6
g3139
sg7
S'TOrange'
p3142
sg9
I01
sg10
(lp3143
sg12
(lp3144
sg29
(dp3145
sbsNNsS'TStopDistributionClustering_n'
p3146
(i__main__
ClassDefinition
p3147
(dp3148
g4
I1
sg5
I01
sg6
g3146
sg7
S'TStopDistributionClustering'
p3149
sg9
I00
sg10
(lp3150
sg12
(lp3151
(S'int'
p3152
g2554
g2554
S'number of clusters'
p3153
I0
I0
I01
Ntp3154
asg29
(dp3155
sbsS'TTreeExampleSplitter_UnknownsAsSelector'
p3156
(i__main__
ClassDefinition
p3157
(dp3158
g4
I1
sg5
I01
sg6
g3156
sg7
S'TTreeExampleSplitter'
p3159
sg9
I00
sg10
(lp3160
sg12
(lp3161
sg29
(dp3162
sbsS'TClassifier_Python'
p3163
(i__main__
ClassDefinition
p3164
(dp3165
g4
I1
sg5
I01
sg6
g3163
sg7
S'TClassifier'
p3166
sg9
I00
sg10
(lp3167
sg12
(lp3168
g94
ag99
asg29
(dp3169
sbsS'TSgnRelStress'
p3170
(i__main__
ClassDefinition
p3171
(dp3172
g4
I1
sg5
I0
sg6
g3170
sg7
S'TStressFunc'
p3173
sg9
I00
sg10
(lp3174
sg12
(lp3175
sg29
(dp3176
sbsS'TFilter_isDefined'
p3177
(i__main__
ClassDefinition
p3178
(dp3179
g4
I1
sg5
I01
sg6
g3177
sg7
S'TFilter'
p3180
sg9
I00
sg10
(lp3181
sg12
(lp3182
(S'TAttributedBoolList'
p3183
S'check'
p3184
g3184
S'tells which attributes to check; checks all if the list is empty'
p3185
I0
I0
I00
Ntp3186
ag669
ag673
asg29
(dp3187
sbsS'TRemoveRedundantByQuality'
p3188
(i__main__
ClassDefinition
p3189
(dp3190
g4
I1
sg5
I01
sg6
g3188
sg7
S'TRemoveRedundant'
p3191
sg9
I00
sg10
(lp3192
sg12
(lp3193
(S'bool'
p3194
S'remeasure'
p3195
g3195
S'reapply the measure after removal'
p3196
I0
I0
I01
Ntp3197
a(S'float'
p3198
S'minQuality'
p3199
S'min_quality'
p3200
S'minimal acceptable quality'
p3201
I0
I0
I01
Ntp3202
a(S'int'
p3203
S'removeBut'
p3204
S'remove_but'
p3205
S'the desired number of attributes'
p3206
I0
I0
I01
Ntp3207
a(S'TMeasureAttribute'
p3208
S'measure'
p3209
g3209
S'attribute quality measure'
p3210
I0
I0
I00
Ntp3211
ag1303
asg29
(dp3212
sbsS'TGraphAsList'
p3213
(i__main__
ClassDefinition
p3214
(dp3215
g4
I1
sg5
I01
sg6
g3213
sg7
S'TGraph'
p3216
sg9
I00
sg10
(lp3217
sg12
(lp3218
g1448
ag1453
ag1457
asg29
(dp3219
sbsS'TProbabilityEstimatorConstructor_m'
p3220
(i__main__
ClassDefinition
p3221
(dp3222
g4
I1
sg5
I01
sg6
g3220
sg7
S'TProbabilityEstimatorConstructor'
p3223
sg9
I00
sg10
(lp3224
sg12
(lp3225
(S'float'
p3226
g1170
g1170
S'parameter m for m-estimation'
p3227
I0
I0
I01
Ntp3228
a(S'bool'
p3229
S'renormalize'
p3230
g3230
S'computes the estimate on the original (not the normalized) distribution'
p3231
I0
I0
I01
Ntp3232
asg29
(dp3233
sbsS'TDistanceMap'
p3234
(i__main__
ClassDefinition
p3235
(dp3236
g4
I1
sg5
I01
sg6
g3234
sg7
S'TOrange'
p3237
sg9
I00
sg10
(lp3238
sg12
(lp3239
(S'int'
p3240
S'dim'
p3241
g3241
S'bitmap dimension (in cells)'
p3242
I01
I0
I01
Ntp3243
a(S'int'
p3244
S'matrixType'
p3245
S'matrix_type'
p3246
S'0 lower, 1 upper, 2 symmetric'
p3247
I0
I0
I01
Ntp3248
a(S'TIntList'
p3249
S'elementIndices'
p3250
S'element_indices'
p3251
S'indices to elements (one for row + one at the end)'
p3252
I01
I0
I00
Ntp3253
asg29
(dp3254
sbsS'TDistanceMapConstructor'
p3255
(i__main__
ClassDefinition
p3256
(dp3257
g4
I1
sg5
I01
sg6
g3255
sg7
S'TOrange'
p3258
sg9
I00
sg10
(lp3259
sg12
(lp3260
(S'TSymMatrix'
p3261
S'distanceMatrix'
p3262
S'distance_matrix'
p3263
S'distance matrix'
p3264
I0
I0
I00
Ntp3265
a(S'TIntList'
p3266
S'order'
p3267
g3267
S'order of elements'
p3268
I0
I0
I00
Ntp3269
asg29
(dp3270
sbsS'TTransformValue'
p3271
(i__main__
ClassDefinition
p3272
(dp3273
g4
I1
sg5
I01
sg6
g3271
sg7
S'TOrange'
p3274
sg9
I01
sg10
(lp3275
sg12
(lp3276
g783
asg29
(dp3277
sbsS'TComputeDomainContingency_DomainTransformation'
p3278
(i__main__
ClassDefinition
p3279
(dp3280
g4
I1
sg5
I01
sg6
g3278
sg7
S'TComputeDomainContingency'
p3281
sg9
I00
sg10
(lp3282
sg12
(lp3283
(S'TDomainTransformerConstructor'
p3284
S'domainTransformerConstructor'
p3285
S'domain_transformer_constructor'
p3286
S'constructs a domain in which each attribute corresponds one of originals'
p3287
I0
I0
I00
Ntp3288
a(S'bool'
p3289
S'resultInOriginalDomain'
p3290
S'result_in_original_domain'
p3291
S'tells whether the resulting DomainContingency should consist of original attributes'
p3292
I0
I0
I01
Ntp3293
ag28
asg29
(dp3294
sbsS'TStopDistributionClustering_noBigChange'
p3295
(i__main__
ClassDefinition
p3296
(dp3297
g4
I1
sg5
I01
sg6
g3295
sg7
S'TStopDistributionClustering'
p3298
sg9
I00
sg10
(lp3299
sg12
(lp3300
sg29
(dp3301
sbsS'TTreePruner'
p3302
(i__main__
ClassDefinition
p3303
(dp3304
g4
I1
sg5
I01
sg6
g3302
sg7
S'TOrange'
p3305
sg9
I01
sg10
(lp3306
sg12
(lp3307
sg29
(dp3308
sbsg1770
(ipyprops
ClassDefinition
p3309
(dp3310
g4
I0
sg5
I01
sg6
g1770
sg7
g143
sg9
I0
sg10
(lp3311
sg12
(lp3312
sg29
(dp3313
sbsS'TStringValue'
p3314
(i__main__
ClassDefinition
p3315
(dp3316
g4
I1
sg5
I01
sg6
g3314
sg7
S'TSomeValue'
p3317
sg9
I00
sg10
(lp3318
sg12
(lp3319
sg29
(dp3320
sbsS'TVarList'
p3321
(ipyprops
ClassDefinition
p3322
(dp3323
g4
I0
sg5
I01
sg6
g3321
sg7
g143
sg9
I0
sg10
(lp3324
sg12
(lp3325
sg29
(dp3326
sbsS'TRuleLearner'
p3327
(i__main__
ClassDefinition
p3328
(dp3329
g4
I1
sg5
I01
sg6
g3327
sg7
S'TLearner'
p3330
sg9
I00
sg10
(lp3331
sg12
(lp3332
(S'TRuleDataStoppingCriteria'
p3333
S'dataStopping'
p3334
S'data_stopping'
p3335
g578
I0
I0
I00
Ntp3336
a(S'TRuleStoppingCriteria'
p3337
S'ruleStopping'
p3338
S'rule_stopping'
p3339
g578
I0
I0
I00
Ntp3340
a(S'TRuleCovererAndRemover'
p3341
S'coverAndRemove'
p3342
S'cover_and_remove'
p3343
g578
I0
I0
I00
Ntp3344
a(S'TRuleFinder'
p3345
S'ruleFinder'
p3346
S'rule_finder'
p3347
g578
I0
I0
I00
Ntp3348
a(S'TRuleClassifierConstructor'
p3349
S'classifierConstructor'
p3350
S'classifier_constructor'
p3351
S'classifier'
p3352
I0
I0
I00
Ntp3353
a(S'TProgressCallback'
p3354
S'progressCallback'
p3355
S'progress_callback'
p3356
S'progress callback function'
p3357
I0
I0
I00
Ntp3358
a(S'bool'
p3359
S'storeExamples'
p3360
S'store_examples'
p3361
g578
I0
I0
I01
Ntp3362
a(S'int'
p3363
S'targetClass'
p3364
S'target_class'
p3365
g578
I0
I0
I01
Ntp3366
a(S'TRuleList'
p3367
S'baseRules'
p3368
S'base_rules'
p3369
g578
I0
I0
I00
Ntp3370
ag110
asg29
(dp3371
sbsS'TOrdinal2Continuous'
p3372
(i__main__
ClassDefinition
p3373
(dp3374
g4
I1
sg5
I01
sg6
g3372
sg7
S'TTransformValue'
p3375
sg9
I00
sg10
(lp3376
sg12
(lp3377
(S'float'
p3378
S'factor'
p3379
g3379
S'number of values'
p3380
I0
I0
I01
Ntp3381
ag783
asg29
(dp3382
sbsS'TLinearLearner'
p3383
(i__main__
ClassDefinition
p3384
(dp3385
g4
I1
sg5
I01
sg6
g3383
sg7
S'TLearner'
p3386
sg9
I00
sg10
(lp3387
sg12
(lp3388
(S'int'
p3389
S'solver_type'
p3390
g3390
S' Solver type (loss function1)'
p3391
I0
I0
I01
S'LinearLearner_Lossfunction1'
p3392
tp3393
a(S'float'
p3394
S'eps'
p3395
g3395
S'Stopping criteria'
p3396
I0
I0
I01
Ntp3397
a(S'float'
p3398
S'C'
p3399
g3399
S'Regularization parameter'
p3400
I0
I0
I01
Ntp3401
ag110
asg29
(dp3402
S'LIBLINEAR_VERSION'
p3403
(lp3404
(S'VERSION'
p3405
S'180'
p3406
tp3407
asS'Lossfunction1'
p3408
(lp3409
(S'L2R_LR'
p3410
I0
tp3411
a(S'L2R_L2Loss_SVC_Dual'
p3412
I1
tp3413
a(S'L2R_L2Loss_SVC'
p3414
I2
tp3415
a(S'L2R_L1Loss_SVC_Dual'
p3416
I3
tp3417
a(S'MCSVM_CS'
p3418
I4
tp3419
a(S'L1R_L2Loss_SVC'
p3420
I5
tp3421
a(S'L1R_LR'
p3422
I6
tp3423
a(S'L2R_LR_Dual'
p3424
I7
tp3425
asS'Lossfunction1_old_'
p3426
(lp3427
(S'L2_LR'
p3428
I0
tp3429
a(S'L2Loss_SVM_Dual'
p3430
I1
tp3431
a(S'L2Loss_SVM'
p3432
I2
tp3433
a(S'L1Loss_SVM_Dual'
p3434
I3
tp3435
assbsS'TTreeSplitConstructor_Combined'
p3436
(i__main__
ClassDefinition
p3437
(dp3438
g4
I1
sg5
I01
sg6
g3436
sg7
S'TTreeSplitConstructor'
p3439
sg9
I00
sg10
(lp3440
sg12
(lp3441
(S'TTreeSplitConstructor'
p3442
S'discreteSplitConstructor'
p3443
S'discrete_split_constructor'
p3444
S'split constructor for discrete attributes'
p3445
I0
I0
I00
Ntp3446
a(S'TTreeSplitConstructor'
p3447
S'continuousSplitConstructor'
p3448
S'continuous_split_constructor'
p3449
S'split constructor for continuous attributes'
p3450
I0
I0
I00
Ntp3451
ag761
asg29
(dp3452
sbsS'TTransformValue_Python'
p3453
(i__main__
ClassDefinition
p3454
(dp3455
g4
I1
sg5
I01
sg6
g3453
sg7
S'TTransformValue'
p3456
sg9
I00
sg10
(lp3457
sg12
(lp3458
g783
asg29
(dp3459
sbsS'TRuleStoppingCriteria_Python'
p3460
(i__main__
ClassDefinition
p3461
(dp3462
g4
I1
sg5
I01
sg6
g3460
sg7
S'TRuleStoppingCriteria'
p3463
sg9
I00
sg10
(lp3464
sg12
(lp3465
sg29
(dp3466
sbsS'TRuleEvaluator_Python'
p3467
(i__main__
ClassDefinition
p3468
(dp3469
g4
I1
sg5
I01
sg6
g3467
sg7
S'TRuleEvaluator'
p3470
sg9
I00
sg10
(lp3471
sg12
(lp3472
sg29
(dp3473
sbsS'TIGBySorting'
p3474
(i__main__
ClassDefinition
p3475
(dp3476
g4
I1
sg5
I01
sg6
g3474
sg7
S'TIGConstructor'
p3477
sg9
I00
sg10
(lp3478
sg12
(lp3479
sg29
(dp3480
sbsS'TConditionalProbabilityEstimator_ByRows'
p3481
(i__main__
ClassDefinition
p3482
(dp3483
g4
I1
sg5
I01
sg6
g3481
sg7
S'TConditionalProbabilityEstimator'
p3484
sg9
I00
sg10
(lp3485
sg12
(lp3486
(S'TProbabilityEstimatorList'
p3487
S'estimatorList'
p3488
S'estimator_list'
p3489
S'A list of probability estimators'
p3490
I0
I0
I00
Ntp3491
ag133
ag138
asg29
(dp3492
sbsS'TFindNearest'
p3493
(i__main__
ClassDefinition
p3494
(dp3495
g4
I1
sg5
I01
sg6
g3493
sg7
S'TOrange'
p3496
sg9
I01
sg10
(lp3497
sg12
(lp3498
g1049
ag1054
asg29
(dp3499
sbsS'TProgressCallback'
p3500
(i__main__
ClassDefinition
p3501
(dp3502
g4
I1
sg5
I01
sg6
g3500
sg7
S'TOrange'
p3503
sg9
I01
sg10
(lp3504
sg12
(lp3505
sg29
(dp3506
sbsS'THierarchicalClustering'
p3507
(i__main__
ClassDefinition
p3508
(dp3509
g4
I1
sg5
I01
sg6
g3507
sg7
S'TOrange'
p3510
sg9
I00
sg10
(lp3511
sg12
(lp3512
(S'int'
p3513
S'linkage'
p3514
g3514
S' linkage'
p3515
I0
I0
I01
S'HierarchicalClustering_Linkage'
p3516
tp3517
a(S'bool'
p3518
S'overwriteMatrix'
p3519
S'overwrite_matrix'
p3520
S'if true (default is false) it will use (and destroy) the distance matrix given as argument'
p3521
I0
I0
I01
Ntp3522
a(S'TProgressCallback'
p3523
S'progressCallback'
p3524
S'progress_callback'
p3525
S'progress callback function'
p3526
I0
I0
I00
Ntp3527
asg29
(dp3528
S'Linkage'
p3529
(lp3530
(S'Single'
p3531
I0
tp3532
a(S'Average'
p3533
I1
tp3534
a(S'Complete'
p3535
I2
tp3536
a(S'Ward'
p3537
I3
tp3538
assbsS'TLogRegFitter_Cholesky'
p3539
(i__main__
ClassDefinition
p3540
(dp3541
g4
I1
sg5
I01
sg6
g3539
sg7
S'TLogRegFitter'
p3542
sg9
I00
sg10
(lp3543
sg12
(lp3544
sg29
(dp3545
sbsS'TClassifierFromVar'
p3546
(i__main__
ClassDefinition
p3547
(dp3548
g4
I1
sg5
I01
sg6
g3546
sg7
S'TClassifier'
p3549
sg9
I00
sg10
(lp3550
sg12
(lp3551
(S'TVariable'
p3552
S'whichVar'
p3553
(g3553
S'variable'
p3554
tp3555
S' variable'
p3556
I0
I0
I00
Ntp3557
a(S'TTransformValue'
p3558
S'transformer'
p3559
g3559
S'transformer'
p3560
I0
I0
I00
Ntp3561
a(S'TDistribution'
p3562
S'distributionForUnknown'
p3563
S'distribution_for_unknown'
p3564
S'distribution for unknown value'
p3565
I0
I0
I00
Ntp3566
a(S'bool'
p3567
S'transformUnknowns'
p3568
S'transform_unknowns'
p3569
S'if false (default), unknowns stay unknown or are changed into distribution if given'
p3570
I0
I0
I01
Ntp3571
ag94
ag99
asg29
(dp3572
sbsg2280
(ipyprops
ClassDefinition
p3573
(dp3574
g4
I0
sg5
I01
sg6
g2280
sg7
g143
sg9
I0
sg10
(lp3575
sg12
(lp3576
sg29
(dp3577
sbsS'TFilter_index'
p3578
(ipyprops
ClassDefinition
p3579
(dp3580
g4
I0
sg5
I01
sg6
g3578
sg7
g143
sg9
I0
sg10
(lp3581
sg12
(lp3582
sg29
(dp3583
sbsS'TIM'
p3584
(i__main__
ClassDefinition
p3585
(dp3586
g4
I1
sg5
I01
sg6
g3584
sg7
S'TOrange'
p3587
sg9
I00
sg10
(lp3588
sg12
(lp3589
(S'int'
p3590
S'varType'
p3591
S'var_type'
p3592
S' class variable type'
p3593
I0
I0
I01
S'Variable_Type'
p3594
tp3595
a(S'TExampleTable'
p3596
S'rowExamples'
p3597
S'row_examples'
p3598
S'examples with free attributes for each row'
p3599
I0
I0
I00
Ntp3600
asg29
(dp3601
sbsS'TTreeSplitConstructor_OneAgainstOthers'
p3602
(i__main__
ClassDefinition
p3603
(dp3604
g4
I1
sg5
I01
sg6
g3602
sg7
S'TTreeSplitConstructor_Measure'
p3605
sg9
I00
sg10
(lp3606
sg12
(lp3607
g1260
ag1265
ag761
asg29
(dp3608
sbsS'TClassifier'
p3609
(i__main__
ClassDefinition
p3610
(dp3611
g4
I1
sg5
I01
sg6
g3609
sg7
S'TOrange'
p3612
sg9
I00
sg10
(lp3613
sg12
(lp3614
g94
ag99
asg29
(dp3615
sbsS'TTreeSplitConstructor_Python'
p3616
(i__main__
ClassDefinition
p3617
(dp3618
g4
I1
sg5
I01
sg6
g3616
sg7
S'TTreeSplitConstructor'
p3619
sg9
I00
sg10
(lp3620
sg12
(lp3621
g761
asg29
(dp3622
sbsS'TIG'
p3623
(i__main__
ClassDefinition
p3624
(dp3625
g4
I1
sg5
I01
sg6
g3623
sg7
S'TOrange'
p3626
sg9
I00
sg10
(lp3627
sg12
(lp3628
sg29
(dp3629
sbsS'TMeasureAttribute_relief'
p3630
(i__main__
ClassDefinition
p3631
(dp3632
g4
I1
sg5
I01
sg6
g3630
sg7
S'TMeasureAttribute'
p3633
sg9
I00
sg10
(lp3634
sg12
(lp3635
(S'float'
p3636
g1166
g1166
S'number of neighbours'
p3637
I0
I0
I01
Ntp3638
a(S'float'
p3639
g1170
g1170
S'number of reference examples'
p3640
I0
I0
I01
Ntp3641
a(S'bool'
p3642
S'checkCachedData'
p3643
S'check_cached_data'
p3644
S'tells whether to check the checksum of the data before reusing the cached neighbours'
p3645
I0
I0
I01
Ntp3646
ag885
ag890
ag895
ag900
asg29
(dp3647
sbsS'TEarthLearner'
p3648
(i__main__
ClassDefinition
p3649
(dp3650
g4
I1
sg5
I01
sg6
g3648
sg7
S'TLearner'
p3651
sg9
I00
sg10
(lp3652
sg12
(lp3653
(S'int'
p3654
S'max_terms'
p3655
g3655
S'Maximum number of terms.'
p3656
I0
I0
I01
Ntp3657
a(S'int'
p3658
S'max_degree'
p3659
g3659
S'Maximum degree of terms.'
p3660
I0
I0
I01
Ntp3661
a(S'float'
p3662
S'penalty'
p3663
g3663
S'Penalty.'
p3664
I0
I0
I01
Ntp3665
a(S'float'
p3666
S'threshold'
p3667
g3667
S'Forward step threshold.'
p3668
I0
I0
I01
Ntp3669
a(S'bool'
p3670
S'prune'
p3671
g3671
S'Prune terms (do backward pass).'
p3672
I0
I0
I01
Ntp3673
a(S'float'
p3674
S'fast_beta'
p3675
g3675
S'Fast beta (aging coefficient).'
p3676
I0
I0
I01
Ntp3677
a(S'float'
p3678
S'trace'
p3679
g3679
S'Execution trace (for debugging only).'
p3680
I0
I0
I01
Ntp3681
a(S'int'
p3682
S'min_span'
p3683
g3683
S'Min. span (training instances) between knots.'
p3684
I0
I0
I01
Ntp3685
a(S'int'
p3686
S'fast_k'
p3687
g3687
S'Fast K.'
p3688
I0
I0
I01
Ntp3689
a(S'bool'
p3690
S'new_var_penalty'
p3691
g3691
S'Penalty for adding a new variable.'
p3692
I0
I0
I01
Ntp3693
a(S'bool'
p3694
S'use_beta_cache'
p3695
g3695
S'Use caching for betas.'
p3696
I0
I0
I01
Ntp3697
ag110
asg29
(dp3698
sbsS'TMeasureAttribute_logOddsRatio'
p3699
(i__main__
ClassDefinition
p3700
(dp3701
g4
I1
sg5
I01
sg6
g3699
sg7
S'TMeasureAttributeFromProbabilities'
p3702
sg9
I00
sg10
(lp3703
sg12
(lp3704
g869
ag874
ag880
ag885
ag890
ag895
ag900
asg29
(dp3705
sbsS'TTreeExampleSplitter_Python'
p3706
(i__main__
ClassDefinition
p3707
(dp3708
g4
I1
sg5
I01
sg6
g3706
sg7
S'TTreeExampleSplitter'
p3709
sg9
I00
sg10
(lp3710
sg12
(lp3711
sg29
(dp3712
sbsS'TKernelFunc_Python'
p3713
(i__main__
ClassDefinition
p3714
(dp3715
g4
I1
sg5
I01
sg6
g3713
sg7
S'TKernelFunc'
p3716
sg9
I00
sg10
(lp3717
sg12
(lp3718
sg29
(dp3719
sbsS'TAdapterGenerator'
p3720
(i__main__
ClassDefinition
p3721
(dp3722
g4
I1
sg5
I01
sg6
g3720
sg7
S'TExampleGenerator'
p3723
sg9
I00
sg10
(lp3724
sg12
(lp3725
g306
ag310
asg29
(dp3726
sbsS'TIMFromExamples'
p3727
(i__main__
ClassDefinition
p3728
(dp3729
g4
I1
sg5
I01
sg6
g3727
sg7
S'TOrange'
p3730
sg9
I01
sg10
(lp3731
sg12
(lp3732
sg29
(dp3733
sbsS'TFilter_random'
p3734
(i__main__
ClassDefinition
p3735
(dp3736
g4
I1
sg5
I01
sg6
g3734
sg7
S'TFilter'
p3737
sg9
I00
sg10
(lp3738
sg12
(lp3739
(S'float'
p3740
S'prob'
p3741
g3741
S'probability of selecting an example'
p3742
I0
I0
I01
Ntp3743
a(S'TRandomGenerator'
p3744
S'randomGenerator'
p3745
S'random_generator'
p3746
S'random generator'
p3747
I0
I0
I00
Ntp3748
ag669
ag673
asg29
(dp3749
sbsS'TC45ExampleGenerator'
p3750
(i__main__
ClassDefinition
p3751
(dp3752
g4
I1
sg5
I01
sg6
g3750
sg7
S'TFileExampleGenerator'
p3753
sg9
I00
sg10
(lp3754
sg12
(lp3755
(S'TBoolList'
p3756
S'skip'
p3757
g3757
S'a boolean list, one element per attribute, denoting which attributes to skip'
p3758
I0
I0
I00
Ntp3759
ag1595
ag1600
ag1605
ag306
ag310
asg29
(dp3760
sbsS'TProbabilityEstimatorConstructor_loess'
p3761
(i__main__
ClassDefinition
p3762
(dp3763
g4
I1
sg5
I01
sg6
g3761
sg7
S'TProbabilityEstimatorConstructor'
p3764
sg9
I00
sg10
(lp3765
sg12
(lp3766
(S'float'
p3767
S'windowProportion'
p3768
S'window_proportion'
p3769
S'The proportion of points in a window for LR'
p3770
I0
I0
I01
Ntp3771
a(S'int'
p3772
S'nPoints'
p3773
S'n_points'
p3774
S'The number of points on curve (negative means the given number of points is inserted in each interval)'
p3775
I0
I0
I01
Ntp3776
a(S'int'
p3777
S'distributionMethod'
p3778
S'distribution_method'
p3779
S" Meaning of the 'nPoints'"
p3780
I0
I0
I01
S'ProbabilityEstimatorConstructor_loess_DistributionMethod'
p3781
tp3782
asg29
(dp3783
S'DistributionMethod'
p3784
(lp3785
(S'Minimal'
p3786
S'DISTRIBUTE_MINIMAL'
p3787
tp3788
a(S'Factor'
p3789
S'DISTRIBUTE_FACTOR'
p3790
tp3791
a(S'Fixed'
p3792
S'DISTRIBUTE_FIXED'
p3793
tp3794
a(S'Uniform'
p3795
S'DISTRIBUTE_UNIFORM'
p3796
tp3797
a(S'Maximal'
p3798
S'DISTRIBUTE_MAXIMAL'
p3799
tp3800
assbsS'TExamplesDistance_Lp'
p3801
(i__main__
ClassDefinition
p3802
(dp3803
g4
I1
sg5
I01
sg6
g3801
sg7
S'TExamplesDistance_Normalized'
p3804
sg9
I00
sg10
(lp3805
sg12
(lp3806
(S'float'
p3807
g2224
g2224
g2224
I01
I0
I01
Ntp3808
ag454
ag458
ag462
ag466
ag471
ag475
ag480
asg29
(dp3809
sbsS'TLogRegFitter'
p3810
(i__main__
ClassDefinition
p3811
(dp3812
g4
I1
sg5
I01
sg6
g3810
sg7
S'TOrange'
p3813
sg9
I01
sg10
(lp3814
sg12
(lp3815
sg29
(dp3816
S'ErrorCode'
p3817
(lp3818
(S'OK'
p3819
I0
tp3820
a(S'Infinity'
p3821
I1
tp3822
a(S'Divergence'
p3823
I2
tp3824
a(S'Constant'
p3825
I3
tp3826
a(S'Singularity'
p3827
I4
tp3828
assbsS'TMakeRandomIndicesCV'
p3829
(i__main__
ClassDefinition
p3830
(dp3831
g4
I1
sg5
I01
sg6
g3829
sg7
S'TMakeRandomIndices'
p3832
sg9
I00
sg10
(lp3833
sg12
(lp3834
(S'int'
p3835
S'folds'
p3836
g3836
S'number of folds'
p3837
I0
I0
I01
Ntp3838
ag692
ag696
ag701
asg29
(dp3839
sbsS'TClassifierList'
p3840
(ipyprops
ClassDefinition
p3841
(dp3842
g4
I0
sg5
I01
sg6
g3840
sg7
g143
sg9
I0
sg10
(lp3843
sg12
(lp3844
sg29
(dp3845
sbsS'TPreprocessor_removeDuplicates'
p3846
(i__main__
ClassDefinition
p3847
(dp3848
g4
I1
sg5
I01
sg6
g3846
sg7
S'TPreprocessor'
p3849
sg9
I00
sg10
(lp3850
sg12
(lp3851
sg29
(dp3852
sbsS'TTreeExampleSplitter_UnknownsAsBranchSizes'
p3853
(i__main__
ClassDefinition
p3854
(dp3855
g4
I1
sg5
I01
sg6
g3853
sg7
S'TTreeExampleSplitter'
p3856
sg9
I00
sg10
(lp3857
sg12
(lp3858
sg29
(dp3859
sbsS'TExamplesDistanceConstructor_Normalized'
p3860
(i__main__
ClassDefinition
p3861
(dp3862
g4
I1
sg5
I01
sg6
g3860
sg7
S'TExamplesDistanceConstructor'
p3863
sg9
I01
sg10
(lp3864
sg12
(lp3865
g2058
ag2063
ag1325
asg29
(dp3866
sbsS'TCostWrapperLearner'
p3867
(i__main__
ClassDefinition
p3868
(dp3869
g4
I1
sg5
I01
sg6
g3867
sg7
S'TLearner'
p3870
sg9
I00
sg10
(lp3871
sg12
(lp3872
(S'TLearner'
p3873
S'basicLearner'
p3874
S'basic_learner'
p3875
S'basic learner'
p3876
I0
I0
I00
Ntp3877
a(S'TCostMatrix'
p3878
S'costMatrix'
p3879
S'cost_matrix'
p3880
S'cost matrix'
p3881
I0
I0
I00
Ntp3882
ag110
asg29
(dp3883
sbsS'TRandomLearner'
p3884
(i__main__
ClassDefinition
p3885
(dp3886
g4
I1
sg5
I01
sg6
g3884
sg7
S'TLearner'
p3887
sg9
I00
sg10
(lp3888
sg12
(lp3889
(S'TDistribution'
p3890
S'probabilities'
p3891
g3891
S'probabilities of predictions'
p3892
I0
I0
I00
Ntp3893
ag110
asg29
(dp3894
sbsS'TImputer_asValue'
p3895
(i__main__
ClassDefinition
p3896
(dp3897
g4
I1
sg5
I01
sg6
g3895
sg7
S'TImputer'
p3898
sg9
I00
sg10
(lp3899
sg12
(lp3900
(S'TDomain'
p3901
S'domain'
p3902
g3902
S'domain to which the values are converted'
p3903
I0
I0
I00
Ntp3904
a(S'TExample'
p3905
S'defaults'
p3906
g3906
S'values to impute instead of missing ones - for continuous attributes only!'
p3907
I0
I0
I00
Ntp3908
asg29
(dp3909
sbsS'TPearsonCorrelation'
p3910
(i__main__
ClassDefinition
p3911
(dp3912
g4
I1
sg5
I01
sg6
g3910
sg7
S'TOrange'
p3913
sg9
I00
sg10
(lp3914
sg12
(lp3915
(S'float'
p3916
S'r'
p3917
g3917
S'correlation coefficient'
p3918
I0
I0
I01
Ntp3919
a(S'float'
p3920
g2253
g2253
S't-statics significance'
p3921
I0
I0
I01
Ntp3922
a(S'int'
p3923
S'df'
p3924
g3924
S'degrees of freedom'
p3925
I0
I0
I01
Ntp3926
a(S'float'
p3927
g2224
g2224
S'significance'
p3928
I0
I0
I01
Ntp3929
asg29
(dp3930
sbsS'TDistributionAssessor_Laplace'
p3931
(i__main__
ClassDefinition
p3932
(dp3933
g4
I1
sg5
I01
sg6
g3931
sg7
S'TDistributionAssessor'
p3934
sg9
I00
sg10
(lp3935
sg12
(lp3936
sg29
(dp3937
sbsS'TColumnAssessor_Relief'
p3938
(i__main__
ClassDefinition
p3939
(dp3940
g4
I1
sg5
I01
sg6
g3938
sg7
S'TColumnAssessor'
p3941
sg9
I00
sg10
(lp3942
sg12
(lp3943
sg29
(dp3944
sbsS'TClassifierByLookupTable'
p3945
(i__main__
ClassDefinition
p3946
(dp3947
g4
I1
sg5
I01
sg6
g3945
sg7
S'TClassifier'
p3948
sg9
I01
sg10
(lp3949
sg12
(lp3950
g85
ag89
ag94
ag99
asg29
(dp3951
sbsS'TRuleBeamFinder'
p3952
(i__main__
ClassDefinition
p3953
(dp3954
g4
I1
sg5
I01
sg6
g3952
sg7
S'TRuleFinder'
p3955
sg9
I00
sg10
(lp3956
sg12
(lp3957
(S'TRuleBeamInitializer'
p3958
S'initializer'
p3959
g3959
g578
I0
I0
I00
Ntp3960
a(S'TRuleBeamRefiner'
p3961
S'refiner'
p3962
g3962
g578
I0
I0
I00
Ntp3963
a(S'TRuleBeamCandidateSelector'
p3964
S'candidateSelector'
p3965
S'candidate_selector'
p3966
g578
I0
I0
I00
Ntp3967
a(S'TRuleBeamFilter'
p3968
S'ruleFilter'
p3969
S'rule_filter'
p3970
g578
I0
I0
I00
Ntp3971
a(S'TRuleValidator'
p3972
S'ruleStoppingValidator'
p3973
S'rule_stopping_validator'
p3974
g578
I0
I0
I00
Ntp3975
a(S'TRuleValidator'
p3976
S'validator'
p3977
g3977
g578
I0
I0
I00
Ntp3978
a(S'TRuleEvaluator'
p3979
S'evaluator'
p3980
g3980
g578
I0
I0
I00
Ntp3981
asg29
(dp3982
sbsS'TC45Classifier'
p3983
(i__main__
ClassDefinition
p3984
(dp3985
g4
I1
sg5
I01
sg6
g3983
sg7
S'TClassifierFD'
p3986
sg9
I00
sg10
(lp3987
sg12
(lp3988
(S'TC45TreeNode'
p3989
S'tree'
p3990
g3990
S'tree'
p3991
I0
I0
I00
Ntp3992
ag291
ag94
ag99
asg29
(dp3993
sbsS'TGeneralExampleClustering'
p3994
(i__main__
ClassDefinition
p3995
(dp3996
g4
I1
sg5
I01
sg6
g3994
sg7
S'TOrange'
p3997
sg9
I01
sg10
(lp3998
sg12
(lp3999
sg29
(dp4000
sbsS'TMeasureAttribute_cost'
p4001
(i__main__
ClassDefinition
p4002
(dp4003
g4
I1
sg5
I01
sg6
g4001
sg7
S'TMeasureAttributeFromProbabilities'
p4004
sg9
I00
sg10
(lp4005
sg12
(lp4006
(S'TCostMatrix'
p4007
S'cost'
p4008
g4008
S'cost matrix'
p4009
I0
I0
I00
Ntp4010
ag869
ag874
ag880
ag885
ag890
ag895
ag900
asg29
(dp4011
sbsS'TImputerConstructor_minimal'
p4012
(i__main__
ClassDefinition
p4013
(dp4014
g4
I1
sg5
I01
sg6
g4012
sg7
S'TImputerConstructor'
p4015
sg9
I00
sg10
(lp4016
sg12
(lp4017
g164
asg29
(dp4018
sbsS'TClustersFromIM'
p4019
(i__main__
ClassDefinition
p4020
(dp4021
g4
I1
sg5
I01
sg6
g4019
sg7
S'TOrange'
p4022
sg9
I01
sg10
(lp4023
sg12
(lp4024
sg29
(dp4025
sbsS'TFilter_values'
p4026
(i__main__
ClassDefinition
p4027
(dp4028
g4
I1
sg5
I01
sg6
g4026
sg7
S'TFilter'
p4029
sg9
I00
sg10
(lp4030
sg12
(lp4031
(S'TValueFilterList'
p4032
S'conditions'
p4033
g4033
S'a list of filters'
p4034
I0
I0
I00
Ntp4035
a(S'bool'
p4036
S'conjunction'
p4037
g4037
S'if true, filter computes conjunction, otherwise disjunction'
p4038
I0
I0
I01
Ntp4039
ag669
ag673
asg29
(dp4040
S'Operator'
p4041
(lp4042
(S'None'
p4043
I0
tp4044
a(S'Equal'
p4045
I1
tp4046
a(S'NotEqual'
p4047
I2
tp4048
a(S'Less'
p4049
I3
tp4050
a(S'LessEqual'
p4051
I4
tp4052
a(S'Greater'
p4053
I5
tp4054
a(S'GreaterEqual'
p4055
I6
tp4056
a(S'Between'
p4057
I7
tp4058
a(S'Outside'
p4059
I8
tp4060
a(S'Contains'
p4061
I9
tp4062
a(S'NotContains'
p4063
I10
tp4064
a(S'BeginsWith'
p4065
I11
tp4066
a(S'EndsWith'
p4067
I12
tp4068
a(S'Listed'
p4069
I13
tp4070
assbsS'TRuleClassifier'
p4071
(i__main__
ClassDefinition
p4072
(dp4073
g4
I1
sg5
I01
sg6
g4071
sg7
S'TClassifier'
p4074
sg9
I01
sg10
(lp4075
sg12
(lp4076
g579
ag582
ag586
ag94
ag99
asg29
(dp4077
sbsS'TAssociationRules'
p4078
(ipyprops
ClassDefinition
p4079
(dp4080
g4
I0
sg5
I01
sg6
g4078
sg7
g143
sg9
I0
sg10
(lp4081
sg12
(lp4082
sg29
(dp4083
sbsS'TSymMatrix'
p4084
(i__main__
ClassDefinition
p4085
(dp4086
g4
I1
sg5
I01
sg6
g4084
sg7
S'TOrange'
p4087
sg9
I00
sg10
(lp4088
sg12
(lp4089
(S'int'
p4090
S'dim'
p4091
g4091
S'matrix dimension'
p4092
I01
I0
I01
Ntp4093
a(S'int'
p4094
S'matrixType'
p4095
S'matrix_type'
p4096
S' 0 lower, 1 upper, 2 symmetric, 3 lower_filled, 4 upper_filled'
p4097
I0
I0
I01
S'SymMatrix_Shape'
p4098
tp4099
asg29
(dp4100
S'Shape'
p4101
(lp4102
(S'Lower'
p4103
I0
tp4104
a(S'Upper'
p4105
I1
tp4106
a(S'Symmetric'
p4107
I2
tp4108
a(S'LowerFilled'
p4109
I3
tp4110
a(S'UpperFilled'
p4111
I4
tp4112
assbsS'TSVMLearner'
p4113
(i__main__
ClassDefinition
p4114
(dp4115
g4
I1
sg5
I01
sg6
g4113
sg7
S'TLearner'
p4116
sg9
I00
sg10
(lp4117
sg12
(lp4118
(S'int'
p4119
S'svm_type'
p4120
g4120
S'  SVM type (C_SVC=0, NU_SVC, ONE_CLASS, EPSILON_SVR=3, NU_SVR=4)'
p4121
I0
I0
I01
S'SVMLearner_SVMType'
p4122
tp4123
a(S'int'
p4124
S'kernel_type'
p4125
g4125
S'  kernel type (LINEAR=0, POLY, RBF, SIGMOID, CUSTOM=4)'
p4126
I0
I0
I01
S'SVMLearner_Kernel'
p4127
tp4128
a(S'float'
p4129
S'degree'
p4130
g4130
S'polynomial kernel degree'
p4131
I0
I0
I01
Ntp4132
a(S'float'
p4133
S'gamma'
p4134
g4134
S'poly/rbf/sigm parameter'
p4135
I0
I0
I01
Ntp4136
a(S'float'
p4137
S'coef0'
p4138
g4138
S'poly/sigm parameter'
p4139
I0
I0
I01
Ntp4140
a(S'float'
p4141
S'cache_size'
p4142
g4142
S'cache size in MB'
p4143
I0
I0
I01
Ntp4144
a(S'float'
p4145
S'eps'
p4146
g4146
S'stopping criteria'
p4147
I0
I0
I01
Ntp4148
a(S'float'
p4149
g3399
g3399
S'for C_SVC and C_SVR'
p4150
I0
I0
I01
Ntp4151
a(S'float'
p4152
S'nu'
p4153
g4153
S'for NU_SVC and ONE_CLASS'
p4154
I0
I0
I01
Ntp4155
a(S'float'
p4156
g2224
g2224
S'for C_SVR'
p4157
I0
I0
I01
Ntp4158
a(S'int'
p4159
S'shrinking'
p4160
g4160
S'shrinking'
p4161
I0
I0
I01
Ntp4162
a(S'int'
p4163
S'probability'
p4164
g4164
S'probability'
p4165
I0
I0
I01
Ntp4166
a(S'bool'
p4167
S'verbose'
p4168
g4168
S'verbose'
p4169
I0
I0
I01
Ntp4170
a(S'TKernelFunc'
p4171
S'kernelFunc'
p4172
S'kernel_func'
p4173
S'custom kernel function'
p4174
I0
I0
I00
Ntp4175
ag110
asg29
(dp4176
S'Kernel'
p4177
(lp4178
(S'Linear'
p4179
S'LINEAR'
p4180
tp4181
a(S'Polynomial'
p4182
S'POLY'
p4183
tp4184
a(S'RBF'
p4185
S'RBF'
p4186
tp4187
a(S'Sigmoid'
p4188
S'SIGMOID'
p4189
tp4190
a(S'Custom'
p4191
S'PRECOMPUTED'
p4192
tp4193
asS'LIBSVM_VERSION'
p4194
(lp4195
(S'VERSION'
p4196
S'LIBSVM_VERSION'
p4197
tp4198
asS'SVMType'
p4199
(lp4200
(S'C_SVC'
p4201
S'C_SVC'
p4202
tp4203
a(S'Nu_SVC'
p4204
S'NU_SVC'
p4205
tp4206
a(S'OneClass'
p4207
S'ONE_CLASS'
p4208
tp4209
a(S'Epsilon_SVR'
p4210
S'EPSILON_SVR'
p4211
tp4212
a(S'Nu_SVR'
p4213
S'NU_SVR'
p4214
tp4215
assbsS'TPNN'
p4216
(i__main__
ClassDefinition
p4217
(dp4218
g4
I1
sg5
I01
sg6
g4216
sg7
S'TClassifierFD'
p4219
sg9
I00
sg10
(lp4220
sg12
(lp4221
g723
ag727
ag731
ag735
ag740
ag745
ag749
ag291
ag94
ag99
asg29
(dp4222
sbsS'TImputerConstructor_defaults'
p4223
(i__main__
ClassDefinition
p4224
(dp4225
g4
I1
sg5
I01
sg6
g4223
sg7
S'TImputerConstructor'
p4226
sg9
I00
sg10
(lp4227
sg12
(lp4228
(S'TExample'
p4229
S'defaults'
p4230
g4230
S'default values to be imputed instead missing ones'
p4231
I0
I0
I00
Ntp4232
ag164
asg29
(dp4233
sbsS'TConditionalProbabilityEstimatorConstructor'
p4234
(i__main__
ClassDefinition
p4235
(dp4236
g4
I1
sg5
I01
sg6
g4234
sg7
S'TOrange'
p4237
sg9
I01
sg10
(lp4238
sg12
(lp4239
sg29
(dp4240
sbsS'TPreprocessor_takeMissingClasses'
p4241
(i__main__
ClassDefinition
p4242
(dp4243
g4
I1
sg5
I01
sg6
g4241
sg7
S'TPreprocessor'
p4244
sg9
I00
sg10
(lp4245
sg12
(lp4246
sg29
(dp4247
sbsS'TClustersFromIMByAssessor'
p4248
(i__main__
ClassDefinition
p4249
(dp4250
g4
I1
sg5
I01
sg6
g4248
sg7
S'TClustersFromIM'
p4251
sg9
I00
sg10
(lp4252
sg12
(lp4253
(S'TColumnAssessor'
p4254
S'columnAssessor'
p4255
S'column_assessor'
p4256
S'column quality assessor'
p4257
I0
I0
I00
Ntp4258
a(S'TStopIMClusteringByAssessor'
p4259
S'stopCriterion'
p4260
S'stop_criterion'
p4261
S'stop criterion'
p4262
I0
I0
I00
Ntp4263
asg29
(dp4264
sbsS'TRuleValidator_LRS'
p4265
(i__main__
ClassDefinition
p4266
(dp4267
g4
I1
sg5
I01
sg6
g4265
sg7
S'TRuleValidator'
p4268
sg9
I00
sg10
(lp4269
sg12
(lp4270
(S'float'
p4271
S'alpha'
p4272
g4272
g578
I0
I0
I01
Ntp4273
a(S'float'
p4274
S'min_coverage'
p4275
g4275
g578
I0
I0
I01
Ntp4276
a(S'int'
p4277
S'max_rule_complexity'
p4278
g4278
g578
I0
I0
I01
Ntp4279
a(S'float'
p4280
S'min_quality'
p4281
g4281
g578
I0
I0
I01
Ntp4282
asg29
(dp4283
sbsS'TLogRegFitter_Python'
p4284
(i__main__
ClassDefinition
p4285
(dp4286
g4
I1
sg5
I01
sg6
g4284
sg7
S'TLogRegFitter'
p4287
sg9
I00
sg10
(lp4288
sg12
(lp4289
sg29
(dp4290
sbsS'TNetwork'
p4291
(i__main__
ClassDefinition
p4292
(dp4293
g4
I1
sg5
I0
sg6
g4291
sg7
S'TGraphAsList'
p4294
sg9
I00
sg10
(lp4295
sg12
(lp4296
(S'TExampleTable'
p4297
S'items'
p4298
g4298
S'ExampleTable of vertices data'
p4299
I0
I0
I00
Ntp4300
a(S'TExampleTable'
p4301
S'links'
p4302
g4302
S'ExampleTable of edges data'
p4303
I0
I0
I00
Ntp4304
ag1448
ag1453
ag1457
asg29
(dp4305
sbsS'TEarthClassifier'
p4306
(i__main__
ClassDefinition
p4307
(dp4308
g4
I1
sg5
I01
sg6
g4306
sg7
S'TClassifierFD'
p4309
sg9
I00
sg10
(lp4310
sg12
(lp4311
(S'int'
p4312
S'num_preds'
p4313
g4313
S'Number of predictor variables'
p4314
I0
I0
I01
Ntp4315
a(S'int'
p4316
S'num_terms'
p4317
g4317
S'Number of used terms'
p4318
I0
I0
I01
Ntp4319
a(S'int'
p4320
S'max_terms'
p4321
g4321
S'Maximum number of terms'
p4322
I0
I0
I01
Ntp4323
a(S'int'
p4324
S'num_responses'
p4325
g4325
S'Number of response variables'
p4326
I0
I0
I01
Ntp4327
a(S'TBoolList'
p4328
S'best_set'
p4329
g4329
S'Used terms.'
p4330
I0
I0
I00
Ntp4331
a(S'TFloatListList'
p4332
S'dirs'
p4333
g4333
S'max_preds x num_preds matrix'
p4334
I0
I0
I00
Ntp4335
a(S'TFloatListList'
p4336
S'cuts'
p4337
g4337
S'max_preds x num_preds matrix of cuts'
p4338
I0
I0
I00
Ntp4339
a(S'TFloatList'
p4340
S'betas'
p4341
g4341
S'Term coefficients;'
p4342
I0
I0
I00
Ntp4343
ag291
ag94
ag99
asg29
(dp4344
sbsS'TValueList'
p4345
(ipyprops
ClassDefinition
p4346
(dp4347
g4
I0
sg5
I01
sg6
S'TValueList'
p4348
sg7
g143
sg9
I0
sg10
(lp4349
sg12
(lp4350
sg29
(dp4351
sbsS'TTreeExampleSplitter_UnknownsToCommon'
p4352
(i__main__
ClassDefinition
p4353
(dp4354
g4
I1
sg5
I01
sg6
g4352
sg7
S'TTreeExampleSplitter'
p4355
sg9
I00
sg10
(lp4356
sg12
(lp4357
sg29
(dp4358
sbsS'TContDistribution'
p4359
(i__main__
ClassDefinition
p4360
(dp4361
g4
I1
sg5
I01
sg6
g4359
sg7
S'TDistribution'
p4362
sg9
I00
sg10
(lp4363
sg12
(lp4364
(S'TFloatList'
p4365
S'variances'
p4366
g4366
S'variances'
p4367
I0
I0
I00
Ntp4368
a(S'float'
p4369
S'sum'
p4370
g4370
S'weighted sum of elements (i.e. N*average)'
p4371
I01
I0
I01
Ntp4372
a(S'float'
p4373
S'sum2'
p4374
g4374
S'weighted sum of squares of elements'
p4375
I01
I0
I01
Ntp4376
ag1090
ag1094
ag1098
ag1102
ag1106
ag1111
ag1116
ag1121
asg29
(dp4377
sbsS'TTreeDescender_UnknownMergeAsSelector'
p4378
(i__main__
ClassDefinition
p4379
(dp4380
g4
I1
sg5
I01
sg6
g4378
sg7
g1557
sg9
I0
sg10
(lp4381
sg12
(lp4382
sg29
(dp4383
sbsS'TContingencyAttrClass'
p4384
(i__main__
ClassDefinition
p4385
(dp4386
g4
I1
sg5
I01
sg6
g4384
sg7
S'TContingencyClass'
p4387
sg9
I00
sg10
(lp4388
sg12
(lp4389
g1624
ag1629
ag1635
ag1640
ag1645
ag1650
asg29
(dp4390
sbsS'TDomainTransformerConstructor'
p4391
(i__main__
ClassDefinition
p4392
(dp4393
g4
I1
sg5
I01
sg6
g4391
sg7
S'TOrange'
p4394
sg9
I01
sg10
(lp4395
sg12
(lp4396
(S'bool'
p4397
S'preservesOrder'
p4398
S'preserves_order'
p4399
S'a flag telling that original attributes have corresponding attribute in the same order'
p4400
I01
I0
I01
Ntp4401
a(S'bool'
p4402
S'preservesAttributes'
p4403
S'preserves_attributes'
p4404
S'a flag telling whether each original has a corresponding new attribute'
p4405
I01
I0
I01
Ntp4406
asg29
(dp4407
sbsS'TPythonValueSpecial'
p4408
(i__main__
ClassDefinition
p4409
(dp4410
g4
I1
sg5
I01
sg6
g4408
sg7
S'TOrange'
p4411
sg9
I00
sg10
(lp4412
sg12
(lp4413
(S'int'
p4414
S'valueType'
p4415
S'value_type'
p4416
S'value type'
p4417
I0
I0
I01
Ntp4418
asg29
(dp4419
sbsS'TIGConstructor'
p4420
(i__main__
ClassDefinition
p4421
(dp4422
g4
I1
sg5
I01
sg6
g4420
sg7
S'TOrange'
p4423
sg9
I01
sg10
(lp4424
sg12
(lp4425
sg29
(dp4426
sbsS'TProbabilityEstimatorConstructor'
p4427
(i__main__
ClassDefinition
p4428
(dp4429
g4
I1
sg5
I01
sg6
g4427
sg7
S'TOrange'
p4430
sg9
I01
sg10
(lp4431
sg12
(lp4432
sg29
(dp4433
sbsS'TTreeNodeList'
p4434
(ipyprops
ClassDefinition
p4435
(dp4436
g4
I0
sg5
I01
sg6
g4434
sg7
g143
sg9
I0
sg10
(lp4437
sg12
(lp4438
sg29
(dp4439
sbsS'TFloatVariable'
p4440
(i__main__
ClassDefinition
p4441
(dp4442
g4
I1
sg5
I01
sg6
g4440
sg7
S'TVariable'
p4443
sg9
I00
sg10
(lp4444
sg12
(lp4445
(S'float'
p4446
S'startValue'
p4447
S'start_value'
p4448
S'lowest value'
p4449
I0
I0
I01
Ntp4450
a(S'float'
p4451
S'endValue'
p4452
S'end_value'
p4453
S'highest value'
p4454
I0
I0
I01
Ntp4455
a(S'float'
p4456
S'stepValue'
p4457
S'step_value'
p4458
S'step'
p4459
I0
I0
I01
Ntp4460
a(S'int'
p4461
S'numberOfDecimals'
p4462
S'number_of_decimals'
p4463
S'number of digits after decimal point'
p4464
I0
I0
I01
Ntp4465
a(S'bool'
p4466
S'scientificFormat'
p4467
S'scientific_format'
p4468
S'use scientific format in output'
p4469
I0
I0
I01
Ntp4470
a(S'int'
p4471
S'adjustDecimals'
p4472
S'adjust_decimals'
p4473
S"adjust number of decimals according to the values converted (0 - no, 1 - yes, 2 - yes, but haven't seen any yet)"
p4474
I0
I0
I01
Ntp4475
ag333
ag337
ag341
ag346
ag351
ag356
ag361
asg29
(dp4476
sbsS'TImputer_random'
p4477
(i__main__
ClassDefinition
p4478
(dp4479
g4
I1
sg5
I01
sg6
g4477
sg7
S'TImputer'
p4480
sg9
I00
sg10
(lp4481
sg12
(lp4482
(S'bool'
p4483
S'imputeClass'
p4484
S'impute_class'
p4485
S'Tells whether to impute the class values, too (default: true)'
p4486
I0
I0
I01
Ntp4487
a(S'bool'
p4488
S'deterministic'
p4489
g4489
S"tells whether to initialize random by example's CRC (default: false)"
p4490
I0
I0
I01
Ntp4491
a(S'TDistributionList'
p4492
S'distributions'
p4493
g4493
S'probability functions'
p4494
I0
I0
I00
Ntp4495
asg29
(dp4496
sbsS'TFilter_hasMeta'
p4497
(i__main__
ClassDefinition
p4498
(dp4499
g4
I1
sg5
I01
sg6
g4497
sg7
S'TFilter'
p4500
sg9
I00
sg10
(lp4501
sg12
(lp4502
(S'int'
p4503
S'id'
p4504
g4504
S'meta attribute id'
p4505
I0
I0
I01
Ntp4506
ag669
ag673
asg29
(dp4507
sbsS'TProbabilityEstimatorConstructor_kernel'
p4508
(i__main__
ClassDefinition
p4509
(dp4510
g4
I1
sg5
I01
sg6
g4508
sg7
S'TProbabilityEstimatorConstructor'
p4511
sg9
I00
sg10
(lp4512
sg12
(lp4513
(S'float'
p4514
S'minImpact'
p4515
S'min_impact'
p4516
S'Minimal impact the point must have to be counted'
p4517
I0
I0
I01
Ntp4518
a(S'float'
p4519
S'smoothing'
p4520
g4520
S'Smoothing factor'
p4521
I0
I0
I01
Ntp4522
a(S'int'
p4523
S'nPoints'
p4524
S'n_points'
p4525
S'Number of points for curve (negative means the given number of points is inserted in each interval)'
p4526
I0
I0
I01
Ntp4527
asg29
(dp4528
sbsS'TRuleCovererAndRemover_Default'
p4529
(i__main__
ClassDefinition
p4530
(dp4531
g4
I1
sg5
I01
sg6
g4529
sg7
S'TRuleCovererAndRemover'
p4532
sg9
I00
sg10
(lp4533
sg12
(lp4534
sg29
(dp4535
sbsS'TMakeRandomIndices'
p4536
(i__main__
ClassDefinition
p4537
(dp4538
g4
I1
sg5
I01
sg6
g4536
sg7
S'TOrange'
p4539
sg9
I00
sg10
(lp4540
sg12
(lp4541
g692
ag696
ag701
asg29
(dp4542
S'Stratification'
p4543
(lp4544
(S'StratifiedIfPossible'
p4545
S'-1'
p4546
tp4547
a(S'NotStratified'
p4548
I0
tp4549
a(S'Stratified'
p4550
I1
tp4551
assbsS'TFilter_Python'
p4552
(i__main__
ClassDefinition
p4553
(dp4554
g4
I1
sg5
I01
sg6
g4552
sg7
S'TFilter'
p4555
sg9
I00
sg10
(lp4556
sg12
(lp4557
g669
ag673
asg29
(dp4558
sbsS'TRuleBeamInitializer_Default'
p4559
(i__main__
ClassDefinition
p4560
(dp4561
g4
I1
sg5
I01
sg6
g4559
sg7
S'TRuleBeamInitializer'
p4562
sg9
I00
sg10
(lp4563
sg12
(lp4564
sg29
(dp4565
sbsS'TExamplesDistanceConstructor_Python'
p4566
(i__main__
ClassDefinition
p4567
(dp4568
g4
I1
sg5
I01
sg6
g4566
sg7
S'TExamplesDistanceConstructor'
p4569
sg9
I00
sg10
(lp4570
sg12
(lp4571
g1325
asg29
(dp4572
sbsS'TTreeDescender_Python'
p4573
(i__main__
ClassDefinition
p4574
(dp4575
g4
I1
sg5
I01
sg6
g4573
sg7
S'TTreeDescender'
p4576
sg9
I00
sg10
(lp4577
sg12
(lp4578
sg29
(dp4579
sbsS'TSubsetsGenerator_constant'
p4580
(i__main__
ClassDefinition
p4581
(dp4582
g4
I1
sg5
I01
sg6
g4580
sg7
S'TSubsetsGenerator'
p4583
sg9
I00
sg10
(lp4584
sg12
(lp4585
(S'TVarList'
p4586
S'constant'
p4587
g4587
S'a subset that is returned (once!)'
p4588
I0
I0
I00
Ntp4589
ag207
asg29
(dp4590
sbsS'TGaussianNoiseGenerator'
p4591
(i__main__
ClassDefinition
p4592
(dp4593
g4
I1
sg5
I01
sg6
g4591
sg7
S'TChangeExampleGenerator'
p4594
sg9
I00
sg10
(lp4595
sg12
(lp4596
(S'TIntFloatList'
p4597
S'deviations'
p4598
g4598
S"deviations for attributes' values"
p4599
I0
I0
I00
Ntp4600
a(S'TRandomGenerator'
p4601
S'randomGenerator'
p4602
S'random_generator'
p4603
S'random generator'
p4604
I0
I0
I00
Ntp4605
ag306
ag310
asg29
(dp4606
sbsS'TClustersFromDistributionsByAssessor'
p4607
(i__main__
ClassDefinition
p4608
(dp4609
g4
I1
sg5
I01
sg6
g4607
sg7
S'TClustersFromDistributions'
p4610
sg9
I00
sg10
(lp4611
sg12
(lp4612
(S'TDistributionAssessor'
p4613
S'distributionAssessor'
p4614
S'distribution_assessor'
p4615
S'column quality assessor'
p4616
I0
I0
I00
Ntp4617
a(S'TStopDistributionClustering'
p4618
S'stopCriterion'
p4619
S'stop_criterion'
p4620
S'stop criterion'
p4621
I0
I0
I00
Ntp4622
a(S'float'
p4623
S'minProfitProportion'
p4624
S'min_profit_proportion'
p4625
S'minimal merge profit'
p4626
I0
I0
I01
Ntp4627
asg29
(dp4628
sbsS'TExamplesDistance_Hamming'
p4629
(i__main__
ClassDefinition
p4630
(dp4631
g4
I1
sg5
I01
sg6
g4629
sg7
S'TExamplesDistance'
p4632
sg9
I00
sg10
(lp4633
sg12
(lp4634
(S'bool'
p4635
S'ignoreClass'
p4636
S'ignore_class'
p4637
S'if true (default), class value is ignored when computing distances'
p4638
I0
I0
I01
Ntp4639
a(S'bool'
p4640
S'ignoreUnknowns'
p4641
S'ignore_unknowns'
p4642
S'if true (default: false) unknown values are ignored in computation'
p4643
I0
I0
I01
Ntp4644
asg29
(dp4645
sbsS'TDefaultClassifier'
p4646
(i__main__
ClassDefinition
p4647
(dp4648
g4
I1
sg5
I01
sg6
g4646
sg7
S'TClassifier'
p4649
sg9
I00
sg10
(lp4650
sg12
(lp4651
(S'TValue'
p4652
S'defaultVal'
p4653
S'default_val'
p4654
S'default prediction'
p4655
I0
I0
I01
Ntp4656
a(S'TDistribution'
p4657
S'defaultDistribution'
p4658
S'default_distribution'
p4659
S'default distribution'
p4660
I0
I0
I00
Ntp4661
ag94
ag99
asg29
(dp4662
sbsS'TColumnAssessor_Kramer'
p4663
(i__main__
ClassDefinition
p4664
(dp4665
g4
I1
sg5
I01
sg6
g4663
sg7
S'TColumnAssessor'
p4666
sg9
I00
sg10
(lp4667
sg12
(lp4668
sg29
(dp4669
sbsS'TEVDistGetter_Python'
p4670
(i__main__
ClassDefinition
p4671
(dp4672
g4
I1
sg5
I01
sg6
g4670
sg7
S'TEVDistGetter'
p4673
sg9
I00
sg10
(lp4674
sg12
(lp4675
sg29
(dp4676
sbsS'TDiscretization'
p4677
(i__main__
ClassDefinition
p4678
(dp4679
g4
I1
sg5
I01
sg6
g4677
sg7
S'TOrange'
p4680
sg9
I01
sg10
(lp4681
sg12
(lp4682
sg29
(dp4683
sbsS'TTreeSplitConstructor_Measure'
p4684
(i__main__
ClassDefinition
p4685
(dp4686
g4
I1
sg5
I01
sg6
g4684
sg7
S'TTreeSplitConstructor'
p4687
sg9
I01
sg10
(lp4688
sg12
(lp4689
g1260
ag1265
ag761
asg29
(dp4690
sbsS'TTreeNode'
p4691
(i__main__
ClassDefinition
p4692
(dp4693
g4
I1
sg5
I01
sg6
g4691
sg7
S'TOrange'
p4694
sg9
I00
sg10
(lp4695
sg12
(lp4696
(S'TClassifier'
p4697
S'nodeClassifier'
p4698
S'node_classifier'
p4699
S'classifies an example'
p4700
I0
I0
I00
Ntp4701
a(S'TDistribution'
p4702
S'distribution'
p4703
g4703
S'distribution of classes in the node'
p4704
I0
I0
I00
Ntp4705
a(S'TDomainContingency'
p4706
S'contingency'
p4707
g4707
S'domain contingency for examples in the node'
p4708
I0
I0
I00
Ntp4709
a(S'TExampleGenerator'
p4710
S'examples'
p4711
g4711
S'learning examples (if stored)'
p4712
I0
I0
I00
Ntp4713
a(S'int'
p4714
S'weightID'
p4715
S'weight_ID'
p4716
S'weightID used to construct this node'
p4717
I0
I0
I01
Ntp4718
a(S'TClassifier'
p4719
S'branchSelector'
p4720
S'branch_selector'
p4721
S'classifier that select a branch for an example'
p4722
I0
I0
I00
Ntp4723
a(S'TTreeNodeList'
p4724
S'branches'
p4725
g4725
S'classifiers presenting the branches'
p4726
I0
I0
I00
Ntp4727
a(S'TStringList'
p4728
S'branchDescriptions'
p4729
S'branch_descriptions'
p4730
S'descriptions of branches'
p4731
I0
I0
I00
Ntp4732
a(S'TDiscDistribution'
p4733
S'branchSizes'
p4734
S'branch_sizes'
p4735
S'numbers of examples in branches'
p4736
I0
I0
I00
Ntp4737
asg29
(dp4738
sbsS'TTransformValue_IsDefined'
p4739
(i__main__
ClassDefinition
p4740
(dp4741
g4
I1
sg5
I01
sg6
g4739
sg7
S'TTransformValue'
p4742
sg9
I00
sg10
(lp4743
sg12
(lp4744
g783
asg29
(dp4745
sbsS'TFilter_hasClassValue'
p4746
(i__main__
ClassDefinition
p4747
(dp4748
g4
I1
sg5
I01
sg6
g4746
sg7
S'TFilter'
p4749
sg9
I00
sg10
(lp4750
sg12
(lp4751
g669
ag673
asg29
(dp4752
sbsS'TStopDistributionClustering_binary'
p4753
(i__main__
ClassDefinition
p4754
(dp4755
g4
I1
sg5
I01
sg6
g4753
sg7
S'TStopDistributionClustering'
p4756
sg9
I00
sg10
(lp4757
sg12
(lp4758
sg29
(dp4759
sbsS'TIMByRows'
p4760
(i__main__
ClassDefinition
p4761
(dp4762
g4
I1
sg5
I01
sg6
g4760
sg7
S'TOrange'
p4763
sg9
I00
sg10
(lp4764
sg12
(lp4765
(S'int'
p4766
S'varType'
p4767
S'var_type'
p4768
S' class variable type'
p4769
I0
I0
I01
S'Variable_Type'
p4770
tp4771
asg29
(dp4772
sbsS'TRuleFinder'
p4773
(i__main__
ClassDefinition
p4774
(dp4775
g4
I1
sg5
I01
sg6
g4773
sg7
S'TOrange'
p4776
sg9
I01
sg10
(lp4777
sg12
(lp4778
g3978
ag3981
asg29
(dp4779
sbsS'TClassifierByExampleTable'
p4780
(i__main__
ClassDefinition
p4781
(dp4782
g4
I1
sg5
I01
sg6
g4780
sg7
S'TClassifierFD'
p4783
sg9
I00
sg10
(lp4784
sg12
(lp4785
(S'TExampleTable'
p4786
S'sortedExamples'
p4787
S'sorted_examples'
p4788
S'a table of examples'
p4789
I0
I0
I00
Ntp4790
a(S'bool'
p4791
S'containsUnknowns'
p4792
S'contains_unknowns'
p4793
S'if true, the table contains unknown values'
p4794
I0
I0
I01
Ntp4795
a(S'TClassifier'
p4796
S'classifierForUnknown'
p4797
S'classifier_for_unknown'
p4798
S'a classifier for unknown cases'
p4799
I0
I0
I00
Ntp4800
a(S'TEFMDataDescription'
p4801
S'dataDescription'
p4802
S'data_description'
p4803
S'data description'
p4804
I0
I0
I00
Ntp4805
ag291
ag94
ag99
asg29
(dp4806
sbsS'TNetworkOptimization'
p4807
(i__main__
ClassDefinition
p4808
(dp4809
g4
I1
sg5
I0
sg6
g4807
sg7
S'TOrange'
p4810
sg9
I00
sg10
(lp4811
sg12
(lp4812
(S'TNetwork'
p4813
S'network'
p4814
g4814
S'Network'
p4815
I0
I0
I00
Ntp4816
asg29
(dp4817
sbsS'TKernelFunc'
p4818
(i__main__
ClassDefinition
p4819
(dp4820
g4
I1
sg5
I01
sg6
g4818
sg7
S'TOrange'
p4821
sg9
I01
sg10
(lp4822
sg12
(lp4823
sg29
(dp4824
sbsS'TChangeExampleGenerator'
p4825
(i__main__
ClassDefinition
p4826
(dp4827
g4
I1
sg5
I01
sg6
g4825
sg7
S'TAdapterGenerator'
p4828
sg9
I01
sg10
(lp4829
sg12
(lp4830
g306
ag310
asg29
(dp4831
sbsS'TRule'
p4832
(i__main__
ClassDefinition
p4833
(dp4834
g4
I1
sg5
I01
sg6
g4832
sg7
S'TOrange'
p4835
sg9
I00
sg10
(lp4836
sg12
(lp4837
(S'TFilter'
p4838
S'filter'
p4839
g4839
S'stored filter for this rule'
p4840
I0
I0
I00
Ntp4841
a(S'TFilter'
p4842
S'valuesFilter'
p4843
S'values_filter'
p4844
S'Filter_values representation of main filter (sometimes needed)'
p4845
I0
I0
I00
Ntp4846
a(S'TClassifier'
p4847
S'classifier'
p4848
g4848
S'classifies an example'
p4849
I0
I0
I00
Ntp4850
a(S'TLearner'
p4851
S'learner'
p4852
g4852
S'learns a classifier from data'
p4853
I0
I0
I00
Ntp4854
a(S'TRule'
p4855
S'parentRule'
p4856
S'parent_rule'
p4857
g578
I0
I0
I00
Ntp4858
a(S'TDistribution'
p4859
S'baseDist'
p4860
S'base_dist'
p4861
S'initial distribution'
p4862
I0
I0
I00
Ntp4863
a(S'TDistribution'
p4864
S'classDistribution'
p4865
S'class_distribution'
p4866
S'distribution of classes covered by the rule'
p4867
I0
I0
I00
Ntp4868
a(S'TExampleTable'
p4869
S'examples'
p4870
g4870
S'covered examples'
p4871
I0
I0
I00
Ntp4872
a(S'int'
p4873
S'weightID'
p4874
S'weight_ID'
p4875
S'weight for the stored examples'
p4876
I0
I0
I01
Ntp4877
a(S'float'
p4878
S'quality'
p4879
g4879
S'some measure of rule quality'
p4880
I0
I0
I01
Ntp4881
a(S'int'
p4882
S'complexity'
p4883
g4883
g578
I0
I0
I01
Ntp4884
a(S'float'
p4885
S'chi'
p4886
g4886
g578
I0
I0
I01
Ntp4887
a(S'int'
p4888
S'requiredConditions'
p4889
S'required_conditions'
p4890
S'conditions that are mandatory in rule - rule attribute significance avoids these'
p4891
I0
I0
I01
Ntp4892
asg29
(dp4893
sbsS'TIntervalDiscretizer'
p4894
(i__main__
ClassDefinition
p4895
(dp4896
g4
I1
sg5
I01
sg6
g4894
sg7
S'TDiscretizer'
p4897
sg9
I00
sg10
(lp4898
sg12
(lp4899
(S'TFloatList'
p4900
S'points'
p4901
g4901
S'cut-off points'
p4902
I0
I0
I00
Ntp4903
ag783
asg29
(dp4904
sbsS'TClassifierByLookupTable2'
p4905
(i__main__
ClassDefinition
p4906
(dp4907
g4
I1
sg5
I01
sg6
g4905
sg7
S'TClassifierByLookupTable'
p4908
sg9
I00
sg10
(lp4909
sg12
(lp4910
(S'TVariable'
p4911
S'variable1'
p4912
g4912
S'the first attribute used for classification'
p4913
I01
I0
I00
Ntp4914
a(S'TVariable'
p4915
S'variable2'
p4916
g4916
S'the second attribute used for classification'
p4917
I01
I0
I00
Ntp4918
a(S'int'
p4919
S'noOfValues1'
p4920
S'no_of_values1'
p4921
S'number of values of the first attribute'
p4922
I01
I0
I01
Ntp4923
a(S'int'
p4924
S'noOfValues2'
p4925
S'no_of_values2'
p4926
S'number of values of the second attribute'
p4927
I01
I0
I01
Ntp4928
a(S'TEFMDataDescription'
p4929
S'dataDescription'
p4930
S'data_description'
p4931
S'data description'
p4932
I0
I0
I00
Ntp4933
ag85
ag89
ag94
ag99
asg29
(dp4934
sbsS'TPreprocessor_addClassNoise'
p4935
(i__main__
ClassDefinition
p4936
(dp4937
g4
I1
sg5
I01
sg6
g4935
sg7
S'TPreprocessor'
p4938
sg9
I00
sg10
(lp4939
sg12
(lp4940
(S'float'
p4941
S'proportion'
p4942
g4942
S'proportion of changed class values'
p4943
I0
I0
I01
Ntp4944
a(S'TRandomGenerator'
p4945
S'randomGenerator'
p4946
S'random_generator'
p4947
S'random number generator'
p4948
I0
I0
I00
Ntp4949
asg29
(dp4950
sbsS'TExampleGenerator'
p4951
(i__main__
ClassDefinition
p4952
(dp4953
g4
I1
sg5
I01
sg6
g4951
sg7
S'TOrange'
p4954
sg9
I01
sg10
(lp4955
sg12
(lp4956
g306
ag310
asg29
(dp4957
sbsS'TClassifierByLookupTable1'
p4958
(i__main__
ClassDefinition
p4959
(dp4960
g4
I1
sg5
I01
sg6
g4958
sg7
S'TClassifierByLookupTable'
p4961
sg9
I00
sg10
(lp4962
sg12
(lp4963
(S'TVariable'
p4964
S'variable1'
p4965
(g4965
S'variable'
p4966
tp4967
S' attribute used for classification'
p4968
I01
I0
I00
Ntp4969
ag85
ag89
ag94
ag99
asg29
(dp4970
sbsS'TRuleClassifierConstructor_Python'
p4971
(i__main__
ClassDefinition
p4972
(dp4973
g4
I1
sg5
I01
sg6
g4971
sg7
S'TRuleClassifierConstructor'
p4974
sg9
I00
sg10
(lp4975
sg12
(lp4976
sg29
(dp4977
sbsS'TRemoveRedundantOneValue'
p4978
(i__main__
ClassDefinition
p4979
(dp4980
g4
I1
sg5
I01
sg6
g4978
sg7
S'TRemoveRedundant'
p4981
sg9
I00
sg10
(lp4982
sg12
(lp4983
(S'bool'
p4984
S'onData'
p4985
S'on_data'
p4986
S'observe the actual number of value on the data (not on attribute definitions)'
p4987
I0
I0
I01
Ntp4988
ag1303
asg29
(dp4989
sbsS'TDistributionAssessor_Relief'
p4990
(i__main__
ClassDefinition
p4991
(dp4992
g4
I1
sg5
I01
sg6
g4990
sg7
S'TDistributionAssessor'
p4993
sg9
I00
sg10
(lp4994
sg12
(lp4995
sg29
(dp4996
sbsS'TEnumVariable'
p4997
(i__main__
ClassDefinition
p4998
(dp4999
g4
I1
sg5
I01
sg6
g4997
sg7
S'TVariable'
p5000
sg9
I00
sg10
(lp5001
sg12
(lp5002
(S'TStringList'
p5003
S'values'
p5004
g5004
S"attribute's values"
p5005
I0
I0
I00
Ntp5006
a(S'int'
p5007
S'baseValue'
p5008
S'base_value'
p5009
S'the index of the base value'
p5010
I0
I0
I01
Ntp5011
ag333
ag337
ag341
ag346
ag351
ag356
ag361
asg29
(dp5012
sbsS'TConditionalProbabilityEstimatorConstructor_loess'
p5013
(i__main__
ClassDefinition
p5014
(dp5015
g4
I1
sg5
I01
sg6
g5013
sg7
S'TConditionalProbabilityEstimatorConstructor'
p5016
sg9
I00
sg10
(lp5017
sg12
(lp5018
(S'float'
p5019
S'windowProportion'
p5020
S'window_proportion'
p5021
S'The proportion of points in a window for LR'
p5022
I0
I0
I01
Ntp5023
a(S'int'
p5024
S'nPoints'
p5025
S'n_points'
p5026
S'The number of points on curve'
p5027
I0
I0
I01
Ntp5028
a(S'int'
p5029
S'distributionMethod'
p5030
S'distribution_method'
p5031
S" Meaning of the 'nPoints'"
p5032
I0
I0
I01
S'ConditionalProbabilityEstimatorConstructor_loess_DistributionMethod'
p5033
tp5034
asg29
(dp5035
S'DistributionMethod'
p5036
(lp5037
(S'Minimal'
p5038
S'DISTRIBUTE_MINIMAL'
p5039
tp5040
a(S'Factor'
p5041
S'DISTRIBUTE_FACTOR'
p5042
tp5043
a(S'Fixed'
p5044
S'DISTRIBUTE_FIXED'
p5045
tp5046
a(S'Uniform'
p5047
S'DISTRIBUTE_UNIFORM'
p5048
tp5049
a(S'Maximal'
p5050
S'DISTRIBUTE_MAXIMAL'
p5051
tp5052
assbsS'TPreprocessor_addMissing'
p5053
(i__main__
ClassDefinition
p5054
(dp5055
g4
I1
sg5
I01
sg6
g5053
sg7
S'TPreprocessor'
p5056
sg9
I00
sg10
(lp5057
sg12
(lp5058
(S'TVariableFloatMap'
p5059
S'proportions'
p5060
g5060
S'proportion of removed values for individual values'
p5061
I0
I0
I00
Ntp5062
a(S'float'
p5063
S'defaultProportion'
p5064
S'default_proportion'
p5065
S'default proportion of removed values (for attributes not specified above)'
p5066
I0
I0
I01
Ntp5067
a(S'int'
p5068
S'specialType'
p5069
S'special_type'
p5070
S'special value type (1=DC, 2=DK)'
p5071
I0
I0
I01
Ntp5072
a(S'TRandomGenerator'
p5073
S'randomGenerator'
p5074
S'random_generator'
p5075
S'random number generator'
p5076
I0
I0
I00
Ntp5077
asg29
(dp5078
sbsS'TRuleBeamCandidateSelector'
p5079
(i__main__
ClassDefinition
p5080
(dp5081
g4
I1
sg5
I01
sg6
g5079
sg7
S'TOrange'
p5082
sg9
I01
sg10
(lp5083
sg12
(lp5084
sg29
(dp5085
sbsS'TSubsetsGenerator_minMaxSize'
p5086
(i__main__
ClassDefinition
p5087
(dp5088
g4
I1
sg5
I01
sg6
g5086
sg7
S'TSubsetsGenerator'
p5089
sg9
I00
sg10
(lp5090
sg12
(lp5091
(S'int'
p5092
S'min'
p5093
g5093
S'minimal subset size'
p5094
I0
I0
I01
Ntp5095
a(S'int'
p5096
S'max'
p5097
g5097
S'maximal subset size'
p5098
I0
I0
I01
Ntp5099
ag207
asg29
(dp5100
sbsS'TMakeRandomIndicesN'
p5101
(i__main__
ClassDefinition
p5102
(dp5103
g4
I1
sg5
I01
sg6
g5101
sg7
S'TMakeRandomIndices'
p5104
sg9
I00
sg10
(lp5105
sg12
(lp5106
(S'TFloatList'
p5107
g2224
g2224
S'probabilities of indices (last is 1-sum(p))'
p5108
I0
I0
I00
Ntp5109
ag692
ag696
ag701
asg29
(dp5110
sbsS'TTreeExampleSplitter_UnknownsToAll'
p5111
(i__main__
ClassDefinition
p5112
(dp5113
g4
I1
sg5
I01
sg6
g5111
sg7
S'TTreeExampleSplitter'
p5114
sg9
I00
sg10
(lp5115
sg12
(lp5116
sg29
(dp5117
sbsS'TValueFilter_stringList'
p5118
(i__main__
ClassDefinition
p5119
(dp5120
g4
I1
sg5
I01
sg6
g5118
sg7
S'TValueFilter'
p5121
sg9
I00
sg10
(lp5122
sg12
(lp5123
(S'TStringList'
p5124
S'values'
p5125
g5125
S'accepted values'
p5126
I0
I0
I00
Ntp5127
a(S'bool'
p5128
S'caseSensitive'
p5129
S'case_sensitive'
p5130
S'if true (default), the comparison is case sensitive'
p5131
I0
I0
I01
Ntp5132
ag1019
ag1024
asg29
(dp5133
sbsS'TContingencyClass'
p5134
(i__main__
ClassDefinition
p5135
(dp5136
g4
I1
sg5
I01
sg6
g5134
sg7
S'TContingency'
p5137
sg9
I01
sg10
(lp5138
sg12
(lp5139
g1624
ag1629
ag1635
ag1640
ag1645
ag1650
asg29
(dp5140
sbsS'TAssociationClassifier'
p5141
(i__main__
ClassDefinition
p5142
(dp5143
g4
I1
sg5
I01
sg6
g5141
sg7
S'TClassifierFD'
p5144
sg9
I00
sg10
(lp5145
sg12
(lp5146
(S'TAssociationRules'
p5147
S'rules'
p5148
g5148
S'association rules'
p5149
I0
I0
I00
Ntp5150
a(S'int'
p5151
S'voteWeight'
p5152
S'vote_weight'
p5153
S'vote weight (s=support, c=confidence, p=product)'
p5154
I0
I0
I01
Ntp5155
ag291
ag94
ag99
asg29
(dp5156
sbsS'TDomainDistributions'
p5157
(ipyprops
ClassDefinition
p5158
(dp5159
g4
I0
sg5
I01
sg6
S'TDomainDistributions'
p5160
sg7
g143
sg9
I0
sg10
(lp5161
sg12
(lp5162
sg29
(dp5163
sbsS'TSVMLearnerSparse'
p5164
(i__main__
ClassDefinition
p5165
(dp5166
g4
I1
sg5
I01
sg6
g5164
sg7
S'TSVMLearner'
p5167
sg9
I00
sg10
(lp5168
sg12
(lp5169
(S'bool'
p5170
S'useNonMeta'
p5171
S'use_non_meta'
p5172
S'include non meta attributes in the learning process'
p5173
I0
I0
I01
Ntp5174
ag4123
ag4128
ag4132
ag4136
ag4140
ag4144
ag4148
ag4151
ag4155
ag4158
ag4162
ag4166
ag4170
ag4175
ag110
asg29
(dp5175
sbsS'TDomain'
p5176
(i__main__
ClassDefinition
p5177
(dp5178
g4
I1
sg5
I01
sg6
g5176
sg7
S'TOrange'
p5179
sg9
I00
sg10
(lp5180
sg12
(lp5181
(S'TVariable'
p5182
S'classVar'
p5183
S'class_var'
p5184
S'class variable'
p5185
I01
I0
I00
Ntp5186
a(S'TVarList'
p5187
S'attributes'
p5188
g5188
S'list of attributes, excluding the class'
p5189
I01
I0
I00
Ntp5190
a(S'TVarList'
p5191
S'variables'
p5192
g5192
S'list of attributes, including the class at the end of the list'
p5193
I01
I0
I00
Ntp5194
a(S'TVarList'
p5195
S'classes'
p5196
g5196
S'list of class variables, if multiple; else None'
p5197
I01
I0
I00
Ntp5198
a(S'int'
p5199
S'version'
p5200
g5200
S"unique version identifier; it's changed each time a domain is changed"
p5201
I01
I0
I01
Ntp5202
asg29
(dp5203
sbsS'TTreePruner_SameMajority'
p5204
(i__main__
ClassDefinition
p5205
(dp5206
g4
I1
sg5
I01
sg6
g5204
sg7
S'TTreePruner'
p5207
sg9
I00
sg10
(lp5208
sg12
(lp5209
sg29
(dp5210
sbsS'TSubsetsGenerator_constant_iterator'
p5211
(i__main__
ClassDefinition
p5212
(dp5213
g4
I1
sg5
I01
sg6
g5211
sg7
S'TSubsetsGenerator_iterator'
p5214
sg9
I00
sg10
(lp5215
sg12
(lp5216
(S'TVarList'
p5217
S'constant'
p5218
g5218
S'a subset that is returned (once!)'
p5219
I0
I0
I00
Ntp5220
a(S'bool'
p5221
S'moreToCome'
p5222
S'more_to_come'
p5223
g578
I0
I0
I01
Ntp5224
ag510
asg29
(dp5225
sbsS'TExampleDistConstructor'
p5226
(i__main__
ClassDefinition
p5227
(dp5228
g4
I1
sg5
I01
sg6
g5226
sg7
S'TOrange'
p5229
sg9
I01
sg10
(lp5230
sg12
(lp5231
sg29
(dp5232
sbsS'TIMByIMByRows'
p5233
(i__main__
ClassDefinition
p5234
(dp5235
g4
I1
sg5
I01
sg6
g5233
sg7
S'TIMConstructor'
p5236
sg9
I00
sg10
(lp5237
sg12
(lp5238
g1207
asg29
(dp5239
sbsS'TAlignmentList'
p5240
(ipyprops
ClassDefinition
p5241
(dp5242
g4
I0
sg5
I01
sg6
g5240
sg7
g143
sg9
I0
sg10
(lp5243
sg12
(lp5244
sg29
(dp5245
sbsS'TDiscrete2Continuous'
p5246
(i__main__
ClassDefinition
p5247
(dp5248
g4
I1
sg5
I01
sg6
g5246
sg7
S'TTransformValue'
p5249
sg9
I00
sg10
(lp5250
sg12
(lp5251
(S'int'
p5252
S'value'
p5253
g5253
S'target value'
p5254
I0
I0
I01
Ntp5255
a(S'bool'
p5256
S'invert'
p5257
g5257
S'give 1.0 to values not equal to the target'
p5258
I0
I0
I01
Ntp5259
a(S'bool'
p5260
S'zeroBased'
p5261
S'zero_based'
p5262
S'if true (default) it gives values 0.0 and 1.0; else -1.0 and 1.0, 0.0 for undefined'
p5263
I0
I0
I01
Ntp5264
ag783
asg29
(dp5265
sbsS'TDomainDiscretization'
p5266
(i__main__
ClassDefinition
p5267
(dp5268
g4
I1
sg5
I01
sg6
g5266
sg7
S'TOrange'
p5269
sg9
I00
sg10
(lp5270
sg12
(lp5271
(S'TDiscretization'
p5272
S'discretization'
p5273
g5273
S'discretization'
p5274
I0
I0
I00
Ntp5275
asg29
(dp5276
sbsS'TColumnAssessor_m'
p5277
(i__main__
ClassDefinition
p5278
(dp5279
g4
I1
sg5
I01
sg6
g5277
sg7
S'TColumnAssessor'
p5280
sg9
I00
sg10
(lp5281
sg12
(lp5282
(S'float'
p5283
g1170
g1170
S'm for m-estimate'
p5284
I0
I0
I01
Ntp5285
asg29
(dp5286
sbsS'TImputer_defaults'
p5287
(i__main__
ClassDefinition
p5288
(dp5289
g4
I1
sg5
I01
sg6
g5287
sg7
S'TImputer'
p5290
sg9
I00
sg10
(lp5291
sg12
(lp5292
(S'TExample'
p5293
S'defaults'
p5294
g5294
S'values that are to be inserted instead of missing ones'
p5295
I0
I0
I00
Ntp5296
asg29
(dp5297
sbsS'TRuleEvaluator_mEVC'
p5298
(i__main__
ClassDefinition
p5299
(dp5300
g4
I1
sg5
I01
sg6
g5298
sg7
S'TRuleEvaluator'
p5301
sg9
I00
sg10
(lp5302
sg12
(lp5303
(S'float'
p5304
g1170
g1170
S'Parameter m for m-estimate after EVC correction'
p5305
I0
I0
I01
Ntp5306
a(S'TEVDistGetter'
p5307
S'evDistGetter'
p5308
S'ev_dist_getter'
p5309
S'get EVC distribution for chi correction'
p5310
I0
I0
I00
Ntp5311
a(S'TVariable'
p5312
S'probVar'
p5313
S'prob_var'
p5314
S'probability coverage variable (meta usually)'
p5315
I0
I0
I00
Ntp5316
a(S'TRuleValidator'
p5317
S'validator'
p5318
g5318
S'rule validator for best rule'
p5319
I0
I0
I00
Ntp5320
a(S'int'
p5321
S'min_improved'
p5322
g5322
S'minimal number of improved examples'
p5323
I0
I0
I01
Ntp5324
a(S'float'
p5325
S'min_improved_perc'
p5326
g5326
S'minimal percentage of improved examples'
p5327
I0
I0
I01
Ntp5328
a(S'TRule'
p5329
S'bestRule'
p5330
S'best_rule'
p5331
S'best rule found and evaluated given conditions (min_improved, validator)'
p5332
I0
I0
I00
Ntp5333
a(S'float'
p5334
S'ruleAlpha'
p5335
S'rule_alpha'
p5336
S"minimal 'true' rule significance"
p5337
I0
I0
I01
Ntp5338
a(S'float'
p5339
S'attributeAlpha'
p5340
S'attribute_alpha'
p5341
S'minimal attribute significance'
p5342
I0
I0
I01
Ntp5343
a(S'bool'
p5344
S'returnExpectedProb'
p5345
S'return_expected_prob'
p5346
S'if true, evaluator returns expected class probability, if false, current class probability'
p5347
I0
I0
I01
Ntp5348
a(S'int'
p5349
S'optimismReduction'
p5350
S'optimism_reduction'
p5351
S'to select optimstic (0), pessimistic (1) or EVC (2) evaluation'
p5352
I0
I0
I01
Ntp5353
asg29
(dp5354
sbsS'TContingency'
p5355
(i__main__
ClassDefinition
p5356
(dp5357
g4
I1
sg5
I01
sg6
g5355
sg7
S'TOrange'
p5358
sg9
I00
sg10
(lp5359
sg12
(lp5360
g1624
ag1629
ag1635
ag1640
ag1645
ag1650
asg29
(dp5361
sbsS'TImputer_Python'
p5362
(i__main__
ClassDefinition
p5363
(dp5364
g4
I1
sg5
I01
sg6
g5362
sg7
S'TImputer'
p5365
sg9
I00
sg10
(lp5366
sg12
(lp5367
sg29
(dp5368
sbsS'TClassifierGenerator'
p5369
(i__main__
ClassDefinition
p5370
(dp5371
g4
I1
sg5
I01
sg6
g5369
sg7
S'TExampleGenerator'
p5372
sg9
I00
sg10
(lp5373
sg12
(lp5374
(S'TClassifier'
p5375
S'classify'
p5376
g5376
S'classifier'
p5377
I0
I0
I00
Ntp5378
ag306
ag310
asg29
(dp5379
sbsS'TRuleDataStoppingCriteria_Python'
p5380
(i__main__
ClassDefinition
p5381
(dp5382
g4
I1
sg5
I01
sg6
g5380
sg7
S'TRuleDataStoppingCriteria'
p5383
sg9
I00
sg10
(lp5384
sg12
(lp5385
sg29
(dp5386
sbsS'TTreeDescender_UnknownToCommonSelector'
p5387
(i__main__
ClassDefinition
p5388
(dp5389
g4
I1
sg5
I01
sg6
g5387
sg7
g1557
sg9
I0
sg10
(lp5390
sg12
(lp5391
sg29
(dp5392
sbsS'THierarchicalCluster'
p5393
(i__main__
ClassDefinition
p5394
(dp5395
g4
I1
sg5
I01
sg6
g5393
sg7
S'TOrange'
p5396
sg9
I00
sg10
(lp5397
sg12
(lp5398
(S'THierarchicalClusterList'
p5399
S'branches'
p5400
g5400
S'subclusters'
p5401
I0
I0
I00
Ntp5402
a(S'float'
p5403
S'height'
p5404
g5404
S'height'
p5405
I0
I0
I01
Ntp5406
a(S'TIntList'
p5407
S'mapping'
p5408
g5408
S'indices to the list of all elements in the clustering'
p5409
I0
I0
I00
Ntp5410
a(S'int'
p5411
S'first'
p5412
g5412
S"the index into 'elements' to the first element of the cluster"
p5413
I0
I0
I01
Ntp5414
a(S'int'
p5415
S'last'
p5416
g5416
S"the index into 'elements' to the one after the last element of the cluster"
p5417
I0
I0
I01
Ntp5418
asg29
(dp5419
sbsS'TPreprocessIM'
p5420
(i__main__
ClassDefinition
p5421
(dp5422
g4
I1
sg5
I01
sg6
g5420
sg7
S'TOrange'
p5423
sg9
I01
sg10
(lp5424
sg12
(lp5425
sg29
(dp5426
sbsS'TLongList'
p5427
(ipyprops
ClassDefinition
p5428
(dp5429
g4
I0
sg5
I01
sg6
g5427
sg7
g143
sg9
I0
sg10
(lp5430
sg12
(lp5431
sg29
(dp5432
sbsS'TBasketFeeder'
p5433
(i__main__
ClassDefinition
p5434
(dp5435
g4
I1
sg5
I01
sg6
g5433
sg7
S'TOrange'
p5436
sg9
I00
sg10
(lp5437
sg12
(lp5438
(S'bool'
p5439
S'dontStore'
p5440
S'dont_store'
p5441
S'disables items storing'
p5442
I0
I0
I01
Ntp5443
a(S'bool'
p5444
S'dontCheckStored'
p5445
S'dont_check_stored'
p5446
S'disables items lookup in the global cache'
p5447
I0
I0
I01
Ntp5448
a(S'TDomain'
p5449
S'domain'
p5450
g5450
S'domain where the meta attributes are stored'
p5451
I0
I0
I00
Ntp5452
a(S'TDomain'
p5453
S'sourceDomain'
p5454
S'source_domain'
p5455
S'domain with items that can be reused'
p5456
I0
I0
I00
Ntp5457
asg29
(dp5458
sbsS'TRuleEvaluator_Laplace'
p5459
(i__main__
ClassDefinition
p5460
(dp5461
g4
I1
sg5
I01
sg6
g5459
sg7
S'TRuleEvaluator'
p5462
sg9
I00
sg10
(lp5463
sg12
(lp5464
sg29
(dp5465
sbsS'TColumnAssessor_N'
p5466
(i__main__
ClassDefinition
p5467
(dp5468
g4
I1
sg5
I01
sg6
g5466
sg7
S'TColumnAssessor'
p5469
sg9
I00
sg10
(lp5470
sg12
(lp5471
sg29
(dp5472
sbsS'TSubsetsGenerator_minMaxSize_iterator'
p5473
(i__main__
ClassDefinition
p5474
(dp5475
g4
I1
sg5
I01
sg6
g5473
sg7
S'TSubsetsGenerator_iterator'
p5476
sg9
I00
sg10
(lp5477
sg12
(lp5478
(S'int'
p5479
g2528
g2528
g578
I01
I0
I01
Ntp5480
a(S'int'
p5481
S'max'
p5482
g5482
S'maximal subset size'
p5483
I0
I0
I01
Ntp5484
a(S'bool'
p5485
S'moreToCome'
p5486
S'more_to_come'
p5487
g578
I01
I0
I01
Ntp5488
ag510
asg29
(dp5489
sbsS'TExamplesDistanceConstructor_Lp'
p5490
(i__main__
ClassDefinition
p5491
(dp5492
g4
I1
sg5
I01
sg6
g5490
sg7
S'TExamplesDistanceConstructor_Normalized'
p5493
sg9
I00
sg10
(lp5494
sg12
(lp5495
(S'float'
p5496
g2224
g2224
g2224
I0
I0
I01
Ntp5497
ag2058
ag2063
ag1325
asg29
(dp5498
sbsS'TComputeDomainContingency'
p5499
(i__main__
ClassDefinition
p5500
(dp5501
g4
I1
sg5
I01
sg6
g5499
sg7
S'TOrange'
p5502
sg9
I00
sg10
(lp5503
sg12
(lp5504
g28
asg29
(dp5505
sbsS'TExample'
p5506
(i__main__
ClassDefinition
p5507
(dp5508
g4
I1
sg5
I01
sg6
g5506
sg7
S'TOrange'
p5509
sg9
I00
sg10
(lp5510
sg12
(lp5511
g2635
ag2638
asg29
(dp5512
sbsS'TFixedDiscretization'
p5513
(i__main__
ClassDefinition
p5514
(dp5515
g4
I1
sg5
I01
sg6
g5513
sg7
S'TDiscretization'
p5516
sg9
I00
sg10
(lp5517
sg12
(lp5518
(S'TFloatList'
p5519
S'points'
p5520
g5520
S'cut-off points'
p5521
I0
I0
I00
Ntp5522
asg29
(dp5523
sbsS'TDomainContingency'
p5524
(ipyprops
ClassDefinition
p5525
(dp5526
g4
I0
sg5
I01
sg6
S'TDomainContingency'
p5527
sg7
g143
sg9
I0
sg10
(lp5528
sg12
(lp5529
sg29
(dp5530
sbsS'TPreprocessor_addGaussianClassNoise'
p5531
(i__main__
ClassDefinition
p5532
(dp5533
g4
I1
sg5
I01
sg6
g5531
sg7
S'TPreprocessor'
p5534
sg9
I00
sg10
(lp5535
sg12
(lp5536
(S'float'
p5537
S'deviation'
p5538
g5538
S'class deviation'
p5539
I0
I0
I01
Ntp5540
a(S'TRandomGenerator'
p5541
S'randomGenerator'
p5542
S'random_generator'
p5543
S'random number generator'
p5544
I0
I0
I00
Ntp5545
asg29
(dp5546
sbsS'TRuleDataStoppingCriteria'
p5547
(i__main__
ClassDefinition
p5548
(dp5549
g4
I1
sg5
I01
sg6
g5547
sg7
S'TOrange'
p5550
sg9
I01
sg10
(lp5551
sg12
(lp5552
sg29
(dp5553
sbsS'TPreprocessor_filter'
p5554
(i__main__
ClassDefinition
p5555
(dp5556
g4
I1
sg5
I01
sg6
g5554
sg7
S'TPreprocessor'
p5557
sg9
I00
sg10
(lp5558
sg12
(lp5559
(S'TFilter'
p5560
S'filter'
p5561
g5561
S'filter'
p5562
I0
I0
I00
Ntp5563
asg29
(dp5564
sbsS'TSOMNodeList'
p5565
(ipyprops
ClassDefinition
p5566
(dp5567
g4
I0
sg5
I01
sg6
g5565
sg7
g143
sg9
I0
sg10
(lp5568
sg12
(lp5569
sg29
(dp5570
sbsS'TExampleDistBySorting'
p5571
(i__main__
ClassDefinition
p5572
(dp5573
g4
I1
sg5
I01
sg6
g5571
sg7
S'TExampleDistConstructor'
p5574
sg9
I00
sg10
(lp5575
sg12
(lp5576
sg29
(dp5577
sbsS'TGraphAsMatrix'
p5578
(i__main__
ClassDefinition
p5579
(dp5580
g4
I1
sg5
I01
sg6
g5578
sg7
S'TGraph'
p5581
sg9
I00
sg10
(lp5582
sg12
(lp5583
g1448
ag1453
ag1457
asg29
(dp5584
sbsS'TMDS'
p5585
(i__main__
ClassDefinition
p5586
(dp5587
g4
I1
sg5
I0
sg6
g5585
sg7
S'TOrange'
p5588
sg9
I00
sg10
(lp5589
sg12
(lp5590
(S'TSymMatrix'
p5591
S'distances'
p5592
g5592
S'SymMatrix that holds the original real distances'
p5593
I0
I0
I00
Ntp5594
a(S'TSymMatrix'
p5595
S'projectedDistances'
p5596
S'projected_distances'
p5597
S'SymMatrix that holds the projected distances'
p5598
I0
I0
I00
Ntp5599
a(S'TSymMatrix'
p5600
S'stress'
p5601
g5601
S'SymMatrix that holds the pointwise stress values'
p5602
I0
I0
I00
Ntp5603
a(S'TFloatListList'
p5604
S'points'
p5605
g5605
S'Holds the current projected point configuration'
p5606
I0
I0
I00
Ntp5607
a(S'TProgressCallback'
p5608
S'progressCallback'
p5609
S'progress_callback'
p5610
S'progressCallback function'
p5611
I0
I0
I00
Ntp5612
a(S'bool'
p5613
S'freshD'
p5614
S'fresh_d'
p5615
g578
I01
I0
I01
Ntp5616
a(S'float'
p5617
S'avgStress'
p5618
S'avg_stress'
p5619
g578
I01
I0
I01
Ntp5620
a(S'int'
p5621
S'dim'
p5622
g5622
g578
I01
I0
I01
Ntp5623
a(S'int'
p5624
S'n'
p5625
g5625
g578
I01
I0
I01
Ntp5626
asg29
(dp5627
sbsS'TValueFilter_discrete'
p5628
(i__main__
ClassDefinition
p5629
(dp5630
g4
I1
sg5
I01
sg6
g5628
sg7
S'TValueFilter'
p5631
sg9
I00
sg10
(lp5632
sg12
(lp5633
(S'TValueList'
p5634
S'values'
p5635
g5635
S'accepted values'
p5636
I0
I0
I00
Ntp5637
a(S'bool'
p5638
S'negate'
p5639
g5639
S'negate'
p5640
I0
I0
I01
Ntp5641
ag1019
ag1024
asg29
(dp5642
sbsS'TAssociationRulesInducer'
p5643
(i__main__
ClassDefinition
p5644
(dp5645
g4
I1
sg5
I01
sg6
g5643
sg7
S'TOrange'
p5646
sg9
I00
sg10
(lp5647
sg12
(lp5648
(S'int'
p5649
S'maxItemSets'
p5650
S'max_item_sets'
p5651
S'maximal number of itemsets (increase if you want)'
p5652
I0
I0
I01
Ntp5653
a(S'float'
p5654
S'confidence'
p5655
g5655
S'required confidence'
p5656
I0
I0
I01
Ntp5657
a(S'float'
p5658
S'support'
p5659
g5659
S'required support'
p5660
I0
I0
I01
Ntp5661
a(S'bool'
p5662
S'classificationRules'
p5663
S'classification_rules'
p5664
S'if true, rules will have the class and only the class attribute on the right-hand side'
p5665
I0
I0
I01
Ntp5666
a(S'bool'
p5667
S'storeExamples'
p5668
S'store_examples'
p5669
S'if true, each rule is going to have tables with references to examples which match its left side or both sides'
p5670
I0
I0
I01
Ntp5671
asg29
(dp5672
sbsS'TMakeRandomIndices2'
p5673
(i__main__
ClassDefinition
p5674
(dp5675
g4
I1
sg5
I01
sg6
g5673
sg7
S'TMakeRandomIndices'
p5676
sg9
I00
sg10
(lp5677
sg12
(lp5678
(S'float'
p5679
S'p0'
p5680
g5680
S"a proportion or a number of 0's"
p5681
I0
I0
I01
Ntp5682
ag692
ag696
ag701
asg29
(dp5683
sbsS'TTreeStopCriteria'
p5684
(i__main__
ClassDefinition
p5685
(dp5686
g4
I1
sg5
I01
sg6
g5684
sg7
S'TOrange'
p5687
sg9
I00
sg10
(lp5688
sg12
(lp5689
sg29
(dp5690
sbsS'TPreprocessor_addMissingClasses'
p5691
(i__main__
ClassDefinition
p5692
(dp5693
g4
I1
sg5
I01
sg6
g5691
sg7
S'TPreprocessor'
p5694
sg9
I00
sg10
(lp5695
sg12
(lp5696
(S'float'
p5697
S'proportion'
p5698
g5698
S'proportion of removed class values'
p5699
I0
I0
I01
Ntp5700
a(S'int'
p5701
S'specialType'
p5702
S'special_type'
p5703
S'special value type (1=DC, 2=DK)'
p5704
I0
I0
I01
Ntp5705
a(S'TRandomGenerator'
p5706
S'randomGenerator'
p5707
S'random_generator'
p5708
S'random number generator'
p5709
I0
I0
I00
Ntp5710
asg29
(dp5711
sbsS'TLookupLearner'
p5712
(i__main__
ClassDefinition
p5713
(dp5714
g4
I1
sg5
I01
sg6
g5712
sg7
S'TLearner'
p5715
sg9
I00
sg10
(lp5716
sg12
(lp5717
(S'TLearner'
p5718
S'learnerForUnknown'
p5719
S'learner_for_unknown'
p5720
S'a learner for classifying cases not found in the table'
p5721
I0
I0
I00
Ntp5722
a(S'bool'
p5723
S'allowFastLookups'
p5724
S'allow_fast_lookups'
p5725
S'if true, it constructs LookupClassifiers for <=3 attributes'
p5726
I0
I0
I01
Ntp5727
a(S'int'
p5728
S'unknownsHandling'
p5729
S'unknowns_handling'
p5730
S'0 omit examples with unknowns, 1 distribute them, 2 keep them in table'
p5731
I0
I0
I01
Ntp5732
ag110
asg29
(dp5733
sbsS'TBasketExampleGenerator'
p5734
(i__main__
ClassDefinition
p5735
(dp5736
g4
I1
sg5
I01
sg6
g5734
sg7
S'TFileExampleGenerator'
p5737
sg9
I00
sg10
(lp5738
sg12
(lp5739
g1595
ag1600
ag1605
ag306
ag310
asg29
(dp5740
sbsS'TRuleEvaluator_Entropy'
p5741
(i__main__
ClassDefinition
p5742
(dp5743
g4
I1
sg5
I01
sg6
g5741
sg7
S'TRuleEvaluator'
p5744
sg9
I00
sg10
(lp5745
sg12
(lp5746
sg29
(dp5747
sbsS'TMeasureAttribute_chiSquare'
p5748
(i__main__
ClassDefinition
p5749
(dp5750
g4
I1
sg5
I01
sg6
g5748
sg7
S'TMeasureAttributeFromProbabilities'
p5751
sg9
I00
sg10
(lp5752
sg12
(lp5753
(S'bool'
p5754
S'computeProbabilities'
p5755
S'compute_probabilities'
p5756
g578
I0
I0
I01
Ntp5757
ag869
ag874
ag880
ag885
ag890
ag895
ag900
asg29
(dp5758
sbsS'TDistribution'
p5759
(i__main__
ClassDefinition
p5760
(dp5761
g4
I1
sg5
I01
sg6
g5759
sg7
S'TSomeValue'
p5762
sg9
I01
sg10
(lp5763
sg12
(lp5764
g1090
ag1094
ag1098
ag1102
ag1106
ag1111
ag1116
ag1121
asg29
(dp5765
sbsS'TExamplesDistance_DTW'
p5766
(i__main__
ClassDefinition
p5767
(dp5768
g4
I1
sg5
I01
sg6
g5766
sg7
S'TExamplesDistance_Normalized'
p5769
sg9
I00
sg10
(lp5770
sg12
(lp5771
(S'int'
p5772
S'dtwDistance'
p5773
S'dtw_distance'
p5774
S' distance measure between individual attributes (default: square of difference)'
p5775
I0
I0
I01
S'ExamplesDistance_DTW_DistanceType'
p5776
tp5777
ag454
ag458
ag462
ag466
ag471
ag475
ag480
asg29
(dp5778
S'DistanceType'
p5779
(lp5780
(S'Euclidean'
p5781
I0
tp5782
a(S'Derivative'
p5783
I1
tp5784
assbsS'TTreeExampleSplitter_UnknownsToRandom'
p5785
(i__main__
ClassDefinition
p5786
(dp5787
g4
I1
sg5
I01
sg6
g5785
sg7
S'TTreeExampleSplitter'
p5788
sg9
I00
sg10
(lp5789
sg12
(lp5790
sg29
(dp5791
sbsS'TTreePruner_m'
p5792
(i__main__
ClassDefinition
p5793
(dp5794
g4
I1
sg5
I01
sg6
g5792
sg7
S'TTreePruner'
p5795
sg9
I00
sg10
(lp5796
sg12
(lp5797
(S'float'
p5798
g1170
g1170
S'm for m-estimate'
p5799
I0
I0
I01
Ntp5800
asg29
(dp5801
sbsS'TImputer'
p5802
(i__main__
ClassDefinition
p5803
(dp5804
g4
I1
sg5
I01
sg6
g5802
sg7
S'TOrange'
p5805
sg9
I01
sg10
(lp5806
sg12
(lp5807
sg29
(dp5808
sbsS'TExamplesDistanceConstructor_DTW'
p5809
(i__main__
ClassDefinition
p5810
(dp5811
g4
I1
sg5
I01
sg6
g5809
sg7
S'TExamplesDistanceConstructor_Normalized'
p5812
sg9
I00
sg10
(lp5813
sg12
(lp5814
(S'int'
p5815
S'dtwDistance'
p5816
S'dtw_distance'
p5817
S'distance measure between individual attributes (default: square of difference)'
p5818
I0
I0
I01
Ntp5819
ag2058
ag2063
ag1325
asg29
(dp5820
sbsS'TStopIMClusteringByAssessor_n'
p5821
(i__main__
ClassDefinition
p5822
(dp5823
g4
I1
sg5
I01
sg6
g5821
sg7
S'TStopIMClusteringByAssessor'
p5824
sg9
I00
sg10
(lp5825
sg12
(lp5826
(S'int'
p5827
g2554
g2554
S'number of clusters'
p5828
I0
I0
I01
Ntp5829
asg29
(dp5830
sbsS'TVarListList'
p5831
(ipyprops
ClassDefinition
p5832
(dp5833
g4
I0
sg5
I01
sg6
g5831
sg7
g143
sg9
I0
sg10
(lp5834
sg12
(lp5835
sg29
(dp5836
sbsS'TRandomGenerator'
p5837
(i__main__
ClassDefinition
p5838
(dp5839
g4
I1
sg5
I01
sg6
g5837
sg7
S'TOrange'
p5840
sg9
I00
sg10
(lp5841
sg12
(lp5842
(S'int'
p5843
S'initseed'
p5844
g5844
S'initial random seed'
p5845
I0
I0
I01
Ntp5846
a(S'int'
p5847
S'uses'
p5848
g5848
S'#times a number was returned'
p5849
I0
I0
I01
Ntp5850
asg29
(dp5851
sbsS'TThresholdCA'
p5852
(i__main__
ClassDefinition
p5853
(dp5854
g4
I1
sg5
I01
sg6
g5852
sg7
S'TOrange'
p5855
sg9
I00
sg10
(lp5856
sg12
(lp5857
sg29
(dp5858
sbsS'TFloatListList'
p5859
(ipyprops
ClassDefinition
p5860
(dp5861
g4
I0
sg5
I01
sg6
g5859
sg7
g143
sg9
I0
sg10
(lp5862
sg12
(lp5863
sg29
(dp5864
sbsS'TPreprocessor_imputeByLearner'
p5865
(i__main__
ClassDefinition
p5866
(dp5867
g4
I1
sg5
I01
sg6
g5865
sg7
S'TPreprocessor'
p5868
sg9
I00
sg10
(lp5869
sg12
(lp5870
(S'TLearner'
p5871
S'learner'
p5872
g5872
S'learner used for inducing a model for imputation'
p5873
I0
I0
I00
Ntp5874
asg29
(dp5875
sbsS'TRuleBeamRefiner_Python'
p5876
(i__main__
ClassDefinition
p5877
(dp5878
g4
I1
sg5
I01
sg6
g5876
sg7
S'TRuleBeamRefiner'
p5879
sg9
I00
sg10
(lp5880
sg12
(lp5881
sg29
(dp5882
sbsS'TClassifierFromVarFD'
p5883
(i__main__
ClassDefinition
p5884
(dp5885
g4
I1
sg5
I01
sg6
g5883
sg7
S'TClassifierFD'
p5886
sg9
I00
sg10
(lp5887
sg12
(lp5888
(S'int'
p5889
S'position'
p5890
g5890
S'position of the attribute in domain'
p5891
I0
I0
I01
Ntp5892
a(S'TTransformValue'
p5893
S'transformer'
p5894
g5894
S'transformer'
p5895
I0
I0
I00
Ntp5896
a(S'TDistribution'
p5897
S'distributionForUnknown'
p5898
S'distribution_for_unknown'
p5899
S'distribution for unknown value'
p5900
I0
I0
I00
Ntp5901
a(S'bool'
p5902
S'transformUnknowns'
p5903
S'transform_unknowns'
p5904
S'if false (default is true), unknowns stay unknown or are changed into distribution if given'
p5905
I0
I0
I01
Ntp5906
ag291
ag94
ag99
asg29
(dp5907
sbsS'TSimpleTreeLearner'
p5908
(i__main__
ClassDefinition
p5909
(dp5910
g4
I1
sg5
I01
sg6
g5908
sg7
S'TLearner'
p5911
sg9
I00
sg10
(lp5912
sg12
(lp5913
(S'float'
p5914
S'maxMajority'
p5915
S'max_majority'
p5916
g578
I0
I0
I01
Ntp5917
a(S'int'
p5918
S'minInstances'
p5919
S'min_instances'
p5920
g578
I0
I0
I01
Ntp5921
a(S'int'
p5922
S'maxDepth'
p5923
S'max_depth'
p5924
g578
I0
I0
I01
Ntp5925
a(S'float'
p5926
S'skipProb'
p5927
S'skip_prob'
p5928
g578
I0
I0
I01
Ntp5929
a(S'TRandomGenerator'
p5930
S'randomGenerator'
p5931
S'random_generator'
p5932
g578
I0
I0
I00
Ntp5933
ag110
asg29
(dp5934
sbsS'TImputer_model'
p5935
(i__main__
ClassDefinition
p5936
(dp5937
g4
I1
sg5
I01
sg6
g5935
sg7
S'TImputer'
p5938
sg9
I00
sg10
(lp5939
sg12
(lp5940
(S'TClassifierList'
p5941
S'models'
p5942
g5942
S'classifiers'
p5943
I0
I0
I00
Ntp5944
asg29
(dp5945
sbsS'TLogRegLearner'
p5946
(i__main__
ClassDefinition
p5947
(dp5948
g4
I1
sg5
I01
sg6
g5946
sg7
S'TLearner'
p5949
sg9
I00
sg10
(lp5950
sg12
(lp5951
(S'TLogRegFitter'
p5952
S'fitter'
p5953
g5953
S'fits beta coefficients and calculates beta errors.'
p5954
I0
I0
I00
Ntp5955
a(S'TImputerConstructor'
p5956
S'imputerConstructor'
p5957
S'imputer_constructor'
p5958
S'if present, it constructs an imputer for unknown values'
p5959
I0
I0
I00
Ntp5960
a(S'TDomainContinuizer'
p5961
S'domainContinuizer'
p5962
S'domain_continuizer'
p5963
S'if present, it constructs continuous domain if needed; if absent, default is used'
p5964
I0
I0
I00
Ntp5965
ag110
asg29
(dp5966
sbsS'TPreprocessor_takeMissing'
p5967
(i__main__
ClassDefinition
p5968
(dp5969
g4
I1
sg5
I01
sg6
g5967
sg7
S'TPreprocessor'
p5970
sg9
I00
sg10
(lp5971
sg12
(lp5972
sg29
(dp5973
sbsS'TMeasureAttribute_IM'
p5974
(i__main__
ClassDefinition
p5975
(dp5976
g4
I1
sg5
I01
sg6
g5974
sg7
S'TMeasureAttribute'
p5977
sg9
I00
sg10
(lp5978
sg12
(lp5979
(S'TIMConstructor'
p5980
S'IMconstructor'
p5981
g5981
S'incompatibility matrix constructor'
p5982
I0
I0
I00
Ntp5983
a(S'TColumnAssessor'
p5984
S'columnAssessor'
p5985
S'column_assessor'
p5986
S'column quality assessor'
p5987
I0
I0
I00
Ntp5988
ag885
ag890
ag895
ag900
asg29
(dp5989
sbsS'TFeatureByDistributions'
p5990
(i__main__
ClassDefinition
p5991
(dp5992
g4
I1
sg5
I01
sg6
g5990
sg7
S'TFeatureInducer'
p5993
sg9
I00
sg10
(lp5994
sg12
(lp5995
(S'TClustersFromDistributions'
p5996
S'clustersFromDistributions'
p5997
S'clusters_from_distributions'
p5998
S'clustering algorithm'
p5999
I0
I0
I00
Ntp6000
a(S'int'
p6001
S'completion'
p6002
g6002
S' decides how to determine the class for points not covered by any cluster'
p6003
I0
I0
I01
S'FeatureByDistributions_Completion'
p6004
tp6005
asg29
(dp6006
S'Completion'
p6007
(lp6008
(S'NoCompletion'
p6009
S'completion_no'
p6010
tp6011
a(S'CompletionByDefault'
p6012
S'completion_default'
p6013
tp6014
a(S'CompletionByBayes'
p6015
S'completion_bayes'
p6016
tp6017
assbsS'TCostMatrix'
p6018
(i__main__
ClassDefinition
p6019
(dp6020
g4
I1
sg5
I01
sg6
g6018
sg7
S'TOrange'
p6021
sg9
I00
sg10
(lp6022
sg12
(lp6023
(S'TVariable'
p6024
S'classVar'
p6025
S'class_var'
p6026
S'attribute to which the matrix applies'
p6027
I0
I0
I00
Ntp6028
a(S'int'
p6029
S'dimension'
p6030
g6030
S'dimension (should equal classVar.noOfValues())'
p6031
I01
I0
I01
Ntp6032
asg29
(dp6033
sbsS'TStopIMClusteringByAssessor_noProfit'
p6034
(i__main__
ClassDefinition
p6035
(dp6036
g4
I1
sg5
I01
sg6
g6034
sg7
S'TStopIMClusteringByAssessor'
p6037
sg9
I00
sg10
(lp6038
sg12
(lp6039
(S'float'
p6040
S'minProfitProportion'
p6041
S'min_profit_proportion'
p6042
S'minimal allowable profit proportion'
p6043
I0
I0
I01
Ntp6044
asg29
(dp6045
sbsS'TRemoveUnusedValues'
p6046
(i__main__
ClassDefinition
p6047
(dp6048
g4
I1
sg5
I01
sg6
g6046
sg7
S'TOrange'
p6049
sg9
I00
sg10
(lp6050
sg12
(lp6051
(S'bool'
p6052
S'removeOneValued'
p6053
S'remove_one_valued'
p6054
S'if true (default is false), one valued attributes are also removed'
p6055
I0
I0
I01
Ntp6056
asg29
(dp6057
sbsS'TExamplesDistance_Normalized'
p6058
(i__main__
ClassDefinition
p6059
(dp6060
g4
I1
sg5
I01
sg6
g6058
sg7
S'TExamplesDistance'
p6061
sg9
I01
sg10
(lp6062
sg12
(lp6063
g454
ag458
ag462
ag466
ag471
ag475
ag480
asg29
(dp6064
sbsS'TExamplesDistance_Euclidean'
p6065
(i__main__
ClassDefinition
p6066
(dp6067
g4
I1
sg5
I01
sg6
g6065
sg7
S'TExamplesDistance_Normalized'
p6068
sg9
I00
sg10
(lp6069
sg12
(lp6070
(S'TDomainDistributions'
p6071
S'distributions'
p6072
g6072
S'distributions (of discrete attributes only)'
p6073
I0
I0
I00
Ntp6074
a(S'TAttributedFloatList'
p6075
S'bothSpecialDist'
p6076
S'both_special_dist'
p6077
S'distances between discrete attributes if both values are unknown'
p6078
I0
I0
I00
Ntp6079
ag454
ag458
ag462
ag466
ag471
ag475
ag480
asg29
(dp6080
sbsS'TPreprocessor_take'
p6081
(i__main__
ClassDefinition
p6082
(dp6083
g4
I1
sg5
I01
sg6
g6081
sg7
S'TPreprocessor'
p6084
sg9
I00
sg10
(lp6085
sg12
(lp6086
(S'TVariableFilterMap'
p6087
S'values'
p6088
g6088
S'variable-filter pairs'
p6089
I0
I0
I00
Ntp6090
a(S'bool'
p6091
S'conjunction'
p6092
g6092
S'decides whether to take conjunction or disjunction of values'
p6093
I0
I0
I01
Ntp6094
asg29
(dp6095
sbsS'TIMConstructor'
p6096
(i__main__
ClassDefinition
p6097
(dp6098
g4
I1
sg5
I01
sg6
g6096
sg7
S'TOrange'
p6099
sg9
I01
sg10
(lp6100
sg12
(lp6101
g1207
asg29
(dp6102
sbsS'TRuleFinder_Python'
p6103
(i__main__
ClassDefinition
p6104
(dp6105
g4
I1
sg5
I01
sg6
g6103
sg7
S'TRuleFinder'
p6106
sg9
I00
sg10
(lp6107
sg12
(lp6108
g3978
ag3981
asg29
(dp6109
sbsS'TTabDelimExampleGenerator'
p6110
(i__main__
ClassDefinition
p6111
(dp6112
g4
I1
sg5
I01
sg6
g6110
sg7
S'TFileExampleGenerator'
p6113
sg9
I00
sg10
(lp6114
sg12
(lp6115
(S'TIntList'
p6116
S'attributeTypes'
p6117
S'attribute_types'
p6118
S'types of attributes (-1 normal, 0 skip, <-1 = meta ID)'
p6119
I0
I0
I00
Ntp6120
a(S'int'
p6121
S'classPos'
p6122
S'class_pos'
p6123
S'position of the class attribute'
p6124
I0
I0
I01
Ntp6125
a(S'TIntList'
p6126
S'classPoses'
p6127
S'class_poses'
p6128
S'positions of class attributes if there are multiple; otherwise None'
p6129
I0
I0
I00
Ntp6130
a(S'int'
p6131
S'basketPos'
p6132
S'basket_pos'
p6133
S'position of the (virtual) basket attribute'
p6134
I0
I0
I01
Ntp6135
a(S'int'
p6136
S'headerLines'
p6137
S'header_lines'
p6138
S'number of header lines (3 for .tab, 1 for .txt)'
p6139
I0
I0
I01
Ntp6140
a(S'bool'
p6141
S'csv'
p6142
g6142
S"also allow ',' as a separator"
p6143
I0
I0
I01
Ntp6144
a(S'TBasketFeeder'
p6145
S'basketFeeder'
p6146
S'basket_feeder'
p6147
S'takes care of inserting the meta attributes from the basket if need be'
p6148
I0
I0
I00
Ntp6149
ag1595
ag1600
ag1605
ag306
ag310
asg29
(dp6150
sbsS'TRandomClassifier'
p6151
(i__main__
ClassDefinition
p6152
(dp6153
g4
I1
sg5
I01
sg6
g6151
sg7
S'TClassifier'
p6154
sg9
I00
sg10
(lp6155
sg12
(lp6156
(S'TDistribution'
p6157
S'probabilities'
p6158
g6158
S'probabilities of predictions'
p6159
I0
I0
I00
Ntp6160
ag94
ag99
asg29
(dp6161
sbsS'TkNNLearner'
p6162
(i__main__
ClassDefinition
p6163
(dp6164
g4
I1
sg5
I01
sg6
g6162
sg7
S'TLearner'
p6165
sg9
I00
sg10
(lp6166
sg12
(lp6167
(S'float'
p6168
g1166
g1166
S'number of neighbours (0 for sqrt of #examples)'
p6169
I0
I0
I01
Ntp6170
a(S'bool'
p6171
S'rankWeight'
p6172
S'rank_weight'
p6173
S'enable weighting by ranks'
p6174
I0
I0
I01
Ntp6175
a(S'TExamplesDistanceConstructor'
p6176
S'distanceConstructor'
p6177
S'distance_constructor'
p6178
S'metrics'
p6179
I0
I0
I00
Ntp6180
ag110
asg29
(dp6181
sbsS'TTreeDescender_UnknownToNode'
p6182
(i__main__
ClassDefinition
p6183
(dp6184
g4
I1
sg5
I01
sg6
g6182
sg7
g1557
sg9
I0
sg10
(lp6185
sg12
(lp6186
sg29
(dp6187
sbsS'TIntFloatList'
p6188
(ipyprops
ClassDefinition
p6189
(dp6190
g4
I0
sg5
I01
sg6
g6188
sg7
g143
sg9
I0
sg10
(lp6191
sg12
(lp6192
sg29
(dp6193
sbsS'TDistributionAssessor_mf'
p6194
(i__main__
ClassDefinition
p6195
(dp6196
g4
I1
sg5
I01
sg6
g6194
sg7
S'TDistributionAssessor'
p6197
sg9
I00
sg10
(lp6198
sg12
(lp6199
(S'float'
p6200
g1170
g1170
S'm for m-estimate'
p6201
I0
I0
I01
Ntp6202
asg29
(dp6203
sbsS'TExampleClusters'
p6204
(i__main__
ClassDefinition
p6205
(dp6206
g4
I1
sg5
I01
sg6
g6204
sg7
S'TGeneralExampleClustering'
p6207
sg9
I00
sg10
(lp6208
sg12
(lp6209
(S'TExampleCluster'
p6210
S'root'
p6211
g6211
S'root of cluster hierarchy'
p6212
I0
I0
I00
Ntp6213
a(S'float'
p6214
S'quality'
p6215
g6215
S"'quality' of clustering"
p6216
I0
I0
I01
Ntp6217
asg29
(dp6218
sbsS'TExamplesDistance_Python'
p6219
(i__main__
ClassDefinition
p6220
(dp6221
g4
I1
sg5
I01
sg6
g6219
sg7
S'TExamplesDistance'
p6222
sg9
I00
sg10
(lp6223
sg12
(lp6224
sg29
(dp6225
sbsS'TCostLearner'
p6226
(i__main__
ClassDefinition
p6227
(dp6228
g4
I1
sg5
I01
sg6
g6226
sg7
S'TMajorityLearner'
p6229
sg9
I00
sg10
(lp6230
sg12
(lp6231
(S'TCostMatrix'
p6232
S'cost'
p6233
g6233
S'cost matrix'
p6234
I0
I0
I00
Ntp6235
ag809
ag814
ag110
asg29
(dp6236
sbsS'TEFMDataDescription'
p6237
(i__main__
ClassDefinition
p6238
(dp6239
g4
I1
sg5
I01
sg6
g6237
sg7
S'TOrange'
p6240
sg9
I00
sg10
(lp6241
S'domainDistributions'
p6242
asg12
(lp6243
(S'TDomain'
p6244
S'domain'
p6245
g6245
S'domain'
p6246
I01
I0
I00
Ntp6247
asg29
(dp6248
sbsS'TClassifierFD'
p6249
(i__main__
ClassDefinition
p6250
(dp6251
g4
I1
sg5
I01
sg6
g6249
sg7
S'TClassifier'
p6252
sg9
I00
sg10
(lp6253
sg12
(lp6254
g291
ag94
ag99
asg29
(dp6255
sbsS'TPreprocessor_drop'
p6256
(i__main__
ClassDefinition
p6257
(dp6258
g4
I1
sg5
I01
sg6
g6256
sg7
S'TPreprocessor'
p6259
sg9
I00
sg10
(lp6260
sg12
(lp6261
(S'TVariableFilterMap'
p6262
S'values'
p6263
g6263
S'variable-filter pairs'
p6264
I0
I0
I00
Ntp6265
a(S'bool'
p6266
S'conjunction'
p6267
g6267
S'decides whether to take conjunction or disjunction of values'
p6268
I0
I0
I01
Ntp6269
asg29
(dp6270
sbsS'TTreeDescender_UnknownToCommonBranch'
p6271
(i__main__
ClassDefinition
p6272
(dp6273
g4
I1
sg5
I01
sg6
g6271
sg7
g1557
sg9
I0
sg10
(lp6274
sg12
(lp6275
sg29
(dp6276
sbsS'TPreprocessor_addNoise'
p6277
(i__main__
ClassDefinition
p6278
(dp6279
g4
I1
sg5
I01
sg6
g6277
sg7
S'TPreprocessor'
p6280
sg9
I00
sg10
(lp6281
sg12
(lp6282
(S'TVariableFloatMap'
p6283
S'proportions'
p6284
g6284
S'proportion of changed values for individual attributes'
p6285
I0
I0
I00
Ntp6286
a(S'float'
p6287
S'defaultProportion'
p6288
S'default_proportion'
p6289
S'default proportion of changed values (for attributes not specified above)'
p6290
I0
I0
I01
Ntp6291
a(S'TRandomGenerator'
p6292
S'randomGenerator'
p6293
S'random_generator'
p6294
S'random number generator'
p6295
I0
I0
I00
Ntp6296
asg29
(dp6297
sbsS'TStopIMClusteringByAssessor_binary'
p6298
(i__main__
ClassDefinition
p6299
(dp6300
g4
I1
sg5
I01
sg6
g6298
sg7
S'TStopIMClusteringByAssessor'
p6301
sg9
I00
sg10
(lp6302
sg12
(lp6303
sg29
(dp6304
sbsS'TColumnAssessor_mf'
p6305
(i__main__
ClassDefinition
p6306
(dp6307
g4
I1
sg5
I01
sg6
g6305
sg7
S'TColumnAssessor'
p6308
sg9
I00
sg10
(lp6309
sg12
(lp6310
(S'float'
p6311
g1170
g1170
S'm for m-estimate'
p6312
I0
I0
I01
Ntp6313
asg29
(dp6314
sbsS'TKruskalStress'
p6315
(i__main__
ClassDefinition
p6316
(dp6317
g4
I1
sg5
I0
sg6
g6315
sg7
S'TStressFunc'
p6318
sg9
I00
sg10
(lp6319
sg12
(lp6320
sg29
(dp6321
sbsS'TExamplesDistanceConstructor'
p6322
(i__main__
ClassDefinition
p6323
(dp6324
g4
I1
sg5
I01
sg6
g6322
sg7
S'TOrange'
p6325
sg9
I01
sg10
(lp6326
sg12
(lp6327
g1325
asg29
(dp6328
sbsS'TSubsetsGenerator'
p6329
(i__main__
ClassDefinition
p6330
(dp6331
g4
I1
sg5
I01
sg6
g6329
sg7
S'TOrange'
p6332
sg9
I01
sg10
(lp6333
sg12
(lp6334
g207
asg29
(dp6335
sbsS'TPreprocessor_addCensorWeight'
p6336
(i__main__
ClassDefinition
p6337
(dp6338
g4
I1
sg5
I01
sg6
g6336
sg7
S'TPreprocessor'
p6339
sg9
I00
sg10
(lp6340
sg12
(lp6341
(S'TVariable'
p6342
S'outcomeVar'
p6343
S'outcome_var'
p6344
S'outcome variable'
p6345
I0
I0
I00
Ntp6346
a(S'TVariable'
p6347
S'timeVar'
p6348
S'time_var'
p6349
S'time variable'
p6350
I0
I0
I00
Ntp6351
a(S'TValue'
p6352
S'eventValue'
p6353
S'event_value'
p6354
S'event (fail) value'
p6355
I0
I0
I01
Ntp6356
a(S'int'
p6357
S'method'
p6358
g6358
S' weighting method'
p6359
I0
I0
I01
S'Preprocessor_addCensorWeight_Method'
p6360
tp6361
a(S'float'
p6362
S'maxTime'
p6363
S'max_time'
p6364
S'maximal time'
p6365
I0
I0
I01
Ntp6366
a(S'bool'
p6367
S'addComplementary'
p6368
S'add_complementary'
p6369
S'if true (default is false), complementary examples are added for censored examples'
p6370
I0
I0
I01
Ntp6371
asg29
(dp6372
S'Method'
p6373
(lp6374
(S'Linear'
p6375
S'TPreprocessor_addCensorWeight::linear'
p6376
tp6377
a(S'KM'
p6378
S'TPreprocessor_addCensorWeight::km'
p6379
tp6380
a(S'Bayes'
p6381
S'TPreprocessor_addCensorWeight::bayes'
p6382
tp6383
assbsS'TRuleBeamCandidateSelector_Python'
p6384
(i__main__
ClassDefinition
p6385
(dp6386
g4
I1
sg5
I01
sg6
g6384
sg7
S'TRuleBeamCandidateSelector'
p6387
sg9
I00
sg10
(lp6388
sg12
(lp6389
sg29
(dp6390
sbsS'TIntList'
p6391
(ipyprops
ClassDefinition
p6392
(dp6393
g4
I0
sg5
I01
sg6
g6391
sg7
g143
sg9
I0
sg10
(lp6394
sg12
(lp6395
sg29
(dp6396
sbsS'TEntropyDiscretization'
p6397
(i__main__
ClassDefinition
p6398
(dp6399
g4
I1
sg5
I01
sg6
g6397
sg7
S'TDiscretization'
p6400
sg9
I00
sg10
(lp6401
sg12
(lp6402
(S'int'
p6403
S'maxNumberOfIntervals'
p6404
S'max_number_of_intervals'
p6405
S'maximal number of intervals; default = 0 (no limits)'
p6406
I0
I0
I01
Ntp6407
a(S'bool'
p6408
S'forceAttribute'
p6409
S'force_attribute'
p6410
S'minimal number of intervals; default = 0 (no limits)'
p6411
I0
I0
I01
Ntp6412
asg29
(dp6413
sbsS'TIMBySorting'
p6414
(i__main__
ClassDefinition
p6415
(dp6416
g4
I1
sg5
I01
sg6
g6414
sg7
S'TIMConstructor'
p6417
sg9
I00
sg10
(lp6418
sg12
(lp6419
g1207
asg29
(dp6420
sbsS'TTreeSplitConstructor_Threshold'
p6421
(i__main__
ClassDefinition
p6422
(dp6423
g4
I1
sg5
I01
sg6
g6421
sg7
S'TTreeSplitConstructor_Measure'
p6424
sg9
I00
sg10
(lp6425
sg12
(lp6426
g1260
ag1265
ag761
asg29
(dp6427
sbsS'TImputerConstructor_asValue'
p6428
(i__main__
ClassDefinition
p6429
(dp6430
g4
I1
sg5
I01
sg6
g6428
sg7
S'TImputerConstructor'
p6431
sg9
I00
sg10
(lp6432
sg12
(lp6433
g164
asg29
(dp6434
sbsS'TGaussianDistribution'
p6435
(i__main__
ClassDefinition
p6436
(dp6437
g4
I1
sg5
I01
sg6
g6435
sg7
S'TDistribution'
p6438
sg9
I00
sg10
(lp6439
sg12
(lp6440
(S'float'
p6441
S'mean'
p6442
g6442
S'mu'
p6443
I0
I0
I01
Ntp6444
a(S'float'
p6445
S'sigma'
p6446
g6446
S'sigma'
p6447
I0
I0
I01
Ntp6448
ag1090
ag1094
ag1098
ag1102
ag1106
ag1111
ag1116
ag1121
asg29
(dp6449
sbsS'TExampleDistVector'
p6450
(i__main__
ClassDefinition
p6451
(dp6452
g4
I1
sg5
I01
sg6
g6450
sg7
S'TOrange'
p6453
sg9
I00
sg10
(lp6454
sg12
(lp6455
sg29
(dp6456
sbsS'TConditionalProbabilityEstimatorList'
p6457
(ipyprops
ClassDefinition
p6458
(dp6459
g4
I0
sg5
I01
sg6
g6457
sg7
g143
sg9
I0
sg10
(lp6460
sg12
(lp6461
sg29
(dp6462
sbsS'TRuleBeamFilter_Width'
p6463
(i__main__
ClassDefinition
p6464
(dp6465
g4
I1
sg5
I01
sg6
g6463
sg7
S'TRuleBeamFilter'
p6466
sg9
I00
sg10
(lp6467
sg12
(lp6468
(S'int'
p6469
S'width'
p6470
g6470
g578
I0
I0
I01
Ntp6471
asg29
(dp6472
sbsS'TProbabilityEstimator'
p6473
(i__main__
ClassDefinition
p6474
(dp6475
g4
I1
sg5
I01
sg6
g6473
sg7
S'TOrange'
p6476
sg9
I01
sg10
(lp6477
sg12
(lp6478
g1480
ag1485
asg29
(dp6479
sbsS'TIMClustering'
p6480
(i__main__
ClassDefinition
p6481
(dp6482
g4
I1
sg5
I01
sg6
g6480
sg7
S'TOrange'
p6483
sg9
I00
sg10
(lp6484
sg12
(lp6485
(S'TIM'
p6486
S'im'
p6487
g6487
S'incompatibilty matrix'
p6488
I0
I0
I00
Ntp6489
a(S'TIntList'
p6490
S'clusters'
p6491
g6491
S'cluster index for each matrix column'
p6492
I0
I0
I00
Ntp6493
a(S'int'
p6494
S'maxCluster'
p6495
S'max_cluster'
p6496
S'the highest cluster index'
p6497
I0
I0
I01
Ntp6498
a(S'float'
p6499
S'quality'
p6500
g6500
S'cluster quality'
p6501
I0
I0
I01
Ntp6502
asg29
(dp6503
sbsS'TRuleStoppingCriteria'
p6504
(i__main__
ClassDefinition
p6505
(dp6506
g4
I1
sg5
I01
sg6
g6504
sg7
S'TOrange'
p6507
sg9
I01
sg10
(lp6508
sg12
(lp6509
sg29
(dp6510
sbsS'TImputerConstructor_model'
p6511
(i__main__
ClassDefinition
p6512
(dp6513
g4
I1
sg5
I01
sg6
g6511
sg7
S'TImputerConstructor'
p6514
sg9
I00
sg10
(lp6515
sg12
(lp6516
(S'TLearner'
p6517
S'learnerDiscrete'
p6518
S'learner_discrete'
p6519
S'learner for discrete attributes'
p6520
I0
I0
I00
Ntp6521
a(S'TLearner'
p6522
S'learnerContinuous'
p6523
S'learner_continuous'
p6524
S'learner for continuous attributes'
p6525
I0
I0
I00
Ntp6526
a(S'bool'
p6527
S'useClass'
p6528
S'use_class'
p6529
S'tells whether to use class value in imputation (default: false)'
p6530
I0
I0
I01
Ntp6531
ag164
asg29
(dp6532
sbsS'TFindNearestConstructor_BruteForce'
p6533
(i__main__
ClassDefinition
p6534
(dp6535
g4
I1
sg5
I01
sg6
g6533
sg7
S'TFindNearestConstructor'
p6536
sg9
I00
sg10
(lp6537
sg12
(lp6538
g1827
ag1832
asg29
(dp6539
sbsS'TImputerConstructor'
p6540
(i__main__
ClassDefinition
p6541
(dp6542
g4
I1
sg5
I01
sg6
g6540
sg7
S'TOrange'
p6543
sg9
I01
sg10
(lp6544
sg12
(lp6545
g164
asg29
(dp6546
sbsS'TPreprocessor'
p6547
(i__main__
ClassDefinition
p6548
(dp6549
g4
I1
sg5
I01
sg6
g6547
sg7
S'TOrange'
p6550
sg9
I01
sg10
(lp6551
sg12
(lp6552
sg29
(dp6553
sbsS'TDiscretizer'
p6554
(i__main__
ClassDefinition
p6555
(dp6556
g4
I1
sg5
I01
sg6
g6554
sg7
S'TTransformValue'
p6557
sg9
I01
sg10
(lp6558
sg12
(lp6559
g783
asg29
(dp6560
sbsS'TIMByRowsPreprocessor'
p6561
(i__main__
ClassDefinition
p6562
(dp6563
g4
I1
sg5
I01
sg6
g6561
sg7
S'TOrange'
p6564
sg9
I01
sg10
(lp6565
sg12
(lp6566
sg29
(dp6567
sbsS'TTreeStopCriteria_common'
p6568
(i__main__
ClassDefinition
p6569
(dp6570
g4
I1
sg5
I01
sg6
g6568
sg7
S'TTreeStopCriteria'
p6571
sg9
I00
sg10
(lp6572
sg12
(lp6573
(S'float'
p6574
S'maxMajority'
p6575
S'max_majority'
p6576
S'a maximal proportion of majority class for division to continue'
p6577
I0
I0
I01
Ntp6578
a(S'float'
p6579
S'minExamples'
p6580
S'min_examples'
p6581
S'a minimal number of examples for division to continue'
p6582
I0
I0
I01
Ntp6583
asg29
(dp6584
sbsS'TTreeStopCriteria_Python'
p6585
(i__main__
ClassDefinition
p6586
(dp6587
g4
I1
sg5
I01
sg6
g6585
sg7
S'TTreeStopCriteria'
p6588
sg9
I00
sg10
(lp6589
sg12
(lp6590
sg29
(dp6591
sbsS'TExamplesDistanceConstructor_Maximal'
p6592
(i__main__
ClassDefinition
p6593
(dp6594
g4
I1
sg5
I01
sg6
g6592
sg7
S'TExamplesDistanceConstructor_Normalized'
p6595
sg9
I00
sg10
(lp6596
sg12
(lp6597
g2058
ag2063
ag1325
asg29
(dp6598
sbsS'TIGByIM'
p6599
(i__main__
ClassDefinition
p6600
(dp6601
g4
I1
sg5
I01
sg6
g6599
sg7
S'TIGConstructor'
p6602
sg9
I00
sg10
(lp6603
sg12
(lp6604
(S'TIMConstructor'
p6605
S'IMconstructor'
p6606
g6606
S'IM constructor'
p6607
I0
I0
I00
Ntp6608
asg29
(dp6609
sbsS'TRuleEvaluator_LRS'
p6610
(i__main__
ClassDefinition
p6611
(dp6612
g4
I1
sg5
I01
sg6
g6610
sg7
S'TRuleEvaluator'
p6613
sg9
I00
sg10
(lp6614
sg12
(lp6615
(S'TRuleList'
p6616
S'rules'
p6617
g6617
g578
I0
I0
I00
Ntp6618
a(S'bool'
p6619
S'storeRules'
p6620
S'store_rules'
p6621
g578
I0
I0
I01
Ntp6622
asg29
(dp6623
sbs.