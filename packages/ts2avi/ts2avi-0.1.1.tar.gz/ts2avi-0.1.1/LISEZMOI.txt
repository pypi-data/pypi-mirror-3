========
 ts2avi
========

Introduction
--------------------------------------------------------------------

Les *box* comme la `freebox` de Free permettent l'enregistrement
de chaînes de télévision. Ces enregistrements sont effectués via
un serveur vlc au format TS (*transport stream*). Habituellement,
pour une émission ou un film de 2h, la taille du fichier peut
atteindre facilement 3 à 4 Go, ce qui fait que leur stockage
régulier sur votre disque dur peut lui faire atteindre ses limites
de capacité beaucoup plus vite que prévu.

`ts2avi` est un script python qui va vous permettre de convertir
toutes vos vidéos au format `ts` dans un format `divx` plus commun,
avec les codecs audio MP3 et vidéo MPEG4. Les tailles des fichiers
convertis sont ainsi 4 à 6 fois inférieures à celles des originaux,
tout en limitant cependant la dégradation de la qualité d'image.

Prérequis
--------------------------------------------------------------------

`ts2avi` est un script python, vous aurez donc besoin d'une version
récente de ce langage. Si la version 2.7 est recommandée, le script
devrait cependant fonctionner à partir de la 2.6, car il utilise
le module `subprocess`.

Pour la conversion vidéo, le script repose complètement sur
`mencoder` : vérifiez donc que ce dernier est installé ou 
téléchargez-le sur http://www.mplayerhq.hu/design7/dload.html.
La plupart des distributions GNU/Linux le proposent avec `mplayer`.

`ts2avi` ne fonctinne pour l'instant que sous Linux. Il est cependant
très certainement paramétrable pour les plates-formes MS Windows
à condition de modifier le script pour renseigner le chemin exact 
vers `mencoder`.

Installation
--------------------------------------------------------------------

`ts2avi` est livré comme un paquetage distutils. Pour l'installer,
téléchargez le paquet et décompressez-le dans un répertoire 
quelconque, puis tapez la ligne de commande suivante::

    $ python setup.py install

Ceci suppose en général que vous possédez les droits *root* pour
installer les *site-packages*. Cependant, si ce n'est pas le cas, 
vous pouvez avantageusement utiliser les dernières options 
d'installation *locale* de `distutils`::

    $ python setup.py install --user

Ceci installera tout dans votre répertoire ``$HOME/.local`` (pour
les utilisateurs de plates-formes POSIX). N'oubliez pas alors 
d'ajouter le répertoire ``$HOME/.local/bin`` à votre ``$PATH`` par
exemple en enrichissant ce dernier dans votre fichier source 
``.bashrc``.

Vous avez enfin la possibilité d'installer `ts2avi` directement
comme un `egg` python::

    $ easy_install ts2avi

Ceci téléchargera et installera automatiquement `ts2avi` pour vous.

Utilisation
--------------------------------------------------------------------

L'utilisation standard du script est la suivante::

    $ ts2avi.py <myrecord>.ts

Ceci convertira le fichier TS en argument en un fichier 
``<myrecord>.avi`` au format MPEG4. Notez également que le script
reconnaît toutes les expansions Unix classiques, ainsi par exemple
si vous voulez convertir tous les enregistrements de la chaîne TMC
placés dans le répertoire courant::

    $ ts2avi.py TMC*.ts

Si vous désirez stocker les fichiers convertis dans un autre
répertoire, par exemple sur un disque dur externe, utiliser 
l'option `--output_dir`::

    $ ts2avi.py --output_dir=/media/hdd/Videos *.ts

La conversion vidéo peut être faite selon différents 'profils'
(cf. le chapitre `Comment ça marche`_ ci-dessous). Pour sélectionner
un profil de conversion spécifique, tapez dans un terminal::

    $ ts2avi.py --profile='fast' <myrecord>.ts

Enfin, pour obtenir l'ensemble des explications relatives aux 
différentes options de `ts2avi`, essayez ::

    $ ts2avi.py --help

Comment ça marche
--------------------------------------------------------------------

Pour chaque fichier passé en argument du script, la conversion est
effectuée dans un répertoire temporaire. Les différentes étapes sont
les suivantes :

1. Le conteneur est transformé en MPEG ; cependant, les formats 
   audio et vidéo sont eux totalement préservés, il s'agit d'une
   simple opération de copie

2. La piste audio est extraite et convertie séparément en MP3

3. Enfin, un encodage en 2 passes de la vidéo au format MPEG4
   est effectué.
   
Différents profils de conversion sont disponibles. Pour en
choisir un, utilisez l'option `--profile`. Les étapes décrites
précédemment font référence au profil par défaut, qui est
censé fournir la meilleure qualité vidéo posible.

Limitations (v. 0.1.1)
--------------------------------------------------------------------

- Le script fonctionne avec les systèmes type Unix. Le configurer 
  pour Windows ne devrait pas poser cependant de gros problèmes : il
  suffit d'utiliser l'option `--mencoder_path` pour surcharger le
  chemin vers votre binaire local de `mencoder`. Cela n'a pas encore
  été testé... Cela pourra dans le futur se traduire par la
  création d'un profil spécifique pour les utilisateurs windows.
  
- Le multiprocessing ne fonctionne pas actuellement. Il serait
  pourtant utile, parce que convertir plusieurs vidéos peut prendre
  des heures voir plus sans utiliser à fond votre dualcore par
  exemple. Il est planifié dans une future version, en utilisant
  le module python `multiprocessing`.
  
- Les fichiers originaux ne sont pas détruits après la conversion,
  et ne le seront jamais même dans les prochaines versions. Ceci
  juste au cas où la qualité de la conversion ne vous conviendrait
  pas et que vous souhaiteriez tester un autre profil, par exemple !
  
- Bien sûr, `ts2avi` ne retire pas les séquences de pub de vos films.
  Pour cela, pas d'autre solution qu'utiliser un éditeur vidéo comme
  `Avidemux <http://avidemux.sourceforge.net>`_. Le faire avant la
  conversion est évidemment mieux, puisque vous gagnerez au moins le
  temps de conversion de la publicité !

TODO (v. 0.1.1)
--------------------------------------------------------------------

- permettre aux utilisateurs de définir leurs propres profils, par
  exemple dans un fichier ``ts2avi.ini``

- améliorer le traitement des erreurs

- remplacer les commandes python `print` pour l'affichage par le 
  module python `logging`
  
- autoriser les conversions en parallèle en utilisant le module 
  python `multiprocessing`
  


