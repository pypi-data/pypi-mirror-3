.. _moduleHarmony:

music21.harmony
===============

.. WARNING: DO NOT EDIT THIS FILE: AUTOMATICALLY GENERATED. Edit the .py file directly

.. module:: music21.harmony


An object representation of harmony, a subclass of chord, as encountered as chord symbols or
roman numerals, or other chord representations with a defined root.




.. function:: realizeChordSymbolDurations(piece)

    Returns music21 stream with duration attribute of chord symbols correctly set.
    Duration of chord symbols is based on the surrounding chord symbols; The chord symbol
    continues duration until another chord symbol is located or the piece ends. Useful for




    >>> from music21 import *
    >>> s = stream.Score()
    >>> s.append(harmony.ChordSymbol('C'))
    >>> s.repeatAppend(note.Note('C'), 4)
    >>> s.append(harmony.ChordSymbol('C'))
    >>> s.repeatAppend(note.Note('C'), 4)
    >>> s = s.makeMeasures()
    ⁠ 
    >>> harmony.realizeChordSymbolDurations(s).show('text')
    {0.0} <music21.clef.BassClef>
    {0.0} <music21.meter.TimeSignature 4/4>
    {0.0} <music21.harmony.ChordSymbol C>
    {0.0} <music21.note.Note C>
    {1.0} <music21.note.Note C>
    {2.0} <music21.note.Note C>
    {3.0} <music21.note.Note C>
    {4.0} <music21.harmony.ChordSymbol C>
    {4.0} <music21.note.Note C>
    {5.0} <music21.note.Note C>
    {6.0} <music21.note.Note C>
    {7.0} <music21.note.Note C>
    {8.0} <music21.bar.Barline style=final>


    If only one chord symbol object is present:



    >>> s = stream.Score()
    >>> s.append(harmony.ChordSymbol('C'))
    >>> s.repeatAppend(note.Note('C'), 4)
    >>> s = s.makeMeasures()
    >>> harmony.realizeChordSymbolDurations(s).show('text')
    {0.0} <music21.clef.BassClef>
    {0.0} <music21.meter.TimeSignature 4/4>
    {0.0} <music21.harmony.ChordSymbol C>
    {0.0} <music21.note.Note C>
    {1.0} <music21.note.Note C>
    {2.0} <music21.note.Note C>
    {3.0} <music21.note.Note C>
    {4.0} <music21.bar.Barline style=final>


    If a ChordSymbol object exists followed by many notes, duration represents all those notes
    (how else can the computer know to end the chord? if there's not chord following it other than
    end the chord at the end of the piece?)



    >>> s = stream.Score()
    >>> s.repeatAppend(note.Note('C'), 4)
    >>> s.append(harmony.ChordSymbol('C'))
    >>> s.repeatAppend(note.Note('C'), 8)
    >>> s = s.makeMeasures()
    >>> harmony.realizeChordSymbolDurations(s).show('text')
    {0.0} <music21.clef.BassClef>
    {0.0} <music21.meter.TimeSignature 4/4>
    {0.0} <music21.note.Note C>
    {1.0} <music21.note.Note C>
    {2.0} <music21.note.Note C>
    {3.0} <music21.note.Note C>
    {4.0} <music21.harmony.ChordSymbol C>
    {4.0} <music21.note.Note C>
    {5.0} <music21.note.Note C>
    {6.0} <music21.note.Note C>
    {7.0} <music21.note.Note C>
    {8.0} <music21.note.Note C>
    {9.0} <music21.note.Note C>
    {10.0} <music21.note.Note C>
    {11.0} <music21.note.Note C>
    {12.0} <music21.bar.Barline style=final>



Harmony
-------

Inherits from: :class:`~music21.chord.Chord`, :class:`~music21.note.NotRest`, :class:`~music21.note.GeneralNote`, :class:`~music21.base.Music21Object`, :class:`~music21.base.JSONSerializer`

.. class:: Harmony(figure=None, **keywords)




    >>> from music21 import *
    >>> h = harmony.ChordSymbol()
    >>> h.XMLroot = 'b-'
    >>> h.XMLbass = 'd'
    >>> h.XMLinversion = 1
    >>> h.addChordStepModification(harmony.ChordStepModification('add', 4))
    >>> h
    <music21.harmony.ChordSymbol B-/D add 4>
    >>> p = harmony.ChordSymbol(root='C', bass='E', kind = 'major')
    >>> p
    <music21.harmony.ChordSymbol C/E>

    Harmony objects in music21 are a special type of chord - they retain all the same functionality as a chord (and
    inherit from chord directly), although they have special representations symbolically. They contain a figure
    representation, a shorthand, for the actual pitches they contain. This shorthand is commonly used on musical
    scores rather than writing out the chord pitches. Thus, each harmony object has an attribute, self.writeAsChord
    that dictates whether the object will be written to a score as a chord (with pitches realized) or with just the
    figure (as in Chord Symbols).



    >>> from music21 import *
    >>> h = harmony.ChordSymbol('C7/E')
    >>> h.root()
    C4
    >>> h.bass()
    E3
    >>> h.inversion()
    1
    >>> h.isSeventh()
    True
    >>> h.pitches
    [E3, G3, B-3, C4]






    **Harmony** **attributes**

        Attributes without Documentation: `chordStepModifications`

        Attributes inherited from :class:`~music21.chord.Chord`: :attr:`~music21.chord.Chord.isChord`, :attr:`~music21.chord.Chord.isNote`, :attr:`~music21.chord.Chord.isRest`, :attr:`~music21.chord.Chord.beams`

        Attributes inherited from :class:`~music21.note.GeneralNote`: :attr:`~music21.note.GeneralNote.lyrics`, :attr:`~music21.note.GeneralNote.expressions`, :attr:`~music21.note.GeneralNote.articulations`, :attr:`~music21.note.GeneralNote.editorial`

        Attributes inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.classSortOrder`, :attr:`~music21.base.Music21Object.isSpanner`, :attr:`~music21.base.Music21Object.isStream`, :attr:`~music21.base.Music21Object.isVariant`, :attr:`~music21.base.Music21Object.id`, :attr:`~music21.base.Music21Object.groups`, :attr:`~music21.base.Music21Object.hideObjectOnPrint`

    **Harmony** **properties**

        .. attribute:: XMLbass


            Get or set the XMLbass of the Harmony as a :class:`~music21.pitch.Pitch` object.
            String representations accepted by Pitch are also accepted. Also updates the associated
            chord object's bass. If the bass is 'None' (commonly read in from music xml) then it returns
            the root pitch.



            >>> from music21 import *
            >>> h = harmony.ChordSymbol()
            >>> h.XMLbass = 'a#'
            >>> h.XMLbass
            A#
            >>> h.XMLbass = pitch.Pitch('d-')
            >>> h.XMLbass
            D-
            >>> h.XMLbass = 'juicy'
            Traceback (most recent call last):
            HarmonyException: not a valid pitch specification: juicy



        .. attribute:: XMLinversion


            Get or set the inversion of this Harmony as a positive integer. Also updates the associated
            chord object's bass.



            >>> from music21 import *
            >>> h = harmony.ChordSymbol()
            >>> h.XMLinversion = 2
            >>> h.XMLinversion
            2



        .. attribute:: XMLroot


            Get or set the XMLroot attribute of the Harmony as a :class:`~music21.pitch.Pitch` object.
            String representations accepted by Pitch are also accepted. Also updates the associated
            chord object's root



            >>> from music21 import *
            >>> h = harmony.ChordSymbol()
            >>> h.XMLroot= 'a#'
            >>> h.XMLroot
            A#
            >>> h.XMLroot= pitch.Pitch('c#')
            >>> h.XMLroot
            C#
            >>> h.XMLroot= 'juicy'
            Traceback (most recent call last):
            HarmonyException: not a valid pitch specification: juicy



        .. attribute:: figure


            Get or set the figure of the harmony object. The figure is the character (string)
            representation of the object. For example, 'I', 'CM', '3#'

            when you instantiate a harmony object, if you pass in a figure it is stored internally
            and returned when you access the figure property. if you don't instantiate the object
            with a figure, this property calls :meth:`music21.harmony.findFigure` method which
            deduces the figure provided other information about the object, especially the chord

            if the pitches of the harmony object have been modified after being instantiated,
            call :meth:`music21.harmony.findFigure` to deduce the new figure



            >>> from music21 import *
            >>> h = harmony.ChordSymbol('CM')
            >>> h.figure
            'CM'
            >>> harmony.ChordSymbol(root = 'C', bass = 'A', kind = 'minor').figure
            'Cm/A'
            >>> h.bass(note.Note('E'))
            >>> h.figure
            'CM'



        .. attribute:: romanNumeral


            Get or set the romanNumeral numeral function of the Harmony as a :class:`~music21.romanNumeral.RomanNumeral` object. String representations accepted by RomanNumeral are also accepted.



            >>> from music21 import *
            >>> h = harmony.ChordSymbol()
            >>> h.romanNumeral = 'III'
            >>> h.romanNumeral
            <music21.roman.RomanNumeral III>
            >>> h.romanNumeral = roman.RomanNumeral('vii')
            >>> h.romanNumeral
            <music21.roman.RomanNumeral vii>




        .. attribute:: writeAsChord

            No documentation.


        Properties inherited from :class:`~music21.chord.Chord`: :attr:`~music21.chord.Chord.pitches`, :attr:`~music21.chord.Chord.chordTablesAddress`, :attr:`~music21.chord.Chord.color`, :attr:`~music21.chord.Chord.commonName`, :attr:`~music21.chord.Chord.duration`, :attr:`~music21.chord.Chord.fifth`, :attr:`~music21.chord.Chord.forteClass`, :attr:`~music21.chord.Chord.forteClassNumber`, :attr:`~music21.chord.Chord.forteClassTn`, :attr:`~music21.chord.Chord.forteClassTnI`, :attr:`~music21.chord.Chord.fullName`, :attr:`~music21.chord.Chord.hasZRelation`, :attr:`~music21.chord.Chord.intervalVector`, :attr:`~music21.chord.Chord.intervalVectorString`, :attr:`~music21.chord.Chord.isPrimeFormInversion`, :attr:`~music21.chord.Chord.midiEvents`, :attr:`~music21.chord.Chord.midiFile`, :attr:`~music21.chord.Chord.multisetCardinality`, :attr:`~music21.chord.Chord.mx`, :attr:`~music21.chord.Chord.normalForm`, :attr:`~music21.chord.Chord.normalFormString`, :attr:`~music21.chord.Chord.orderedPitchClasses`, :attr:`~music21.chord.Chord.orderedPitchClassesString`, :attr:`~music21.chord.Chord.pitchClassCardinality`, :attr:`~music21.chord.Chord.pitchClasses`, :attr:`~music21.chord.Chord.pitchNames`, :attr:`~music21.chord.Chord.pitchedCommonName`, :attr:`~music21.chord.Chord.primeForm`, :attr:`~music21.chord.Chord.primeFormString`, :attr:`~music21.chord.Chord.quality`, :attr:`~music21.chord.Chord.scaleDegrees`, :attr:`~music21.chord.Chord.seventh`, :attr:`~music21.chord.Chord.third`, :attr:`~music21.chord.Chord.tie`, :attr:`~music21.chord.Chord.volume`

        Properties inherited from :class:`~music21.note.NotRest`: :attr:`~music21.note.NotRest.notehead`, :attr:`~music21.note.NotRest.noteheadFill`, :attr:`~music21.note.NotRest.noteheadParen`, :attr:`~music21.note.NotRest.stemDirection`

        Properties inherited from :class:`~music21.note.GeneralNote`: :attr:`~music21.note.GeneralNote.lyric`, :attr:`~music21.note.GeneralNote.musicxml`, :attr:`~music21.note.GeneralNote.quarterLength`

        Properties inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.activeSite`, :attr:`~music21.base.Music21Object.beat`, :attr:`~music21.base.Music21Object.beatDuration`, :attr:`~music21.base.Music21Object.beatStr`, :attr:`~music21.base.Music21Object.beatStrength`, :attr:`~music21.base.Music21Object.classes`, :attr:`~music21.base.Music21Object.derivationHierarchy`, :attr:`~music21.base.Music21Object.isGrace`, :attr:`~music21.base.Music21Object.measureNumber`, :attr:`~music21.base.Music21Object.offset`, :attr:`~music21.base.Music21Object.priority`, :attr:`~music21.base.Music21Object.seconds`

        Properties inherited from :class:`~music21.base.JSONSerializer`: :attr:`~music21.base.JSONSerializer.json`

    **Harmony** **methods**

        .. method:: addChordStepModification(degree)

            Add a harmony degree specification to this Harmony as a :class:`~music21.harmony.ChordStepModification` object.



            >>> from music21 import *
            >>> hd = harmony.ChordStepModification('add', 4)
            >>> h = harmony.ChordSymbol()
            >>> h.addChordStepModification(hd)
            >>> h.addChordStepModification('juicy')
            Traceback (most recent call last):
            HarmonyException: cannot add this object as a degree: juicy




        .. method:: findFigure()

            No documentation.


        .. method:: getChordStepModifications()

            Return all harmony degrees as a list.



        Methods inherited from :class:`~music21.chord.Chord`: :meth:`~music21.chord.Chord.annotateIntervals`, :meth:`~music21.chord.Chord.areZRelations`, :meth:`~music21.chord.Chord.bass`, :meth:`~music21.chord.Chord.canBeDominantV`, :meth:`~music21.chord.Chord.canBeTonic`, :meth:`~music21.chord.Chord.closedPosition`, :meth:`~music21.chord.Chord.containsSeventh`, :meth:`~music21.chord.Chord.containsTriad`, :meth:`~music21.chord.Chord.findRoot`, :meth:`~music21.chord.Chord.getChordStep`, :meth:`~music21.chord.Chord.getColor`, :meth:`~music21.chord.Chord.getNotehead`, :meth:`~music21.chord.Chord.getStemDirection`, :meth:`~music21.chord.Chord.getTie`, :meth:`~music21.chord.Chord.getVolume`, :meth:`~music21.chord.Chord.getZRelation`, :meth:`~music21.chord.Chord.hasAnyRepeatedDiatonicNote`, :meth:`~music21.chord.Chord.hasComponentVolumes`, :meth:`~music21.chord.Chord.hasRepeatedChordStep`, :meth:`~music21.chord.Chord.intervalFromChordStep`, :meth:`~music21.chord.Chord.inversion`, :meth:`~music21.chord.Chord.inversionName`, :meth:`~music21.chord.Chord.isAugmentedSixth`, :meth:`~music21.chord.Chord.isAugmentedTriad`, :meth:`~music21.chord.Chord.isConsonant`, :meth:`~music21.chord.Chord.isDiminishedSeventh`, :meth:`~music21.chord.Chord.isDiminishedTriad`, :meth:`~music21.chord.Chord.isDominantSeventh`, :meth:`~music21.chord.Chord.isFalseDiminishedSeventh`, :meth:`~music21.chord.Chord.isFrenchAugmentedSixth`, :meth:`~music21.chord.Chord.isGermanAugmentedSixth`, :meth:`~music21.chord.Chord.isHalfDiminishedSeventh`, :meth:`~music21.chord.Chord.isIncompleteMajorTriad`, :meth:`~music21.chord.Chord.isIncompleteMinorTriad`, :meth:`~music21.chord.Chord.isItalianAugmentedSixth`, :meth:`~music21.chord.Chord.isMajorTriad`, :meth:`~music21.chord.Chord.isMinorTriad`, :meth:`~music21.chord.Chord.isSeventh`, :meth:`~music21.chord.Chord.isSwissAugmentedSixth`, :meth:`~music21.chord.Chord.isTriad`, :meth:`~music21.chord.Chord.removeRedundantPitchClasses`, :meth:`~music21.chord.Chord.removeRedundantPitchNames`, :meth:`~music21.chord.Chord.removeRedundantPitches`, :meth:`~music21.chord.Chord.root`, :meth:`~music21.chord.Chord.seekChordTablesAddress`, :meth:`~music21.chord.Chord.semiClosedPosition`, :meth:`~music21.chord.Chord.semitonesFromChordStep`, :meth:`~music21.chord.Chord.setColor`, :meth:`~music21.chord.Chord.setNotehead`, :meth:`~music21.chord.Chord.setStemDirection`, :meth:`~music21.chord.Chord.setTie`, :meth:`~music21.chord.Chord.setVolume`, :meth:`~music21.chord.Chord.sortAscending`, :meth:`~music21.chord.Chord.sortChromaticAscending`, :meth:`~music21.chord.Chord.sortDiatonicAscending`, :meth:`~music21.chord.Chord.sortFrequencyAscending`, :meth:`~music21.chord.Chord.transpose`

        Methods inherited from :class:`~music21.note.NotRest`: :meth:`~music21.note.NotRest.jsonAttributes`

        Methods inherited from :class:`~music21.note.GeneralNote`: :meth:`~music21.note.GeneralNote.addLyric`, :meth:`~music21.note.GeneralNote.augmentOrDiminish`, :meth:`~music21.note.GeneralNote.compactNoteInfo`, :meth:`~music21.note.GeneralNote.getGrace`, :meth:`~music21.note.GeneralNote.hasLyrics`, :meth:`~music21.note.GeneralNote.insertLyric`

        Methods inherited from :class:`~music21.base.Music21Object`: :meth:`~music21.base.Music21Object.addContext`, :meth:`~music21.base.Music21Object.addLocation`, :meth:`~music21.base.Music21Object.addLocationAndActiveSite`, :meth:`~music21.base.Music21Object.freezeIds`, :meth:`~music21.base.Music21Object.getAllContextsByClass`, :meth:`~music21.base.Music21Object.getCommonSiteIds`, :meth:`~music21.base.Music21Object.getCommonSites`, :meth:`~music21.base.Music21Object.getContextAttr`, :meth:`~music21.base.Music21Object.getContextByClass`, :meth:`~music21.base.Music21Object.getOffsetBySite`, :meth:`~music21.base.Music21Object.getSiteIds`, :meth:`~music21.base.Music21Object.getSites`, :meth:`~music21.base.Music21Object.getSpannerSites`, :meth:`~music21.base.Music21Object.hasContext`, :meth:`~music21.base.Music21Object.hasSite`, :meth:`~music21.base.Music21Object.hasSpannerSite`, :meth:`~music21.base.Music21Object.hasVariantSite`, :meth:`~music21.base.Music21Object.isClassOrSubclass`, :meth:`~music21.base.Music21Object.mergeAttributes`, :meth:`~music21.base.Music21Object.next`, :meth:`~music21.base.Music21Object.previous`, :meth:`~music21.base.Music21Object.purgeLocations`, :meth:`~music21.base.Music21Object.purgeOrphans`, :meth:`~music21.base.Music21Object.purgeUndeclaredIds`, :meth:`~music21.base.Music21Object.removeLocationBySite`, :meth:`~music21.base.Music21Object.removeLocationBySiteId`, :meth:`~music21.base.Music21Object.searchActiveSiteByAttr`, :meth:`~music21.base.Music21Object.setContextAttr`, :meth:`~music21.base.Music21Object.setOffsetBySite`, :meth:`~music21.base.Music21Object.show`, :meth:`~music21.base.Music21Object.splitAtDurations`, :meth:`~music21.base.Music21Object.splitAtQuarterLength`, :meth:`~music21.base.Music21Object.splitByQuarterLengths`, :meth:`~music21.base.Music21Object.unfreezeIds`, :meth:`~music21.base.Music21Object.unwrapWeakref`, :meth:`~music21.base.Music21Object.wrapWeakref`, :meth:`~music21.base.Music21Object.write`

        Methods inherited from :class:`~music21.base.JSONSerializer`: :meth:`~music21.base.JSONSerializer.jsonComponentFactory`, :meth:`~music21.base.JSONSerializer.jsonPrint`, :meth:`~music21.base.JSONSerializer.jsonRead`, :meth:`~music21.base.JSONSerializer.jsonWrite`


ChordSymbol
-----------

Inherits from: :class:`~music21.harmony.Harmony`, :class:`~music21.chord.Chord`, :class:`~music21.note.NotRest`, :class:`~music21.note.GeneralNote`, :class:`~music21.base.Music21Object`, :class:`~music21.base.JSONSerializer`

.. class:: ChordSymbol(figure=None, **keywords)


    Class representing the Chord Symbols commonly found on lead sheets. Chord Symbol objects
    can be instantiated one of two main ways:
    1) when music xml is parsed by the music21 converter, xml Chord Symbol tags are
    interpreted as Chord Symbol objects with a root and kind attribute. If bass is not specified,
    the bass is assumed to be the root

    2) by creating a chord symbol object with music21 by passing in the expression commonly found on
    leadsheets. Due to the relative diversity of lead sheet chord syntax, not all expressions
    are supported. Consult the examples for the supported syntax, or email us for help.

    All :class:`~music21.harmony.ChordSymbol` inherit from :class:`~music21.chord.Chord` so you can
    consider these objects as chords, although they have a unique representation in a score. ChordSymbols,
    unlike chords, by default appear as chord symbols in a score and have duration of 0.
    To obtain the chord representation of the in the score, change the
    :attr:`music21.harmony.ChordSymbol.writeAsChord` to True. Unless otherwise specified, the duration
    of this chord object will become 1.0. If you have a leadsheet, run
    :meth:`music21.harmony.realizeChordSymbolDurations` on the stream to assign the correct (according to
    offsets) duration to each harmony object.)

    The music xml-based approach to instantiating Chord Symbol objects:



    >>> from music21 import *
    >>> cs = harmony.ChordSymbol(kind='minor',kindStr = 'm', root='C', bass = 'E-')
    >>> cs
    <music21.harmony.ChordSymbol Cm/E->
    >>> cs.XMLkind
    'minor'
    >>> cs.XMLroot
    C
    >>> cs.XMLbass
    E-

    The second approach to creating a Chord Symbol object, by passing a regular expression:



    >>> harmony.ChordSymbol('C').pitches
    [C3, E3, G3]
    >>> harmony.ChordSymbol('Cm').pitches
    [C3, E-3, G3]
    >>> harmony.ChordSymbol('C+').pitches
    [C3, E3, G#3]
    >>> harmony.ChordSymbol('Cdim').pitches
    [C3, E-3, G-3]
    >>> harmony.ChordSymbol('C7').pitches
    [C3, E3, G3, B-3]
    >>> harmony.ChordSymbol('CM7').pitches
    [C3, E3, G3, B3]
    >>> harmony.ChordSymbol('Cm7').pitches
    [C3, E-3, G3, B-3]
    >>> harmony.ChordSymbol('Cdim7').pitches
    [C3, E-3, G-3, B--3]
    >>> harmony.ChordSymbol('C7+').pitches
    [C3, E3, G#3, B-3]
    >>> harmony.ChordSymbol('Cm7b5').pitches #half-diminished
    [C3, E-3, G-3, B-3]
    >>> harmony.ChordSymbol('CmMaj7').pitches
    [C3, E-3, G3, B3]
    >>> harmony.ChordSymbol('C6').pitches
    [C3, E3, G3, A3]
    >>> harmony.ChordSymbol('Cm6').pitches
    [C3, E-3, G3, A3]
    >>> harmony.ChordSymbol('C9').pitches
    [C3, E3, G3, B-3, D4]
    >>> harmony.ChordSymbol('CMaj9').pitches
    [C3, E3, G3, B3, D4]
    >>> harmony.ChordSymbol('Cm9').pitches
    [C3, E-3, G3, B-3, D4]
    >>> harmony.ChordSymbol('C11').pitches
    [C2, E2, G2, B-2, D3, F3]
    >>> harmony.ChordSymbol('CMaj11').pitches
    [C2, E2, G2, B2, D3, F3]
    >>> harmony.ChordSymbol('Cm11').pitches
    [C2, E-2, G2, B-2, D3, F3]
    >>> harmony.ChordSymbol('C13').pitches
    [C2, E2, G2, B-2, D3, F3, A3]
    >>> harmony.ChordSymbol('CMaj13').pitches
    [C2, E2, G2, B2, D3, F3, A3]
    >>> harmony.ChordSymbol('Cm13').pitches
    [C2, E-2, G2, B-2, D3, F3, A3]
    >>> harmony.ChordSymbol('Csus2').pitches
    [C3, D3, G3]
    >>> harmony.ChordSymbol('Csus4').pitches
    [C3, F3, G3]
    >>> harmony.ChordSymbol('CN6').pitches
    [C3, D-3, E3, G-3]
    >>> harmony.ChordSymbol('CIt+6').pitches
    [C3, F#3, A-3]
    >>> harmony.ChordSymbol('CFr+6').pitches
    [C3, D3, F#3, A-3]
    >>> harmony.ChordSymbol('CGr+6').pitches
    [C3, E-3, F#3, A-3]
    >>> harmony.ChordSymbol('Cpedal').pitches
    [C3]
    >>> harmony.ChordSymbol('Cpower').pitches
    [C3, G3]
    >>> harmony.ChordSymbol('Ftristan').pitches
    [F3, G#3, B3, D#4]
    >>> harmony.ChordSymbol('C/E').pitches
    [E3, G3, C4]
    >>> harmony.ChordSymbol('Dm7/F').pitches
    [F3, A3, C4, D4]
    >>> harmony.ChordSymbol('Cadd2').pitches
    [C3, D3, E3, G3]
    >>> harmony.ChordSymbol('C7omit3').pitches
    [C3, G3, B-3]

    You can also create a Chord Symbol by writing out each degree, and any alterations to that degree:
    You must explicitly indicate EACH degree (a triad is NOT necessarily implied)



    >>> harmony.ChordSymbol('C35b7b9#11b13').pitches
    [C3, D-3, E3, F#3, G3, A-3, B-3]
    ⁠ 
    >>> harmony.ChordSymbol('C35911').pitches
    [C3, D3, E3, F3, G3]

    Ambiguity in notation: if the expression is ambiguous, for example 'Db35' (is this
    the key of Db with a third and a fifth, or is this key of D with a flat 3 and
    normal fifth?) To prevent ambiguity, insert a comma after the root.



    >>> harmony.ChordSymbol('Db,35').pitches
    [D-3, F3, A-3]
    >>> harmony.ChordSymbol('D,b35').pitches
    [D3, F3, A3]
    >>> harmony.ChordSymbol('D,35b7b9#11b13').pitches
    [D3, E-3, F#3, G#3, A3, B-3, C4]

    The '-' symbol and the 'b' symbol are interchangeable, they correspond to flat, not minor.



    >>> harmony.ChordSymbol('Am').pitches
    [A2, C3, E3]
    >>> harmony.ChordSymbol('Abm').pitches
    [A-2, C-3, E-3]
    >>> harmony.ChordSymbol('A-m').pitches
    [A-2, C-3, E-3]
    >>> harmony.ChordSymbol('F-dim7').pitches
    [F-2, A--2, C--3, E---3]



    **ChordSymbol** **attributes**

        Attributes without Documentation: `XMLkindStr`, `XMLkind`

        Attributes inherited from :class:`~music21.harmony.Harmony`: :attr:`~music21.harmony.Harmony.chordStepModifications`

        Attributes inherited from :class:`~music21.chord.Chord`: :attr:`~music21.chord.Chord.isChord`, :attr:`~music21.chord.Chord.isNote`, :attr:`~music21.chord.Chord.isRest`, :attr:`~music21.chord.Chord.beams`

        Attributes inherited from :class:`~music21.note.GeneralNote`: :attr:`~music21.note.GeneralNote.lyrics`, :attr:`~music21.note.GeneralNote.expressions`, :attr:`~music21.note.GeneralNote.articulations`, :attr:`~music21.note.GeneralNote.editorial`

        Attributes inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.classSortOrder`, :attr:`~music21.base.Music21Object.isSpanner`, :attr:`~music21.base.Music21Object.isStream`, :attr:`~music21.base.Music21Object.isVariant`, :attr:`~music21.base.Music21Object.id`, :attr:`~music21.base.Music21Object.groups`, :attr:`~music21.base.Music21Object.hideObjectOnPrint`

    **ChordSymbol** **properties**

        Properties inherited from :class:`~music21.harmony.Harmony`: :attr:`~music21.harmony.Harmony.XMLbass`, :attr:`~music21.harmony.Harmony.XMLinversion`, :attr:`~music21.harmony.Harmony.XMLroot`, :attr:`~music21.harmony.Harmony.figure`, :attr:`~music21.harmony.Harmony.romanNumeral`, :attr:`~music21.harmony.Harmony.writeAsChord`

        Properties inherited from :class:`~music21.chord.Chord`: :attr:`~music21.chord.Chord.pitches`, :attr:`~music21.chord.Chord.chordTablesAddress`, :attr:`~music21.chord.Chord.color`, :attr:`~music21.chord.Chord.commonName`, :attr:`~music21.chord.Chord.duration`, :attr:`~music21.chord.Chord.fifth`, :attr:`~music21.chord.Chord.forteClass`, :attr:`~music21.chord.Chord.forteClassNumber`, :attr:`~music21.chord.Chord.forteClassTn`, :attr:`~music21.chord.Chord.forteClassTnI`, :attr:`~music21.chord.Chord.fullName`, :attr:`~music21.chord.Chord.hasZRelation`, :attr:`~music21.chord.Chord.intervalVector`, :attr:`~music21.chord.Chord.intervalVectorString`, :attr:`~music21.chord.Chord.isPrimeFormInversion`, :attr:`~music21.chord.Chord.midiEvents`, :attr:`~music21.chord.Chord.midiFile`, :attr:`~music21.chord.Chord.multisetCardinality`, :attr:`~music21.chord.Chord.mx`, :attr:`~music21.chord.Chord.normalForm`, :attr:`~music21.chord.Chord.normalFormString`, :attr:`~music21.chord.Chord.orderedPitchClasses`, :attr:`~music21.chord.Chord.orderedPitchClassesString`, :attr:`~music21.chord.Chord.pitchClassCardinality`, :attr:`~music21.chord.Chord.pitchClasses`, :attr:`~music21.chord.Chord.pitchNames`, :attr:`~music21.chord.Chord.pitchedCommonName`, :attr:`~music21.chord.Chord.primeForm`, :attr:`~music21.chord.Chord.primeFormString`, :attr:`~music21.chord.Chord.quality`, :attr:`~music21.chord.Chord.scaleDegrees`, :attr:`~music21.chord.Chord.seventh`, :attr:`~music21.chord.Chord.third`, :attr:`~music21.chord.Chord.tie`, :attr:`~music21.chord.Chord.volume`

        Properties inherited from :class:`~music21.note.NotRest`: :attr:`~music21.note.NotRest.notehead`, :attr:`~music21.note.NotRest.noteheadFill`, :attr:`~music21.note.NotRest.noteheadParen`, :attr:`~music21.note.NotRest.stemDirection`

        Properties inherited from :class:`~music21.note.GeneralNote`: :attr:`~music21.note.GeneralNote.lyric`, :attr:`~music21.note.GeneralNote.musicxml`, :attr:`~music21.note.GeneralNote.quarterLength`

        Properties inherited from :class:`~music21.base.Music21Object`: :attr:`~music21.base.Music21Object.activeSite`, :attr:`~music21.base.Music21Object.beat`, :attr:`~music21.base.Music21Object.beatDuration`, :attr:`~music21.base.Music21Object.beatStr`, :attr:`~music21.base.Music21Object.beatStrength`, :attr:`~music21.base.Music21Object.classes`, :attr:`~music21.base.Music21Object.derivationHierarchy`, :attr:`~music21.base.Music21Object.isGrace`, :attr:`~music21.base.Music21Object.measureNumber`, :attr:`~music21.base.Music21Object.offset`, :attr:`~music21.base.Music21Object.priority`, :attr:`~music21.base.Music21Object.seconds`

        Properties inherited from :class:`~music21.base.JSONSerializer`: :attr:`~music21.base.JSONSerializer.json`

    **ChordSymbol** **methods**

        .. method:: findFigure()


            return the chord symbol figure associated with this chord. the XMLroot, XMLbass and XMLkind
            attributes must be specified

            Needs development - TODO: chord step modifications need actual pitches rather than numeric degrees



            >>> from music21 import *
            >>> h = harmony.ChordSymbol(root = 'F', bass = 'D-', kind = 'Neapolitan')
            >>> h.figure
            'FN6/D-'



        .. method:: inversionIsValid(inversion)


            returns true if the provided inversion is exists for the given pitches of the chord. If not, it returns
            false and the getPitches method then appends the bass pitch to the chord.



        Methods inherited from :class:`~music21.harmony.Harmony`: :meth:`~music21.harmony.Harmony.addChordStepModification`, :meth:`~music21.harmony.Harmony.getChordStepModifications`

        Methods inherited from :class:`~music21.chord.Chord`: :meth:`~music21.chord.Chord.annotateIntervals`, :meth:`~music21.chord.Chord.areZRelations`, :meth:`~music21.chord.Chord.bass`, :meth:`~music21.chord.Chord.canBeDominantV`, :meth:`~music21.chord.Chord.canBeTonic`, :meth:`~music21.chord.Chord.closedPosition`, :meth:`~music21.chord.Chord.containsSeventh`, :meth:`~music21.chord.Chord.containsTriad`, :meth:`~music21.chord.Chord.findRoot`, :meth:`~music21.chord.Chord.getChordStep`, :meth:`~music21.chord.Chord.getColor`, :meth:`~music21.chord.Chord.getNotehead`, :meth:`~music21.chord.Chord.getStemDirection`, :meth:`~music21.chord.Chord.getTie`, :meth:`~music21.chord.Chord.getVolume`, :meth:`~music21.chord.Chord.getZRelation`, :meth:`~music21.chord.Chord.hasAnyRepeatedDiatonicNote`, :meth:`~music21.chord.Chord.hasComponentVolumes`, :meth:`~music21.chord.Chord.hasRepeatedChordStep`, :meth:`~music21.chord.Chord.intervalFromChordStep`, :meth:`~music21.chord.Chord.inversion`, :meth:`~music21.chord.Chord.inversionName`, :meth:`~music21.chord.Chord.isAugmentedSixth`, :meth:`~music21.chord.Chord.isAugmentedTriad`, :meth:`~music21.chord.Chord.isConsonant`, :meth:`~music21.chord.Chord.isDiminishedSeventh`, :meth:`~music21.chord.Chord.isDiminishedTriad`, :meth:`~music21.chord.Chord.isDominantSeventh`, :meth:`~music21.chord.Chord.isFalseDiminishedSeventh`, :meth:`~music21.chord.Chord.isFrenchAugmentedSixth`, :meth:`~music21.chord.Chord.isGermanAugmentedSixth`, :meth:`~music21.chord.Chord.isHalfDiminishedSeventh`, :meth:`~music21.chord.Chord.isIncompleteMajorTriad`, :meth:`~music21.chord.Chord.isIncompleteMinorTriad`, :meth:`~music21.chord.Chord.isItalianAugmentedSixth`, :meth:`~music21.chord.Chord.isMajorTriad`, :meth:`~music21.chord.Chord.isMinorTriad`, :meth:`~music21.chord.Chord.isSeventh`, :meth:`~music21.chord.Chord.isSwissAugmentedSixth`, :meth:`~music21.chord.Chord.isTriad`, :meth:`~music21.chord.Chord.removeRedundantPitchClasses`, :meth:`~music21.chord.Chord.removeRedundantPitchNames`, :meth:`~music21.chord.Chord.removeRedundantPitches`, :meth:`~music21.chord.Chord.root`, :meth:`~music21.chord.Chord.seekChordTablesAddress`, :meth:`~music21.chord.Chord.semiClosedPosition`, :meth:`~music21.chord.Chord.semitonesFromChordStep`, :meth:`~music21.chord.Chord.setColor`, :meth:`~music21.chord.Chord.setNotehead`, :meth:`~music21.chord.Chord.setStemDirection`, :meth:`~music21.chord.Chord.setTie`, :meth:`~music21.chord.Chord.setVolume`, :meth:`~music21.chord.Chord.sortAscending`, :meth:`~music21.chord.Chord.sortChromaticAscending`, :meth:`~music21.chord.Chord.sortDiatonicAscending`, :meth:`~music21.chord.Chord.sortFrequencyAscending`, :meth:`~music21.chord.Chord.transpose`

        Methods inherited from :class:`~music21.note.NotRest`: :meth:`~music21.note.NotRest.jsonAttributes`

        Methods inherited from :class:`~music21.note.GeneralNote`: :meth:`~music21.note.GeneralNote.addLyric`, :meth:`~music21.note.GeneralNote.augmentOrDiminish`, :meth:`~music21.note.GeneralNote.compactNoteInfo`, :meth:`~music21.note.GeneralNote.getGrace`, :meth:`~music21.note.GeneralNote.hasLyrics`, :meth:`~music21.note.GeneralNote.insertLyric`

        Methods inherited from :class:`~music21.base.Music21Object`: :meth:`~music21.base.Music21Object.addContext`, :meth:`~music21.base.Music21Object.addLocation`, :meth:`~music21.base.Music21Object.addLocationAndActiveSite`, :meth:`~music21.base.Music21Object.freezeIds`, :meth:`~music21.base.Music21Object.getAllContextsByClass`, :meth:`~music21.base.Music21Object.getCommonSiteIds`, :meth:`~music21.base.Music21Object.getCommonSites`, :meth:`~music21.base.Music21Object.getContextAttr`, :meth:`~music21.base.Music21Object.getContextByClass`, :meth:`~music21.base.Music21Object.getOffsetBySite`, :meth:`~music21.base.Music21Object.getSiteIds`, :meth:`~music21.base.Music21Object.getSites`, :meth:`~music21.base.Music21Object.getSpannerSites`, :meth:`~music21.base.Music21Object.hasContext`, :meth:`~music21.base.Music21Object.hasSite`, :meth:`~music21.base.Music21Object.hasSpannerSite`, :meth:`~music21.base.Music21Object.hasVariantSite`, :meth:`~music21.base.Music21Object.isClassOrSubclass`, :meth:`~music21.base.Music21Object.mergeAttributes`, :meth:`~music21.base.Music21Object.next`, :meth:`~music21.base.Music21Object.previous`, :meth:`~music21.base.Music21Object.purgeLocations`, :meth:`~music21.base.Music21Object.purgeOrphans`, :meth:`~music21.base.Music21Object.purgeUndeclaredIds`, :meth:`~music21.base.Music21Object.removeLocationBySite`, :meth:`~music21.base.Music21Object.removeLocationBySiteId`, :meth:`~music21.base.Music21Object.searchActiveSiteByAttr`, :meth:`~music21.base.Music21Object.setContextAttr`, :meth:`~music21.base.Music21Object.setOffsetBySite`, :meth:`~music21.base.Music21Object.show`, :meth:`~music21.base.Music21Object.splitAtDurations`, :meth:`~music21.base.Music21Object.splitAtQuarterLength`, :meth:`~music21.base.Music21Object.splitByQuarterLengths`, :meth:`~music21.base.Music21Object.unfreezeIds`, :meth:`~music21.base.Music21Object.unwrapWeakref`, :meth:`~music21.base.Music21Object.wrapWeakref`, :meth:`~music21.base.Music21Object.write`

        Methods inherited from :class:`~music21.base.JSONSerializer`: :meth:`~music21.base.JSONSerializer.jsonComponentFactory`, :meth:`~music21.base.JSONSerializer.jsonPrint`, :meth:`~music21.base.JSONSerializer.jsonRead`, :meth:`~music21.base.JSONSerializer.jsonWrite`


ChordStepModification
---------------------



.. class:: ChordStepModification(modType=None, degree=None, interval=None)

    ChordStepModification objects define the specification of harmony degree alterations, subtractions, or additions,
    used in :class:`~music21.harmony.Harmony` objects, which includes harmony.ChordSymbol objects (and
    will include harmony.RomanNumeral objects)

       degree-value element: indicates degree in chord, positive integers only
       degree-alter: indicates semitone alteration of degree, positive and negative integers only
       degree-type: add, alter, or subtract

       if add:  degree-alter is relative to a dominant chord (major and perfect intervals except for a minor seventh)

       if alter or subtract: degree-alter is relative to degree already in the chord based on its kind element

        >>> from music21 import *
        >>> hd = harmony.ChordStepModification('add', 4)
        >>> hd
        <music21.harmony.ChordStepModification modType=add degree=4 interval=None>
        >>> hd = harmony.ChordStepModification('alter', 3, 1)
        >>> hd
        <music21.harmony.ChordStepModification modType=alter degree=3 interval=<music21.interval.Interval A1>>




    **ChordStepModification** **properties**

        .. attribute:: degree





            >>> from music21 import *
            >>> hd = harmony.ChordStepModification()
            >>> hd.degree = 3
            >>> hd.degree
            3
            >>> hd.degree = 'juicy'
            Traceback (most recent call last):
            ChordStepModificationException: not a valid degree: juicy




        .. attribute:: interval


            Get or set the alteration of this degree as a :class:`~music21.interval.Interval` object.



            >>> from music21 import *
            >>> hd = harmony.ChordStepModification()
            >>> hd.interval = 1
            >>> hd.interval
            <music21.interval.Interval A1>
            >>> hd.interval = -2
            >>> hd.interval
            <music21.interval.Interval AA-1>



        .. attribute:: modType


            Get or set the ChordStepModification modification type, where permitted types are the strings add, subtract, or alter.



            >>> from music21 import *
            >>> hd = harmony.ChordStepModification()
            >>> hd.modType = 'add'
            >>> hd.modType
            'add'
            >>> hd.modType = 'juicy'
            Traceback (most recent call last):
            ChordStepModificationException: not a valid degree modification type: juicy




