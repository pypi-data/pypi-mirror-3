#!/usr/bin/env python

# Copyright (c) 2009, Purdue University
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this
# list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# Neither the name of the Purdue University nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""Remove zone, view, dns server, dns server set tool for dnsmanagement"""


__copyright__ = 'Copyright (C) 2009, Purdue University'
__license__ = 'BSD'
__version__ = '0.17'


import sys

from roster_user_tools import cli_common_lib
from roster_user_tools import roster_client_lib
from roster_user_tools.action_flags import Remove
from roster_user_tools.data_flags import Zone


class Args(Remove, Zone):
  pass

def main(args):
  """Collects command line arguments.

  Inputs:
    args: list of arguments from the command line
  """
  command = 'forward'
  if( args and not args[0].startswith('-') ):
    command = args.pop(0)
  usage = ('\n'
           '\n'
           'To remove zones:\n'
           '\t%s -z <zone-name> -v <view-name>|--force\n' % tuple(
               [sys.argv[0] for _ in range(1)]))
  args_instance = Args(command, ['forward', 'reverse'], args, usage)
  options = args_instance.options

  try:
    cli_common_lib_instance = cli_common_lib.CliCommonLib(options)
  except cli_common_lib.ArgumentError, error:
    print 'ERROR: %s' % error
    sys.exit(1)

  if( options.zone_name and not options.view_name and not options.force ):
    cli_common_lib.DnsError('Must use --force to delete entire Zone.', 1)

  core_return = roster_client_lib.RunFunction(
      u'RemoveZone', options.username, credfile=options.credfile,
      credstring=options.credstring, server_name=options.server,
      args=[options.zone_name], kwargs={'view_name': options.view_name})[
          'core_return']

  if( not options.quiet and core_return ):
    view = options.view_name
    print 'REMOVED ZONE: zone_name: %s view_name: %s' % (
        options.zone_name, view)
  elif( not core_return ):
    views = roster_client_lib.RunFunction(
        u'ListViews', options.username, credfile=options.credfile,
        credstring=options.credstring, server_name=options.server,
        kwargs={u'view_name': options.view_name})['core_return']

    if( options.view_name and not views and options.view_name != 'any'):
      # View does not exist
      cli_common_lib.DnsError('View not found.', 1)
    else:
      # View exists, zone/view does not.
      if( options.view_name ):
        cli_common_lib.DnsError('Zone "%s" does not exist in "%s" view.' % (
            options.zone_name, options.view_name), 1)
      else:
        cli_common_lib.DnsError('Zone "%s" does not exist.' % options.zone_name)
  else:
    cli_common_lib.DnsError('Error in program logic.', 1)

if __name__ == "__main__":
  main(sys.argv[1:])
