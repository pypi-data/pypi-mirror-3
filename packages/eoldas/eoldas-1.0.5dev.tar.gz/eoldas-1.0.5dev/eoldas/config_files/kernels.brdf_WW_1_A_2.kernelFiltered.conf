# NB case is ignored on keys


[parameter]
location = ['time']
limits = [[1,365,1]]
# NB limits are inclusive
#limits = [[70,170,1]]
help_limits = Specify the limits for location variables.                    Of the form [[min,max,step],[...]].                                     e.g. [[70,170,1]] for location ['time']
names = 'gamma_time Isotropic RossThick LiSparseModis'.split()
solve = [1]*len($parameter.names)
help_solve = 'Solver switch for state variables parameter.names            0 : leave at default                                                    1 : solve for each location                                             2 : solve a single value for all locations                                       e.g. [0, 1, 1, 1]'
datatypes = x

[parameter.result]
filename = './fwd-brdf_WW_1_A_2.kernelFiltered.params'
format = 'PARAMETERS'

[parameter.assoc_solve]
gamma_time = 2

# This doesnt work with eg Isotropic.465.6 = 0
# for the moment

[parameter.x]
datatype = x
names = $parameter.names
default = [0]*len($parameter.names)
apply_grid = True
sd = [1.]*len($parameter.names)
bounds = [[0,1]]*len($parameter.names)

[parameter.x.assoc_default]
gamma_time = 100.0
gamma_time_helper = 'gamma'

[parameter.x.assoc_bounds]
gamma_time = [0.0001,1000.]

[general]
datadir = test/data_type/input/,.,~/.eoldas
help_datadir ="Specify where the data and or conf files are"
here = os.getcwdu()
grid = True
is_spectral = False

[general.optimisation]
# These are the default values
iprint=1
gtol=1e-3
maxIter=2e4
maxFunEvals=2e4
name='solver'
plot=0
# see http://openopt.org/NLP#Box-bound_constrained
solverfn=scipy_lbfgsb 
randomise=False
no_df = False

[operator]
modelt.name=DModel_Operator
modelt.datatypes = x
obs.name=Kernel_Operator
obs.datatypes = x,y

[operator.modelt.x]
names = $parameter.names
sd = [1.]*len($operator.modelt.x.names)
datatype = x

[operator.modelt.rt_model]
model_order=2
help_model_order='The differential model order'
wraparound=periodic,365
help_wraparound='Wraparound conditions (periodic,reflexive,none). If periodic, then the period can be specified as a second argument (e.g. --operator.modelt.rt_model.wraparound=periodic,365)'
lag=1
help_lag='The grid lag spacing between samples for the differential operator. This can be a list, in which case lag weight is also required'
lag_weight = 1
help_lag_weight='The weight for the lag. Only of value if multiple lags are specified'

[operator.obs.x]
names = $parameter.names[1:]
sd = [1.0]*len($operator.obs.x.names)
datatype = x

[operator.obs.y]
control = 'mask vza vaa sza saa'.split()
#names = "465.6 553.6 645.5 856.5 1241.6 1629.1 2114.1".split()
#sd = "0.003 0.004 0.004 0.015 0.013 0.01 0.006".split()
names = "645.5 856.5".split()
sd = "0.004 0.015".split()
datatype = y
state = brdf_WW_1_A_2.kernelFiltered.dat

[operator.obs.y.result]
filename = './fwd-brdf_WW_1_A_2.kernelFiltered.brf'
format = 'PARAMETERS'




