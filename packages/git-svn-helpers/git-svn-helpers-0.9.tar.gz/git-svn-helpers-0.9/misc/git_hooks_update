#!/bin/sh
#
# git update hook extending the example update hook by requiregitsvnid and
# checkgitsvnid. see config doc right below. You can use this to make sure your
# repo does not accept commits that have not been dcommitted to svn yet.
#
# An example hook script to blocks unannotated tags from entering.
# Called by git-receive-pack with arguments: refname sha1-old sha1-new
#
# To enable this hook, save it as .git/hooks/update and configure accordingly.
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
# hooks.requiregitsvnid
#   This boolean sets whether commits need to contain a git-svn-id, i.e. have
#   been committed with 'git svn dcommit' to a svn server already. By default,
#   further checks are enabled, see hooks.disablegitsvnidchecks.
#   By default no git-svn-id is required.
# hooks.disablegitsvnidchecks
#   This boolean sets whether checks on the git-svn-id are disabled. This is
#   highly discouraged and should only be used for testing purposes!.
#   Checks performed:
#     - newrev author email domain == oldrev author email domain
#     - newrev commitmsg contains a git-svn-id
#     - oldrev commitmsg contains a git-svn-id
#     - oldrev git-svn-id == newrev git-svn-id, except for the svn revision
#   Example git-svn-id line in commitmsg:
#     git-svn-id: url-to-svn-repo/trunk@57924 db7f04ef-aaf3-0310-a811-c281ed44c4ad
#   By default checks are enabled.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "Usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --bool hooks.allowunannotated)
allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
denycreatebranch=$(git config --bool hooks.denycreatebranch)
allowdeletetag=$(git config --bool hooks.allowdeletetag)
allowmodifytag=$(git config --bool hooks.allowmodifytag)
requiregitsvnid=$(git config --bool hooks.requiregitsvnid)
disablegitsvnidchecks=$(git config --bool hooks.disablegitsvnidchecks)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero="0000000000000000000000000000000000000000"
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git-cat-file -t $newrev)
fi

getgitsvnid() {
    rev=$1
    gitsvnid=$(git show -s --pretty=%b $rev |grep ^git-svn-id: |cut -d' ' -f2-)
    echo -n $gitsvnid
}

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		if [ "$requiregitsvnid" = "true" ]; then
			newid=$(getgitsvnid $newrev)
			if [ "foo$newid" = "foo" ]; then
				echo "*** Declined commit without git-svn-id: dcommit first to svn" >&2
				exit 1
			fi
			if [ "$oldrev" != "$zero" -a "$disablegitsvnidchecks" != "true" ]; then
				oldid=$(getgitsvnid $oldrev)
				if [ "foo$oldid" = "foo" ]; then
					echo "*** Previous commit without git-svn-idn" >&2
					exit 1
				fi
				_newid="$(echo $newid |cut -d'@' -f1) $(echo $newid |cut -d' ' -f2)"
				_oldid="$(echo $oldid |cut -d'@' -f1) $(echo $oldid |cut -d' ' -f2)"
				if [ "$_newid" != "$_oldid" ]; then
					echo "*** Declined commit: git-svn-id differs too much from oldrev" >&2
					exit 1
				fi
			fi
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0
